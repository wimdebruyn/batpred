{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Home battery prediction and automatic charging for Home Assistant supporting multiple inverters including GivEnergy, Solis, Huawei, SolarEdge and Sofar. Also known by some as Batpred or Batman! Copyright (c) Trefor Southwell April 2024 - All rights reserved This software maybe used at not cost for personal use only No warranty is given, either expressed or implied For support please raise a Github ticket or use the Facebook Group: Predbat and watch my YouTube Channel Some inverters have their own groups also e.g: GivTCP Solis If you want to buy me a beer then please use Paypal - tdlj@tdlj.net Taster Once you are up and running you will get a chart that predicts your battery levels over time: And you can also see this in a plan format predicting your overall costs and your carbon footprint (if enabled, UK only for now): You can see a cost over time for the plan that Predbat has made and also how it might turn out if your solar production (should you have solar) is lower than expected or if you use a bit more energy than planned (10% scenario): You can see your energy rates over time and where the battery is being charged: Power charts can show you how the prediction maps to your inverter: You can model iBoost or similar solar diverters, this will be shown on your plan and you can even use it to trigger smart devices e.g. an emersion heater based on energy rates. You can predict when your car will charge and use Predbat to schedule the cheapest car charging slots: Charts can track your cost saving using Predbat and from having a PV and Battery system The calibration chart is useful for tuning the model for things like inverter losses until it matches reality: Predbat can track your actual vs predicted energy usage and make real time adjustments to the predictions if you use more or less: You can tune lots of parameters to match your system and needs: You can also override the plan on a temporary basis if you have a particular reason to: Please read the documentation for more information!","title":"Introduction"},{"location":"#introduction","text":"Home battery prediction and automatic charging for Home Assistant supporting multiple inverters including GivEnergy, Solis, Huawei, SolarEdge and Sofar. Also known by some as Batpred or Batman! Copyright (c) Trefor Southwell April 2024 - All rights reserved This software maybe used at not cost for personal use only No warranty is given, either expressed or implied For support please raise a Github ticket or use the Facebook Group: Predbat and watch my YouTube Channel Some inverters have their own groups also e.g: GivTCP Solis If you want to buy me a beer then please use Paypal - tdlj@tdlj.net","title":"Introduction"},{"location":"#taster","text":"Once you are up and running you will get a chart that predicts your battery levels over time: And you can also see this in a plan format predicting your overall costs and your carbon footprint (if enabled, UK only for now): You can see a cost over time for the plan that Predbat has made and also how it might turn out if your solar production (should you have solar) is lower than expected or if you use a bit more energy than planned (10% scenario): You can see your energy rates over time and where the battery is being charged: Power charts can show you how the prediction maps to your inverter: You can model iBoost or similar solar diverters, this will be shown on your plan and you can even use it to trigger smart devices e.g. an emersion heater based on energy rates. You can predict when your car will charge and use Predbat to schedule the cheapest car charging slots: Charts can track your cost saving using Predbat and from having a PV and Battery system The calibration chart is useful for tuning the model for things like inverter losses until it matches reality: Predbat can track your actual vs predicted energy usage and make real time adjustments to the predictions if you use more or less: You can tune lots of parameters to match your system and needs: You can also override the plan on a temporary basis if you have a particular reason to: Please read the documentation for more information!","title":"Taster"},{"location":"apps-yaml/","text":"apps.yaml settings The basic configuration for Predbat is configured in the apps.yaml file. Depending on whether you have used the combined AppDaemon/Predbat add-on installation method or the HACS, Appdaemon add-on then Predbat installation method , the apps.yaml file will be held in one of two directories in Home Assistant: /addon_configs/46f69597_appdaemon-predbat/apps if you used the combined AppDaemon/Predbat add-on installation method or /config/appdaemon/apps/batpred/config/ if you used the HACS, AppDaemon add-on then Predbat installation method You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to edit the apps.yaml file - see editing configuration files within Home Assistant if you need to install an editor. This section of the documentation describes what the different configuration items in apps.yaml do. When you edit apps.yaml , AppDaemon will automatically detect the change and Predbat will be reloaded with the updated file. You don't need to restart the AppDaemon add-on for your edits to take effect. Warning! apps.yaml file format When editing the apps.yaml file you must ensure that the file remains correctly formatted. YAML files are especially finicky about how the file contents are indented and its very easy to end up with an incorrectly formatted file that will cause problems for Predbat. The YAML Basics from This Smart Home is a good introduction video to how YAML should be correctly structured, but as a brief introduction, YAML files consist of an entity name, colon then the entity value, for example: timezone: Europe/London Or the entity can be set to a list of values with each value being on a new line, two spaces, a dash, then the value. For example: car_charging_now_response: - 'yes' - 'on' The two spaces before the dash are especially critical. Its easy to mis-edit and have one or three spaces which isn't valid YAML. Templates You can find template configurations in the following location: https://github.com/springfall2008/batpred/tree/main/templates The GivEnergy GivTCP template will be installed by default but if you are using another inverter please copy the correct template into the directory where your apps.yaml is stored, and modify it from there. Please read: Other Inverters for non Givenergy inverters Basics Basic configuration items prefix Set to the prefix name to be used for all entities that predbat creates in Home Assistant. Default 'predbat'. Unlikely that you will need to change this. prefix: predbat timezone Set to your local timezone, default is Europe/London. It must be set to a valid Python time zone for your location timezone: Europe/London currency_symbols Sets your symbol to use for your main currency e.g. \u00a3 or $ and for 1/100th unit e.g. p or c currency_symbols: - '\u00a3' - 'p' template Initially set to True, this is used to stop Predbat from operating until you have finished configuring your apps.yaml. Once you have made all other required changes to apps.yaml this line should be deleted or commented out. # template: True Home assistant connection Predbat can speak directly to Home Assistant rather than going via AppDaemon. If you are using a standard add-on then this will be automatic and you do not need to set this. If you run AppDaemon/Predbat in a Docker then you will need to set the URL of Home Assistant and the access key which is the long lived access token you can create inside Home Assistant. Currently if this communication is not established Predbat will fallback to AppDaemon, however some users have experienced failures due to a 10-second timeout set by AppDaemon. In future versions of Predbat AppDaemon will be removed. ha_url: 'http://homeassistant.local:8123' ha_key: 'xxxxxxxxxxx' threads If defined sets the number of threads to use during plan calculation, the default is 'auto' which will use the same number of threads as you have CPUs in your system. Valid values are: - 'auto' - Use the same number of threads as your CPU count - '0' - Don't use threads - disabled - 'N' - Use N threads, recommended values are between 2 and 8 threads: auto notify_devices A list of device names to notify when Predbat sends a notification. The default is just 'notify' which contacts all mobile devices notify_devices: - mobile_app_treforsiphone12_2 days_previous Predbat needs to know what your likely future house load will be to set and manage the battery level to support it. days_previous defines a list (which has to be entered as one entry per line) of the previous days of historical house load that are to be used to predict your future daily load. It's recommended that you set days_previous so Predbat calculates an average house load using sufficient days' history so that 'unusual' load activity (e.g. saving sessions, \"big washing day\", etc) get averaged out. For example, if you just want Predbat to assume the house load on a particular day is the same as the same day of last week: days_previous: - 7 Or if you want Predbat to take the average of the same day for the last two weeks: days_previous: - 7 - 14 Further details and worked examples of how days_previous works are covered at the end of this document. Do keep in mind that Home Assistant only keeps 10 days history by default, so if you want to access more than this for Predbat you might need to increase the number of days history kept in HA before it is purged by editing and adding the following to the /homeassistant/configuration.yaml configuration file and restarting Home Assistant afterwards: recorder: purge_keep_days: 14 days_previous_weight - A list (again with one entry per line) of weightings to be applied to each of the days in days_previous. For example, to apply a 100% weighting for the first day entry in days_previous, but only a 50% weighting to the second day in days_previous: days_previous_weight: - 1 - 0.5 The default value is 1, that all history days are equally weighted, so if you don't want to weight individual days you can simply use: days_previous_weight: - 1 forecast_hours the number of hours that Predbat will forecast ahead, 48 is the suggested amount, although other values can be used such as 30 or 36 if you have a small battery and thus don't need to forecast 2 days ahead. forecast_hours: 48 Inverter information The template apps.yaml comes pre-configured with regular expressions that should auto-discover the GivTCP Home Assistant entity names. If you have more than one inverter or entity names are non-standard then you will need to edit apps.yaml for your inverter entities. For other inverter brands, see Other Inverters num_inverters The number of inverters you have. If you increase this above 1 you must provide multiple of each of the inverter entities num_inverters: 1 geserial Only for GE inverters, this is a helper regular expression to find your serial number, if it doesn't work edit it manually or change individual entities to match. If you have more than one inverter you will need one per inverter to be used in the later configuration lines geserial: 're:sensor.givtcp_(.+)_soc_kwh' geserial2: 're:sensor.givtcp2_(.+)_soc_kwh' Historical data Predbat can either get historical data (house load, import, export and PV generation) directly from GivTCP or it can obtain it from the GivEnergy cloud. Unless you have a specific reason to not use the GivTCP data (e.g. you've lost your GivTCP data), its recommended to use GivTCP. Data from Home assistant The following configuration entries in apps.yaml are pre-configured to automatically use the appropriate sensors. If you have a 3-phase electricity supply and one inverter (and battery) on each phase then you will need to add one line for the load, import, export and PV sensors for each of the 3 phases. If you have a single phase electricity supply and multiple inverters on the phase then you will need to add one line for each of the load and PV sensors. You don't need multiple lines for the import or export sensors as each inverter will give the total import or export information. Edit if necessary if you have non-standard sensor names: load_today - Entity name for the house load in kWh today (must be incrementing) import_today - Imported energy today in kWh (incrementing) export_today - Exported energy today in kWh (incrementing) pv_today - PV energy today in kWh (incrementing). If you have multiple inverters, enter each inverter PV sensor on a separate line. If you have an AC-coupled inverter then enter the Home Assistant sensor for your PV inverter. If you don't have any PV panels, comment or delete this line out of apps.yaml. See the Workarounds section below for configuration settings for scaling these if required. If you have multiple inverters then you may find that the load_today figures are incorrect as the inverters share the house load between them. In this circumstance one solution is to create a Home Assistant template helper to calculate house load from {pv generation}+{battery discharge}-{battery charge}+{import}-{export}. e.g. {{ ( states('sensor.givtcp_XXX_pv_energy_today_kwh')|float(0) + <inverter 2>... + states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) + <inverter 2>... - states('sensor.givtcp_XXX_battery_charge_energy_today_kwh')|float(0) - <inverter 2>... + states('sensor.givtcp_XXX_import_energy_today_kwh')|float(0) - states('sensor.givtcp_XXX_export_energy_today_kwh')|float(0) ) | round(1) }} GivEnergy Cloud Data If you have an issue with the GivTCP data, Predbat can get the required historical data from the GivEnergy cloud instead. This data is updated every 30 minutes. Obviously connecting to the cloud is less efficient and means that Predbat will be dependent upon your internet connection and the GivEnergy cloud to operate. ge_cloud_data - When True Predbat will use the GE Cloud for data rather than load_today, import_today and export_today ge_cloud_serial - Set the inverter serial number to use for the Cloud data ge_cloud_key - Set to your API Key for the GE Cloud (long string) Load filtering By default if Predbat sees a gap in the historical load data it will fill it with average data. This is to help in the cases of small amounts of lost data. For entire lost days you should change days_previous to point to different days(s) or include 3 or more days and if you set switch.predbat_load_filter_modal to true, the lowest day's historical load will be discarded. load_filter_threshold - Sets the number of minutes of zero load data to be considered a gap (that's filled with average data), the default is 30. To disable, set it to 1440. Inverter control configurations inverter_limit - One per inverter. When set defines the maximum watts of AC output power for your inverter (e.g. 3600). This will help to emulate clipping when your solar produces more than the inverter can handle, but it won't be that accurate as the source of the data isn't minute by minute. If you have a separate Solar inverter as well then add the solar inverter limit to the battery inverter limit to give one total amount. For example, if you have a GivEnergy hybrid inverter you should set export_limit to 3600 or 5000 depending on which size inverter you have. If though you have a GivEnergy All-in-one (6kW AC limit) and a 5kW Solis solar inverter, you should set inverter_limit to 11000 (6000+5000). export_limit - One per inverter (optional). When set defines the maximum watts of AC power your inverter can export to the grid at (e.g. 2500). This will emulate the software export limit setting in the Inverter that you will have if your G98/G99 approval was lower than your maximum inverter power (check your install information for details). If you do not set an export limit then it's the same as the inverter limit. inverter_limit_charge and inverter_limit_discharge - One per inverter (optional). When set in watts, overrides the maximum charge/discharge rate settings used when controlling the inverter. This can be used if you need to cap your inverter battery rate (e.g. charge overnight at a slower rate to reduce inverter/battery heating) as Predbat will normally configure all timed charges or discharges to be at the inverter's maximum rate. Controlling the Inverter There are two ways that Predbat can control GivTCP to control the inverter, either via REST API calls (preferred) or via the GivTCP inverter controls in Home Assistant. REST Interface inverter control givtcp_rest - One entry per Inverter, sets the GivTCP REST API URL ( http://homeassistant.local:6345 is the normal address and port for the first inverter, and the same address but ending :6346 if you have a second inverter - if you haven't a second inverter, delete the second line). When enabled the Home Assistant GivTCP Inverter Controls below are not used and instead communication from Predbat to GivTCP is directly via REST and thus bypasses some issues with MQTT. If using Docker then change homeassistant.local to the Docker IP address. To check your REST is working open up the readData API point in a Web browser e.g: http://homeassistant.local:6345/readData If you get a bunch of inverter information back then it's working! TIP: It's recommended you enable 'Output Raw Register Values' in GivTCP (via Settings / Add-on's / GivTCP / configuration tab) for added monitoring, and set the Self Run Loop Timer which controls how often GivTCP retrieves data from your inverters to a value between 20 and 60 seconds. Do not set Self Run to too low a value (i.e. retrieve too often) as this may overload the inverter: TIP: You can replace homeassistant.local with the IP address of your Home Assistant server if you have it set to a fixed IP address. This may improve reliability of the REST connection as it doesn't need to lookup the HA server IP address each time. Home Assistant GivTCP inverter control Predbat can control GivEnergy inverters with GivTCP and REST mode, but if this is commented out then regular Home Assistant controls are used and can interact with many different inverters. The template apps.yaml for Giv Energy is pre-configured with regular expressions for the following configuration items that should auto-discover the GivTCP controls for two inverters (givtcp and givtcp2), but may need changing if you have non-standard GivTCP entity names. If you only have a single inverter then the givtcp2 lines can be commented out if so desired. The template apps.yaml is pre-configured with regular expressions for GivEnergy GivTCP controls, but will need to be changed for other inverters or if you have multiple inverters. The givtcp_rest line should be commented out/deleted on anything but GivTCP REST mode. charge_rate - Battery charge rate entity in watts discharge_rate - Battery discharge max rate entity in watts battery_power - Current battery power in watts pv_power - Current PV power in watts load_power - Current load power in watts soc_kw - Entity name of the battery SOC in kWh, should be the inverter one not an individual battery soc_max - Entity name for the maximum charge level for the battery reserve - sensor name for the reserve setting in % inverter_mode - Givenergy inverter mode control pause_mode - Givenergy pause mode register (if present) inverter_time - Inverter timestamp charge_start_time - Battery charge start time entity charge_end_time - Battery charge end time entity charge_limit - Entity name for used to set the SOC target for the battery in percentage (AC charge target) scheduled_charge_enable - Scheduled charge enable config scheduled_discharge_enable - Scheduled discharge enable config discharge_start_time - scheduled discharge slot_1 start time discharge_end_time - scheduled discharge slot_1 end time pause_start_time - scheduled pause start time (only if supported by your inverter) pause_end_time - scheduled pause start time (only if supported by your inverter) If you are using REST control the configuration items should still be kept as not all controls work with REST. See section below on creating the battery charge power curve . Solcast Solar Forecast As described in the Predbat installation instructions , Predbat needs a solar forecast in order to predict solar generation and battery charging which can be provided by the Solcast integration. The template apps.yaml is pre-configured with regular expressions for the following configuration items that should auto-discover the Solcast entity names. They are unlikely to need changing although a few people have reported their entity names don't contain 'solcast' so worth checking, or edit if you have non-standard names: pv_forecast_today - Entity name for today's Solcast forecast pv_forecast_tomorrow - Entity name for tomorrow's Solcast's forecast pv_forecast_d3 - Entity name for Solcast's forecast for day 3 pv_forecast_d4 - Entity name for Solcast's forecast for day 4 (also d5, d6 & d7 are supported, but not that useful) If you do not have a PV array then comment out or delete these Solcast lines from apps.yaml . If you have multiple PV arrays connected to GivEnergy Hybrid inverters or you have GivEnergy AC-coupled inverters, then ensure your PV configuration in Solcast covers all arrays. If however you have a mixed PV array setup with some PV that does not feed into your GivEnergy inverters (e.g. hybrid GE inverters but a separate older FIT array that directly feeds AC into the house), then it's recommended that Solcast is only configured for the PV connected to the GivEnergy inverters. Solcast produces 3 forecasted PV estimates, the 'central' (50% or most likely to occur) PV forecast, the '10%' (worst case) PV forecast, and the '90%' (best case) PV forecast. By default Predbat will use the central estimate and applies to it the input_number.predbat_pv_metric10_weight weighting of the 10% (worst case) estimate. Predbat models cloud coverage by using the difference between the PV and PV10 forecasts to work out a cloud factor, this modulates the PV output predictions up and down accordingly as if there were passing clouds. This can have an impact on planning, especially for things like freeze charging which could assume the PV will cover the house load but it might not due to clouds. pv_estimate in apps.yaml can be used to configure Predbat to always use the 10% forecast by setting the configuration item to '10', or '90' to always use the 90% PV estimate (not recommended!). Set to blank or delete / comment out the line to use the default central estimate. If pv_estimate is set to 10 then input_number.predbat_pv_metric10_weight in Home Assistant should be set to 1.0. Energy Rates There are a number of configuration items in apps.yaml for telling Predbat what your import and export rates are. These are described in detail in Energy Rates and are listed here just for completeness: metric_octopus_import - Import rates from the Octopus Energy integration metric_octopus_export - Export rates from the Octopus Energy integration metric_octopus_gas - Gas rates from the Octopus Energy integration octopus_intelligent_slot - Octopus Intelligent GO slot sensor from the Octopus Energy integration octopus_saving_session - Energy saving sessions sensor from the Octopus Energy integration octopus_saving_session_octopoints_per_penny - Sets the Octopoints per pence rates_import_octopus_url - Octopus pricing URL (over-rides metric_octopus_import) rates_export_octopus_url - Octopus export pricing URL (over-rides metric_octopus_export) metric_standing_charge - Standing charge in pounds rates_import - Import rates over a 24-hour period with start and end times rates_export - Export rates over a 24-hour period with start and end times rates_gas - Gas rates over a 24-hour period with start and end times rates_import_override - Over-ride import rate for specific date and time range, e.g. Octopus Power-up events rates_export_override - Over-ride export rate for specific date and time range futurerate_url - URL of future energy market prices for Agile users futurerate_adjust_import and futurerate_adjust_export - Whether tomorrow's predicted import or export prices should be adjusted based on market prices or not futurerate_peak_start and futurerate_peak_end - start/end times for peak-rate adjustment futurerate_peak_premium_import and futurerate_peak_premium_export - price premium to be added during the peak period carbon_intensity - Carbon intensity of the grid in half hour slots from an integration. Car Charging Integration Predbat is able to include electric vehicle charging in its plan and manage the battery activity so that the battery isn't discharged into your car when the car is charging (although you can over-ride this if you wish by setting the switch.predbat_car_charging_from_battery to True in Home Assistant). There are two different ways of planning car charging into cheap slots with Predbat, either by the Octopus Energy integration or by Predbat identifying the cheapest slots. These approaches and the set of settings that need to be configured together are described in Car Charging Planning . The full list of car charging configuration items in apps.yaml that are used to plan car charging activity within Predbat are described below. The Home Assistant controls (switches, input numbers, selectors, etc) related to car charging are described in Car Charging configuration within Home Assistant , with brief mention of pertinent controls included here alongside the apps.yaml configuration items where relevant for context. num_cars should be set in apps.yaml to the number of cars you want Predbat to plan for. Set to 0 if you don't have an EV (and the remaining car sensors in apps.yaml can safely be commented out or deleted as they won't be required). Car Charging Filtering You might want to remove your electric car charging data from the historical house load data so as to not bias the calculations, otherwise you will get high battery charge levels when the car was charged previously (e.g. last week). switch.predbat_car_charging_hold - A Home Assistant switch that when turned on (True) tells Predbat to remove car charging data from your historical house load so that Predbat's battery prediction plan is not distorted by previous car charging. car_charging_energy - Set in apps.yaml to point to a Home Assistant entity which is the incrementing kWh data for the car charger. This has been pre-defined to a regular expression that should auto-detect the appropriate Wallbox and Zappi car charger sensors, or edit as necessary in apps.yaml for your charger sensor. This can be set to a list of car charging energy sensors, one per line if you have multiple EV car chargers. TIP: You can also use car_charging_energy to remove other house load kWh from the data Predbat uses for the forecast, e.g. if you want to remove Mixergy hot water tank heating data from the forecast such as if you sometimes heat on gas, and sometimes electric depending upon import rates. input_number.predbat_car_charging_energy_scale - A Home Assistant entity used to define a scaling factor (in the range 0.1 to 1.0) to multiply the car_charging_energy data by if required (e.g. set to 0.001 to convert Watts to kW). If you do not have a suitable car charging energy kWh sensor in Home Assistant then comment the car_charging_energy line out of apps.yaml and configure the following Home Assistant entity: input_number.predbat_car_charging_threshold - Sets the threshold above which home consumption is assumed to be car charging and will be removed from the home load data (default 6 = 6kW). Planned Car Charging These features allow Predbat to know when you plan to charge your car. If you have Intelligent Octopus setup then planning of charging is done via the Octopus app and Predbat obtains this information through the Octopus Energy integration in Home Assistant. switch.predbat_octopus_intelligent_charging - When this Home Assistant switch is enabled, Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information The following apps.yaml configuration items are pre-defined with regular expressions to point to appropriate sensors in the Octopus Energy integration. You should not normally need to change these if you have Octopus Intelligent: octopus_intelligent_slot - Points to the Octopus Energy integration 'intelligent dispatching' sensor that indicates whether you are within an Octopus Energy \"smart charge\" slot, and provides the list of future planned charging activity. octopus_ready_time - Points to the Octopus Energy integration sensor that details when the car charging will be completed by. octopus_charge_limit - Points to the Octopus Energy integration sensor that provides the car charging limit. If you don't use Intelligent Octopus then the above 3 Octopus Intelligent configuration lines in apps.yaml can be commented out or deleted, and there are a number of other apps.yaml configuration items that should be set: car_charging_planned - Optional, can be set to a Home Assistant sensor (e.g. from your car charger integration) which lets Predbat know the car is plugged in and planned to charge during low rate slots. Or manually set it to 'False' to disable this feature, or 'True' to always enable. The apps.yaml template supplied with Predbat comes pre-configured with a regular expression that should automatically match Zappi or Wallbox car chargers. If you have a different type of charger you will need to configure it manually. car_charging_planned_response - An array of values for the above car_charging_planned sensor which indicate that the car is plugged in and will charge in the next low rate slot. The template apps.yaml comes with a set of pre-defined sensor values that should match most EV chargers. Customise for your car charger sensor if it sets sensor values that are not in the list. car_charging_now - For some cases finding details of planned car charging is difficult to obtain (e.g. Ohme with Intelligent doesn't report slots). The car_charging_now configuration item can be set to point to a Home Assistant sensor that tells you that the car is currently charging. Predbat will then assume this 30 minute slot is used for charging regardless of the plan. If Octopus Intelligent Charging is enabled and car_charging_now indicates the car is charging then Predbat will also assume that this is a low rate slot for the car/house (and might therefore start charging the battery), otherwise electricity import rates are taken from the normal rate data. car_charging_now_response - Set to the range of positive responses for car_charging_now to indicate that the car is charging. Useful if you have a sensor for your car charger that isn't binary. To make planned car charging more accurate, configure the following items in apps.yaml : car_charging_battery_size - Set this value in apps.yaml to the car's battery size in kWh. If not set, Predbat defaults to 100kWh. It will be used to predict when to stop car charging. car_charging_limit - You should configure this to point to a sensor that specifies the % limit the car is set to charge to. This could be a sensor on the EV charger integration or a Home Assistant helper entity you can set as you wish. If you don't specify a sensor Predbat will default to 100% - i.e. fill the car to full. car_charging_soc - You should configure this to point to a sensor (on the HA integration for your EV charger) that specifies the car's current charge level expressed as a percentage - it must NOT be set to a sensor that gives the car's current kWh value as this will cause Predbat to charge the car to an incorrect level. If you don't specify a sensor, Predbat will default to 0%. Multiple Electric Cars Multiple cars can be planned with Predbat, in which case you should set num_cars in apps.yaml to the number of cars you want to plan car_charging_limit , car_charging_planned , car_charging_battery_size and car_charging_soc must then be a list of values (i.e. 2 entries for 2 cars) If you have Intelligent Octopus then Car 0 will be managed by the Octopus Energy integration, if its enabled Each car will have it's own Home Assistant slot sensor created e.g. binary_sensor.predbat_car_charging_slot_1 , SoC planning sensor e.g predbat.car_soc_1 and predbat.car_soc_best_1 for car 1 Load Forecast In addition to the historical house load data that Predbat uses by default, you can optionally provide a forecast of future load such as is produced by Predheat for Hot water and Heat Pump heating systems or via Predai load_forecast - this should be configured to point to a sensor and attribute. The attribute must in either The format of 'last_updated' timestamp and 'energy' in incrementing kWh. The format of a dictionary of timestamps and energy data in incremental KWh. For example: Or apps.yaml should be configured to point to the forecast sensor and attribute (in the above formats) like this: load_forecast: - sensor_name$attribute_name So if using Predheat it would be configured as: load_forecast: - predheat.heat_energy$external Set load_forecast_only to True if you do not wish to use the Predbat forecast but instead want to use this as your only forecast data e.g using PredAi: load_forecast_only: True load_forecast: - sensor.givtcp_{geserial}_load_energy_today_kwh_prediction$results Balance Inverters When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. Most of the Predbat configuration for balancing inverters is through a number of Home Assistant controls for Balancing Inverters , but there is one configuration item in apps.yaml : balance_inverters_seconds: seconds Defines how often to run the inverter balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds. Workarounds There are a number of different configuration items in apps.yaml that can be used to tweak the way Predbat operates and workaround weirdness you may have from your inverter and battery setup. Clock skew clock_skew: minutes Skews the local (computer) time that Predbat uses (from AppDaemon). Set to 1 means add a minute to the AppDaemon time, set to -1 means take a minute off the AppDaemon time. This clock adjustment will be used by Predbat when real-time actions happen e.g. triggering a charge or discharge. If your inverter's time is different to the time on the computer running Home Assistant, you may need to skew the time settings made on the inverter when you trigger charging or discharging. Again 1 means the inverter is 1 minute fast and -1 means the inverter is 1 minute slow. Separate start and end options are applied to the start and end time windows, mostly as you want to start battery activity late (not early) and finish early (not late). You can adjust the charge and discharge times written to the inverter by setting the following in apps.yaml : inverter_clock_skew_start: minutes inverter_clock_skew_end: minutes Skews the setting of the charge slot registers vs the predicted start time inverter_clock_skew_discharge_start: minutes inverter_clock_skew_discharge_end: minutes Skews the setting of the discharge slot registers vs the predicted start time Battery size scaling battery_scaling: - scale Default value 1.0. Multiple battery size scales can be entered, one per inverter on separate lines. This setting is used to scale the battery reported SoC kWh to make it appear bigger or larger than it is. As the GivEnergy inverters treat all batteries attached to an inverter as in effect one giant battery, if you have multiple batteries on an inverter that need scaling you should enter a composite scaling value for all batteries attached to the inverter. TIP: If you have a GivEnergy 2.6 or 5.2kWh battery then it will have an 80% depth of discharge but it will falsely report its capacity as being the 100% size, so set battery_scaling to 0.8 to report the correct usable capacity figure to Predbat. TIP: Likewise if you have a GivEnergy All in One, it will incorrectly report the 13.5kWh usable capacity as 15.9kWh, so set battery_scaling to 0.85 to correct this. If you are going chart your battery SoC in Home Assistant then you may want to use predbat.soc_kw_h0 as your current SoC rather than the usual givtcp_ _soc GivTCP entity so everything lines up. Import export scaling import_export_scaling: scale Default value 1.0. Used to scale the import & export kWh data from GivTCP if the inverter information is incorrect. Inverter rate minimum inverter_battery_rate_min: watts One per inverter (optional), set in Watts, when set models a \"bug\" in the inverter firmware in some models where if charge or discharge rates are set to 0 you actually get a small amount of charge or discharge. Recommended setting is 200 for Gen 1 hybrids with this issue. Inverter reserve maximum inverter_reserve_max: percent Global, sets the maximum reserve % that may be set to the inverter, the default is 98, as some Gen 2 & Gen 3 inverters and AIO firmware versions refuse to be set to 100. Comment the line out or set to 100 if your inverter allows setting to 100%. Automatic restarts If the add-on that is providing the inverter control stops functioning it can prevent Predbat from functioning correctly. In this case you can tell Predbat how to restart the add-on using a service. Right now only communication loss with GE inverters is detectable but in future other systems will be supported. When enabled if communication is lost then the service configured will be triggered and can cause a restart which may restart the connection. This maybe useful with GivTCP if you have time sync errors or lost of REST service every now and again. The auto_restart itself is a list of commands to run to trigger a restart. The shell command will call a 'sh' shell and can be used to delete files and suchlike. The service command is used to call a service, and can contain arguments of addon and/or entity_id auto_restart: - shell: 'rm -rf /homeassistant/GivTCP/*.pkl' - service: hassio/addon_restart addon: a6a2857d_givtcp Battery charge/discharge curves battery_charge_power_curve - Some batteries tail off their charge rate at high SoC% and this optional configuration item enables you to model this in Predbat. Enter the charging curve as a series of steps of % of max charge rate for each SoC percentage. The default is 1.0 (full power) charge all the way to 100%. Modelling the charge curve becomes important if you have limited charging slots (e.g. only a few hours a night) or you wish to make accurate use of the low power charging mode ( switch.predbat_set_charge_low_power ). Predbat can now automatically calculate the charging curve for you if you have enough suitable historical data in Home Assistant. The charging curve will be calculated when the battery_charge_power_curve option is not set in apps.yaml and Predbat performs an initial run (e.g. due to restarting AppDaemon or an edit being made to apps.yaml). You should look at the AppDaemon/Predbat logfile to find the predicted battery charging curve and copy/paste it into your apps.yaml file. The logfile will also include a recommendation for how to set your battery_rate_max_scaling setting in HA. The YouTube video charging curve and low power charging explains how the curve works and shows how Predbat automatically creates it. Setting this option to auto will cause the computed curve to be stored and used automatically. This is not recommended if you use low power charging mode as your history will eventually not contain any full power charging data to compute the curve, so in this case it's best to manually save the data. NB: In order for Predbat to have calculate your charging curve it needs to have access to historical Home Assistant data for battery_charge_rate, battery_power and soc_kw. If you are using the recommended default REST mode to control your inverter then you will need to uncomment out the following entries in apps.yaml : charge_rate: - number.givtcp_{geserial}_battery_charge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh Once the battery charge curve has been created these entries can be commented out again in apps.yaml . Example charging curve from a GivEnergy 9.5kWh battery with latest firmware and Gen 1 inverter: battery_charge_power_curve: 91 : 0.91 92 : 0.81 93 : 0.71 94 : 0.62 95 : 0.52 96 : 0.43 97 : 0.33 98 : 0.24 99 : 0.24 100 : 0.24 battery_discharge_power_curve - Some batteries tail off their discharge rate at low SoC% and this optional configuration item enables you to model this in Predbat. Enter the discharging curve as a series of steps of % of max discharge rate for each SoC percentage. The default is 1.0 (full power) discharge all the way to 0%. When the battery_discharge_power_curve option is not set in apps.yaml and Predbat performs an initial run (e.g. due to restarting AppDaemon or an edit being made to apps.yaml), Predbat will generate the curve for you from historical battery discharging information. You should look at the AppDaemon/Predbat logfile to find the predicted battery discharging curve and copy/paste it into your apps.yaml file. Setting This option to auto will cause the computed curve to be stored and used automatically. This may not work very well if you don't do regular discharges to empty the battery. In the same way as for the battery charge curve above, Predbat needs to have access to historical Home Assistant data for battery_discharge_rate, battery_power and soc_kw. If you are using REST mode to control your inverter then the following entries in apps.yaml will need to be uncommented : discharge_rate: - number.givtcp_{geserial}_battery_discharge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh Triggers export_triggers - The export trigger feature is useful to help trigger your own automations based on Predbat predicting in the plan that you will have spare solar energy that would be exported - this could happen if the battery is full or there is more predicted solar generation than can be charged into the battery. You can use the trigger in an automation, for example you could turn on an immersion heater or the washing machine to consume the excess solar power. The triggers count export energy until the next active charge slot only. For each trigger give a name, the minutes of export needed, and the energy required in that time. Multiple triggers can be enabled by Predbat at once so in total you could use too much energy if multiple triggered automations all run. Each trigger specified in apps.yaml will create a Home Assistant entity called 'binary_sensor.predbat_export_trigger_ name ' which will be turned on when the predicted trigger conditions are valid. Connect this binary sensor to your automation to start whatever you want to trigger. Set the name for each trigger, the number of minutes of solar export you need, and the amount of energy in kWh you will need available during that time period in apps.yaml: For example: export_triggers: - name: \"large\" minutes: 60 energy: 1.0 - name: \"small\" minutes: 15 energy: 0.25 Note: Predbat will set an export trigger to True if in the plan it predicts that there will be more than the specified amount of excess solar energy over the specified time period. In the example above, the 'large' trigger will be set to True for the 1 hour period where Predbat predicts that there will be a total of 1kWh of excess solar generation over that time period . For clarity the trigger is not set based on actual excess solar generation or export. It should also be recognised that this prediction could be wrong; there could be less solar generation or more house load than was predicted in the plan. If you wish to trigger activities based on Predbat charging or discharging the battery rather than spare solar energy you can instead use the following binary sensors in Home Assistant: binary_sensor.predbat_charging - Will be True when the home battery is inside a charge slot (either being charged or being held at a level). Note that this does include charge freeze slots where the discharge rate is set to zero without charging the battery. binary_sensor.predbat_discharging - Will be True when the home battery is inside a force discharge slot. This does not include discharge freeze slots where the charge rate is set to zero to export excess solar only. Understanding how days_previous works As described earlier, days_previous is a list of the previous days of historical house load that are averaged together to predict your future daily load. e.g., if you want the average of the same day for the last 2 weeks: days_previous: - 7 - 14 This section describes in more detail how days_previous is used by Predbat in creating the future battery plan, and gives some worked examples and a 'gotcha' to be aware of. When Predbat forecasts future home demand it counts backwards the days_previous number of days to find the appropriate historical home consumption. This is best explained through a worked example: In this example, days_previous is set to use history from 2 days ago: days_previous: - 2 If right now today it's Monday 3:15pm and Predbat is predicting the forward plan for the next 48 hours: For tomorrow (Tuesday) 9am slot, Predbat will look backwards 2 days from Tuesday so will use the historical home consumption from Sunday 9am as being the predicted load for Tuesday 9am. For the day after (Wednesday) 9am slot, Predbat again looks backwards 2 days from that day, so will use historical home consumption from Monday 9am as being the Wednesday 9am prediction. This pattern of counting backwards days_previous days to find the appropriate time slot to load historical home consumption from requires Predbat to operate some additional special processing if days_previous is set to a low value or forecast_hours to a high value. Extending the previous example but this time days_previous is set to use history from just the previous day: days_previous: - 1 Today its still Monday 3:15pm and Predbat is predicting the forward plan for the next 48 hours: For tomorrow (Tuesday) 9am slot, Predbat will look backwards 1 day from Tuesday so will use the historical home consumption from today (Monday) 9am as being the predicted load for Tuesday 9am. For the day after (Wednesday) 9am slot, Predbat again looks backwards 1 days from that day, so looks for historical home consumption from Tuesday 9am as being the Wednesday 9am prediction, but of course it's still Monday and Tuesday hasn't happened yet so we can't know what that historial consumption was! What Predbat does in this circumstance is to subtract a further day from days_previous and for Wednesday 9am's prediction it will therefore use the historical load from Monday 9am. This issue of finding future historical load only occurs when days_previous is set to 1 and Predbat is forecasting more than 24 hours ahead from 'now'. So to highlight this with some edge cases, today is still Monday 3:15pm, days_previous is still set to '1' and in the forward plan: For tomorrow (Tuesday) 2:30pm slot, Predbat looks backwards 1 day from Tuesday and takes the historical home consumption from today (Monday) 2:30pm slot. For tomorrow (Tuesday) 3:00pm slot, Predbat looks backwards 1 day and takes the historical load from today (Monday) 3:00pm slot - which we are only part way through so only 15 minutes of load will be predicted for tomorrow 3pm. For tomorrow (Tuesday) 3:30pm slot, Predbat looks backwards 1 day but the 3:30pm slot today hasn't yet occurred so Predbat will take the historical load from the prior day and has to use Sunday's 3:30pm load for tomorrow's prediction. Ditto the predicted load for tomorrow (Tuesday) 4:00pm slot comes from Sunday 4pm. Of course as today rolls forward and Predbat keeps on updating the forward plan every 5 minutes the prediction will be updated with the correct previous_day history as and when it exists. Its recommended therefore that days_previous isn't set to 1, or if it is, that you understand the way this has to work and the consequences. If you want to set days_previous to take an average of the house load over all the days of the last week its suggested that it be set as: days_previous: - 2 - 3 - 4 - 5 - 6 - 7 - 8","title":"apps.yaml settings"},{"location":"apps-yaml/#appsyaml-settings","text":"The basic configuration for Predbat is configured in the apps.yaml file. Depending on whether you have used the combined AppDaemon/Predbat add-on installation method or the HACS, Appdaemon add-on then Predbat installation method , the apps.yaml file will be held in one of two directories in Home Assistant: /addon_configs/46f69597_appdaemon-predbat/apps if you used the combined AppDaemon/Predbat add-on installation method or /config/appdaemon/apps/batpred/config/ if you used the HACS, AppDaemon add-on then Predbat installation method You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to edit the apps.yaml file - see editing configuration files within Home Assistant if you need to install an editor. This section of the documentation describes what the different configuration items in apps.yaml do. When you edit apps.yaml , AppDaemon will automatically detect the change and Predbat will be reloaded with the updated file. You don't need to restart the AppDaemon add-on for your edits to take effect.","title":"apps.yaml settings"},{"location":"apps-yaml/#warning-appsyaml-file-format","text":"When editing the apps.yaml file you must ensure that the file remains correctly formatted. YAML files are especially finicky about how the file contents are indented and its very easy to end up with an incorrectly formatted file that will cause problems for Predbat. The YAML Basics from This Smart Home is a good introduction video to how YAML should be correctly structured, but as a brief introduction, YAML files consist of an entity name, colon then the entity value, for example: timezone: Europe/London Or the entity can be set to a list of values with each value being on a new line, two spaces, a dash, then the value. For example: car_charging_now_response: - 'yes' - 'on' The two spaces before the dash are especially critical. Its easy to mis-edit and have one or three spaces which isn't valid YAML.","title":"Warning! apps.yaml file format"},{"location":"apps-yaml/#templates","text":"You can find template configurations in the following location: https://github.com/springfall2008/batpred/tree/main/templates The GivEnergy GivTCP template will be installed by default but if you are using another inverter please copy the correct template into the directory where your apps.yaml is stored, and modify it from there. Please read: Other Inverters for non Givenergy inverters","title":"Templates"},{"location":"apps-yaml/#basics","text":"Basic configuration items","title":"Basics"},{"location":"apps-yaml/#prefix","text":"Set to the prefix name to be used for all entities that predbat creates in Home Assistant. Default 'predbat'. Unlikely that you will need to change this. prefix: predbat","title":"prefix"},{"location":"apps-yaml/#timezone","text":"Set to your local timezone, default is Europe/London. It must be set to a valid Python time zone for your location timezone: Europe/London","title":"timezone"},{"location":"apps-yaml/#currency_symbols","text":"Sets your symbol to use for your main currency e.g. \u00a3 or $ and for 1/100th unit e.g. p or c currency_symbols: - '\u00a3' - 'p'","title":"currency_symbols"},{"location":"apps-yaml/#template","text":"Initially set to True, this is used to stop Predbat from operating until you have finished configuring your apps.yaml. Once you have made all other required changes to apps.yaml this line should be deleted or commented out. # template: True","title":"template"},{"location":"apps-yaml/#home-assistant-connection","text":"Predbat can speak directly to Home Assistant rather than going via AppDaemon. If you are using a standard add-on then this will be automatic and you do not need to set this. If you run AppDaemon/Predbat in a Docker then you will need to set the URL of Home Assistant and the access key which is the long lived access token you can create inside Home Assistant. Currently if this communication is not established Predbat will fallback to AppDaemon, however some users have experienced failures due to a 10-second timeout set by AppDaemon. In future versions of Predbat AppDaemon will be removed. ha_url: 'http://homeassistant.local:8123' ha_key: 'xxxxxxxxxxx'","title":"Home assistant connection"},{"location":"apps-yaml/#threads","text":"If defined sets the number of threads to use during plan calculation, the default is 'auto' which will use the same number of threads as you have CPUs in your system. Valid values are: - 'auto' - Use the same number of threads as your CPU count - '0' - Don't use threads - disabled - 'N' - Use N threads, recommended values are between 2 and 8 threads: auto","title":"threads"},{"location":"apps-yaml/#notify_devices","text":"A list of device names to notify when Predbat sends a notification. The default is just 'notify' which contacts all mobile devices notify_devices: - mobile_app_treforsiphone12_2","title":"notify_devices"},{"location":"apps-yaml/#days_previous","text":"Predbat needs to know what your likely future house load will be to set and manage the battery level to support it. days_previous defines a list (which has to be entered as one entry per line) of the previous days of historical house load that are to be used to predict your future daily load. It's recommended that you set days_previous so Predbat calculates an average house load using sufficient days' history so that 'unusual' load activity (e.g. saving sessions, \"big washing day\", etc) get averaged out. For example, if you just want Predbat to assume the house load on a particular day is the same as the same day of last week: days_previous: - 7 Or if you want Predbat to take the average of the same day for the last two weeks: days_previous: - 7 - 14 Further details and worked examples of how days_previous works are covered at the end of this document. Do keep in mind that Home Assistant only keeps 10 days history by default, so if you want to access more than this for Predbat you might need to increase the number of days history kept in HA before it is purged by editing and adding the following to the /homeassistant/configuration.yaml configuration file and restarting Home Assistant afterwards: recorder: purge_keep_days: 14 days_previous_weight - A list (again with one entry per line) of weightings to be applied to each of the days in days_previous. For example, to apply a 100% weighting for the first day entry in days_previous, but only a 50% weighting to the second day in days_previous: days_previous_weight: - 1 - 0.5 The default value is 1, that all history days are equally weighted, so if you don't want to weight individual days you can simply use: days_previous_weight: - 1","title":"days_previous"},{"location":"apps-yaml/#forecast_hours","text":"the number of hours that Predbat will forecast ahead, 48 is the suggested amount, although other values can be used such as 30 or 36 if you have a small battery and thus don't need to forecast 2 days ahead. forecast_hours: 48","title":"forecast_hours"},{"location":"apps-yaml/#inverter-information","text":"The template apps.yaml comes pre-configured with regular expressions that should auto-discover the GivTCP Home Assistant entity names. If you have more than one inverter or entity names are non-standard then you will need to edit apps.yaml for your inverter entities. For other inverter brands, see Other Inverters","title":"Inverter information"},{"location":"apps-yaml/#num_inverters","text":"The number of inverters you have. If you increase this above 1 you must provide multiple of each of the inverter entities num_inverters: 1","title":"num_inverters"},{"location":"apps-yaml/#geserial","text":"Only for GE inverters, this is a helper regular expression to find your serial number, if it doesn't work edit it manually or change individual entities to match. If you have more than one inverter you will need one per inverter to be used in the later configuration lines geserial: 're:sensor.givtcp_(.+)_soc_kwh' geserial2: 're:sensor.givtcp2_(.+)_soc_kwh'","title":"geserial"},{"location":"apps-yaml/#historical-data","text":"Predbat can either get historical data (house load, import, export and PV generation) directly from GivTCP or it can obtain it from the GivEnergy cloud. Unless you have a specific reason to not use the GivTCP data (e.g. you've lost your GivTCP data), its recommended to use GivTCP.","title":"Historical data"},{"location":"apps-yaml/#data-from-home-assistant","text":"The following configuration entries in apps.yaml are pre-configured to automatically use the appropriate sensors. If you have a 3-phase electricity supply and one inverter (and battery) on each phase then you will need to add one line for the load, import, export and PV sensors for each of the 3 phases. If you have a single phase electricity supply and multiple inverters on the phase then you will need to add one line for each of the load and PV sensors. You don't need multiple lines for the import or export sensors as each inverter will give the total import or export information. Edit if necessary if you have non-standard sensor names: load_today - Entity name for the house load in kWh today (must be incrementing) import_today - Imported energy today in kWh (incrementing) export_today - Exported energy today in kWh (incrementing) pv_today - PV energy today in kWh (incrementing). If you have multiple inverters, enter each inverter PV sensor on a separate line. If you have an AC-coupled inverter then enter the Home Assistant sensor for your PV inverter. If you don't have any PV panels, comment or delete this line out of apps.yaml. See the Workarounds section below for configuration settings for scaling these if required. If you have multiple inverters then you may find that the load_today figures are incorrect as the inverters share the house load between them. In this circumstance one solution is to create a Home Assistant template helper to calculate house load from {pv generation}+{battery discharge}-{battery charge}+{import}-{export}. e.g. {{ ( states('sensor.givtcp_XXX_pv_energy_today_kwh')|float(0) + <inverter 2>... + states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) + <inverter 2>... - states('sensor.givtcp_XXX_battery_charge_energy_today_kwh')|float(0) - <inverter 2>... + states('sensor.givtcp_XXX_import_energy_today_kwh')|float(0) - states('sensor.givtcp_XXX_export_energy_today_kwh')|float(0) ) | round(1) }}","title":"Data from Home assistant"},{"location":"apps-yaml/#givenergy-cloud-data","text":"If you have an issue with the GivTCP data, Predbat can get the required historical data from the GivEnergy cloud instead. This data is updated every 30 minutes. Obviously connecting to the cloud is less efficient and means that Predbat will be dependent upon your internet connection and the GivEnergy cloud to operate. ge_cloud_data - When True Predbat will use the GE Cloud for data rather than load_today, import_today and export_today ge_cloud_serial - Set the inverter serial number to use for the Cloud data ge_cloud_key - Set to your API Key for the GE Cloud (long string)","title":"GivEnergy Cloud Data"},{"location":"apps-yaml/#load-filtering","text":"By default if Predbat sees a gap in the historical load data it will fill it with average data. This is to help in the cases of small amounts of lost data. For entire lost days you should change days_previous to point to different days(s) or include 3 or more days and if you set switch.predbat_load_filter_modal to true, the lowest day's historical load will be discarded. load_filter_threshold - Sets the number of minutes of zero load data to be considered a gap (that's filled with average data), the default is 30. To disable, set it to 1440.","title":"Load filtering"},{"location":"apps-yaml/#inverter-control-configurations","text":"inverter_limit - One per inverter. When set defines the maximum watts of AC output power for your inverter (e.g. 3600). This will help to emulate clipping when your solar produces more than the inverter can handle, but it won't be that accurate as the source of the data isn't minute by minute. If you have a separate Solar inverter as well then add the solar inverter limit to the battery inverter limit to give one total amount. For example, if you have a GivEnergy hybrid inverter you should set export_limit to 3600 or 5000 depending on which size inverter you have. If though you have a GivEnergy All-in-one (6kW AC limit) and a 5kW Solis solar inverter, you should set inverter_limit to 11000 (6000+5000). export_limit - One per inverter (optional). When set defines the maximum watts of AC power your inverter can export to the grid at (e.g. 2500). This will emulate the software export limit setting in the Inverter that you will have if your G98/G99 approval was lower than your maximum inverter power (check your install information for details). If you do not set an export limit then it's the same as the inverter limit. inverter_limit_charge and inverter_limit_discharge - One per inverter (optional). When set in watts, overrides the maximum charge/discharge rate settings used when controlling the inverter. This can be used if you need to cap your inverter battery rate (e.g. charge overnight at a slower rate to reduce inverter/battery heating) as Predbat will normally configure all timed charges or discharges to be at the inverter's maximum rate.","title":"Inverter control configurations"},{"location":"apps-yaml/#controlling-the-inverter","text":"There are two ways that Predbat can control GivTCP to control the inverter, either via REST API calls (preferred) or via the GivTCP inverter controls in Home Assistant.","title":"Controlling the Inverter"},{"location":"apps-yaml/#rest-interface-inverter-control","text":"givtcp_rest - One entry per Inverter, sets the GivTCP REST API URL ( http://homeassistant.local:6345 is the normal address and port for the first inverter, and the same address but ending :6346 if you have a second inverter - if you haven't a second inverter, delete the second line). When enabled the Home Assistant GivTCP Inverter Controls below are not used and instead communication from Predbat to GivTCP is directly via REST and thus bypasses some issues with MQTT. If using Docker then change homeassistant.local to the Docker IP address. To check your REST is working open up the readData API point in a Web browser e.g: http://homeassistant.local:6345/readData If you get a bunch of inverter information back then it's working! TIP: It's recommended you enable 'Output Raw Register Values' in GivTCP (via Settings / Add-on's / GivTCP / configuration tab) for added monitoring, and set the Self Run Loop Timer which controls how often GivTCP retrieves data from your inverters to a value between 20 and 60 seconds. Do not set Self Run to too low a value (i.e. retrieve too often) as this may overload the inverter: TIP: You can replace homeassistant.local with the IP address of your Home Assistant server if you have it set to a fixed IP address. This may improve reliability of the REST connection as it doesn't need to lookup the HA server IP address each time.","title":"REST Interface inverter control"},{"location":"apps-yaml/#home-assistant-givtcp-inverter-control","text":"Predbat can control GivEnergy inverters with GivTCP and REST mode, but if this is commented out then regular Home Assistant controls are used and can interact with many different inverters. The template apps.yaml for Giv Energy is pre-configured with regular expressions for the following configuration items that should auto-discover the GivTCP controls for two inverters (givtcp and givtcp2), but may need changing if you have non-standard GivTCP entity names. If you only have a single inverter then the givtcp2 lines can be commented out if so desired. The template apps.yaml is pre-configured with regular expressions for GivEnergy GivTCP controls, but will need to be changed for other inverters or if you have multiple inverters. The givtcp_rest line should be commented out/deleted on anything but GivTCP REST mode. charge_rate - Battery charge rate entity in watts discharge_rate - Battery discharge max rate entity in watts battery_power - Current battery power in watts pv_power - Current PV power in watts load_power - Current load power in watts soc_kw - Entity name of the battery SOC in kWh, should be the inverter one not an individual battery soc_max - Entity name for the maximum charge level for the battery reserve - sensor name for the reserve setting in % inverter_mode - Givenergy inverter mode control pause_mode - Givenergy pause mode register (if present) inverter_time - Inverter timestamp charge_start_time - Battery charge start time entity charge_end_time - Battery charge end time entity charge_limit - Entity name for used to set the SOC target for the battery in percentage (AC charge target) scheduled_charge_enable - Scheduled charge enable config scheduled_discharge_enable - Scheduled discharge enable config discharge_start_time - scheduled discharge slot_1 start time discharge_end_time - scheduled discharge slot_1 end time pause_start_time - scheduled pause start time (only if supported by your inverter) pause_end_time - scheduled pause start time (only if supported by your inverter) If you are using REST control the configuration items should still be kept as not all controls work with REST. See section below on creating the battery charge power curve .","title":"Home Assistant GivTCP inverter control"},{"location":"apps-yaml/#solcast-solar-forecast","text":"As described in the Predbat installation instructions , Predbat needs a solar forecast in order to predict solar generation and battery charging which can be provided by the Solcast integration. The template apps.yaml is pre-configured with regular expressions for the following configuration items that should auto-discover the Solcast entity names. They are unlikely to need changing although a few people have reported their entity names don't contain 'solcast' so worth checking, or edit if you have non-standard names: pv_forecast_today - Entity name for today's Solcast forecast pv_forecast_tomorrow - Entity name for tomorrow's Solcast's forecast pv_forecast_d3 - Entity name for Solcast's forecast for day 3 pv_forecast_d4 - Entity name for Solcast's forecast for day 4 (also d5, d6 & d7 are supported, but not that useful) If you do not have a PV array then comment out or delete these Solcast lines from apps.yaml . If you have multiple PV arrays connected to GivEnergy Hybrid inverters or you have GivEnergy AC-coupled inverters, then ensure your PV configuration in Solcast covers all arrays. If however you have a mixed PV array setup with some PV that does not feed into your GivEnergy inverters (e.g. hybrid GE inverters but a separate older FIT array that directly feeds AC into the house), then it's recommended that Solcast is only configured for the PV connected to the GivEnergy inverters. Solcast produces 3 forecasted PV estimates, the 'central' (50% or most likely to occur) PV forecast, the '10%' (worst case) PV forecast, and the '90%' (best case) PV forecast. By default Predbat will use the central estimate and applies to it the input_number.predbat_pv_metric10_weight weighting of the 10% (worst case) estimate. Predbat models cloud coverage by using the difference between the PV and PV10 forecasts to work out a cloud factor, this modulates the PV output predictions up and down accordingly as if there were passing clouds. This can have an impact on planning, especially for things like freeze charging which could assume the PV will cover the house load but it might not due to clouds. pv_estimate in apps.yaml can be used to configure Predbat to always use the 10% forecast by setting the configuration item to '10', or '90' to always use the 90% PV estimate (not recommended!). Set to blank or delete / comment out the line to use the default central estimate. If pv_estimate is set to 10 then input_number.predbat_pv_metric10_weight in Home Assistant should be set to 1.0.","title":"Solcast Solar Forecast"},{"location":"apps-yaml/#energy-rates","text":"There are a number of configuration items in apps.yaml for telling Predbat what your import and export rates are. These are described in detail in Energy Rates and are listed here just for completeness: metric_octopus_import - Import rates from the Octopus Energy integration metric_octopus_export - Export rates from the Octopus Energy integration metric_octopus_gas - Gas rates from the Octopus Energy integration octopus_intelligent_slot - Octopus Intelligent GO slot sensor from the Octopus Energy integration octopus_saving_session - Energy saving sessions sensor from the Octopus Energy integration octopus_saving_session_octopoints_per_penny - Sets the Octopoints per pence rates_import_octopus_url - Octopus pricing URL (over-rides metric_octopus_import) rates_export_octopus_url - Octopus export pricing URL (over-rides metric_octopus_export) metric_standing_charge - Standing charge in pounds rates_import - Import rates over a 24-hour period with start and end times rates_export - Export rates over a 24-hour period with start and end times rates_gas - Gas rates over a 24-hour period with start and end times rates_import_override - Over-ride import rate for specific date and time range, e.g. Octopus Power-up events rates_export_override - Over-ride export rate for specific date and time range futurerate_url - URL of future energy market prices for Agile users futurerate_adjust_import and futurerate_adjust_export - Whether tomorrow's predicted import or export prices should be adjusted based on market prices or not futurerate_peak_start and futurerate_peak_end - start/end times for peak-rate adjustment futurerate_peak_premium_import and futurerate_peak_premium_export - price premium to be added during the peak period carbon_intensity - Carbon intensity of the grid in half hour slots from an integration.","title":"Energy Rates"},{"location":"apps-yaml/#car-charging-integration","text":"Predbat is able to include electric vehicle charging in its plan and manage the battery activity so that the battery isn't discharged into your car when the car is charging (although you can over-ride this if you wish by setting the switch.predbat_car_charging_from_battery to True in Home Assistant). There are two different ways of planning car charging into cheap slots with Predbat, either by the Octopus Energy integration or by Predbat identifying the cheapest slots. These approaches and the set of settings that need to be configured together are described in Car Charging Planning . The full list of car charging configuration items in apps.yaml that are used to plan car charging activity within Predbat are described below. The Home Assistant controls (switches, input numbers, selectors, etc) related to car charging are described in Car Charging configuration within Home Assistant , with brief mention of pertinent controls included here alongside the apps.yaml configuration items where relevant for context. num_cars should be set in apps.yaml to the number of cars you want Predbat to plan for. Set to 0 if you don't have an EV (and the remaining car sensors in apps.yaml can safely be commented out or deleted as they won't be required).","title":"Car Charging Integration"},{"location":"apps-yaml/#car-charging-filtering","text":"You might want to remove your electric car charging data from the historical house load data so as to not bias the calculations, otherwise you will get high battery charge levels when the car was charged previously (e.g. last week). switch.predbat_car_charging_hold - A Home Assistant switch that when turned on (True) tells Predbat to remove car charging data from your historical house load so that Predbat's battery prediction plan is not distorted by previous car charging. car_charging_energy - Set in apps.yaml to point to a Home Assistant entity which is the incrementing kWh data for the car charger. This has been pre-defined to a regular expression that should auto-detect the appropriate Wallbox and Zappi car charger sensors, or edit as necessary in apps.yaml for your charger sensor. This can be set to a list of car charging energy sensors, one per line if you have multiple EV car chargers. TIP: You can also use car_charging_energy to remove other house load kWh from the data Predbat uses for the forecast, e.g. if you want to remove Mixergy hot water tank heating data from the forecast such as if you sometimes heat on gas, and sometimes electric depending upon import rates. input_number.predbat_car_charging_energy_scale - A Home Assistant entity used to define a scaling factor (in the range 0.1 to 1.0) to multiply the car_charging_energy data by if required (e.g. set to 0.001 to convert Watts to kW). If you do not have a suitable car charging energy kWh sensor in Home Assistant then comment the car_charging_energy line out of apps.yaml and configure the following Home Assistant entity: input_number.predbat_car_charging_threshold - Sets the threshold above which home consumption is assumed to be car charging and will be removed from the home load data (default 6 = 6kW).","title":"Car Charging Filtering"},{"location":"apps-yaml/#planned-car-charging","text":"These features allow Predbat to know when you plan to charge your car. If you have Intelligent Octopus setup then planning of charging is done via the Octopus app and Predbat obtains this information through the Octopus Energy integration in Home Assistant. switch.predbat_octopus_intelligent_charging - When this Home Assistant switch is enabled, Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information The following apps.yaml configuration items are pre-defined with regular expressions to point to appropriate sensors in the Octopus Energy integration. You should not normally need to change these if you have Octopus Intelligent: octopus_intelligent_slot - Points to the Octopus Energy integration 'intelligent dispatching' sensor that indicates whether you are within an Octopus Energy \"smart charge\" slot, and provides the list of future planned charging activity. octopus_ready_time - Points to the Octopus Energy integration sensor that details when the car charging will be completed by. octopus_charge_limit - Points to the Octopus Energy integration sensor that provides the car charging limit. If you don't use Intelligent Octopus then the above 3 Octopus Intelligent configuration lines in apps.yaml can be commented out or deleted, and there are a number of other apps.yaml configuration items that should be set: car_charging_planned - Optional, can be set to a Home Assistant sensor (e.g. from your car charger integration) which lets Predbat know the car is plugged in and planned to charge during low rate slots. Or manually set it to 'False' to disable this feature, or 'True' to always enable. The apps.yaml template supplied with Predbat comes pre-configured with a regular expression that should automatically match Zappi or Wallbox car chargers. If you have a different type of charger you will need to configure it manually. car_charging_planned_response - An array of values for the above car_charging_planned sensor which indicate that the car is plugged in and will charge in the next low rate slot. The template apps.yaml comes with a set of pre-defined sensor values that should match most EV chargers. Customise for your car charger sensor if it sets sensor values that are not in the list. car_charging_now - For some cases finding details of planned car charging is difficult to obtain (e.g. Ohme with Intelligent doesn't report slots). The car_charging_now configuration item can be set to point to a Home Assistant sensor that tells you that the car is currently charging. Predbat will then assume this 30 minute slot is used for charging regardless of the plan. If Octopus Intelligent Charging is enabled and car_charging_now indicates the car is charging then Predbat will also assume that this is a low rate slot for the car/house (and might therefore start charging the battery), otherwise electricity import rates are taken from the normal rate data. car_charging_now_response - Set to the range of positive responses for car_charging_now to indicate that the car is charging. Useful if you have a sensor for your car charger that isn't binary. To make planned car charging more accurate, configure the following items in apps.yaml : car_charging_battery_size - Set this value in apps.yaml to the car's battery size in kWh. If not set, Predbat defaults to 100kWh. It will be used to predict when to stop car charging. car_charging_limit - You should configure this to point to a sensor that specifies the % limit the car is set to charge to. This could be a sensor on the EV charger integration or a Home Assistant helper entity you can set as you wish. If you don't specify a sensor Predbat will default to 100% - i.e. fill the car to full. car_charging_soc - You should configure this to point to a sensor (on the HA integration for your EV charger) that specifies the car's current charge level expressed as a percentage - it must NOT be set to a sensor that gives the car's current kWh value as this will cause Predbat to charge the car to an incorrect level. If you don't specify a sensor, Predbat will default to 0%.","title":"Planned Car Charging"},{"location":"apps-yaml/#multiple-electric-cars","text":"Multiple cars can be planned with Predbat, in which case you should set num_cars in apps.yaml to the number of cars you want to plan car_charging_limit , car_charging_planned , car_charging_battery_size and car_charging_soc must then be a list of values (i.e. 2 entries for 2 cars) If you have Intelligent Octopus then Car 0 will be managed by the Octopus Energy integration, if its enabled Each car will have it's own Home Assistant slot sensor created e.g. binary_sensor.predbat_car_charging_slot_1 , SoC planning sensor e.g predbat.car_soc_1 and predbat.car_soc_best_1 for car 1","title":"Multiple Electric Cars"},{"location":"apps-yaml/#load-forecast","text":"In addition to the historical house load data that Predbat uses by default, you can optionally provide a forecast of future load such as is produced by Predheat for Hot water and Heat Pump heating systems or via Predai load_forecast - this should be configured to point to a sensor and attribute. The attribute must in either The format of 'last_updated' timestamp and 'energy' in incrementing kWh. The format of a dictionary of timestamps and energy data in incremental KWh. For example: Or apps.yaml should be configured to point to the forecast sensor and attribute (in the above formats) like this: load_forecast: - sensor_name$attribute_name So if using Predheat it would be configured as: load_forecast: - predheat.heat_energy$external Set load_forecast_only to True if you do not wish to use the Predbat forecast but instead want to use this as your only forecast data e.g using PredAi: load_forecast_only: True load_forecast: - sensor.givtcp_{geserial}_load_energy_today_kwh_prediction$results","title":"Load Forecast"},{"location":"apps-yaml/#balance-inverters","text":"When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. Most of the Predbat configuration for balancing inverters is through a number of Home Assistant controls for Balancing Inverters , but there is one configuration item in apps.yaml : balance_inverters_seconds: seconds Defines how often to run the inverter balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds.","title":"Balance Inverters"},{"location":"apps-yaml/#workarounds","text":"There are a number of different configuration items in apps.yaml that can be used to tweak the way Predbat operates and workaround weirdness you may have from your inverter and battery setup.","title":"Workarounds"},{"location":"apps-yaml/#clock-skew","text":"clock_skew: minutes Skews the local (computer) time that Predbat uses (from AppDaemon). Set to 1 means add a minute to the AppDaemon time, set to -1 means take a minute off the AppDaemon time. This clock adjustment will be used by Predbat when real-time actions happen e.g. triggering a charge or discharge. If your inverter's time is different to the time on the computer running Home Assistant, you may need to skew the time settings made on the inverter when you trigger charging or discharging. Again 1 means the inverter is 1 minute fast and -1 means the inverter is 1 minute slow. Separate start and end options are applied to the start and end time windows, mostly as you want to start battery activity late (not early) and finish early (not late). You can adjust the charge and discharge times written to the inverter by setting the following in apps.yaml : inverter_clock_skew_start: minutes inverter_clock_skew_end: minutes Skews the setting of the charge slot registers vs the predicted start time inverter_clock_skew_discharge_start: minutes inverter_clock_skew_discharge_end: minutes Skews the setting of the discharge slot registers vs the predicted start time","title":"Clock skew"},{"location":"apps-yaml/#battery-size-scaling","text":"battery_scaling: - scale Default value 1.0. Multiple battery size scales can be entered, one per inverter on separate lines. This setting is used to scale the battery reported SoC kWh to make it appear bigger or larger than it is. As the GivEnergy inverters treat all batteries attached to an inverter as in effect one giant battery, if you have multiple batteries on an inverter that need scaling you should enter a composite scaling value for all batteries attached to the inverter. TIP: If you have a GivEnergy 2.6 or 5.2kWh battery then it will have an 80% depth of discharge but it will falsely report its capacity as being the 100% size, so set battery_scaling to 0.8 to report the correct usable capacity figure to Predbat. TIP: Likewise if you have a GivEnergy All in One, it will incorrectly report the 13.5kWh usable capacity as 15.9kWh, so set battery_scaling to 0.85 to correct this. If you are going chart your battery SoC in Home Assistant then you may want to use predbat.soc_kw_h0 as your current SoC rather than the usual givtcp_ _soc GivTCP entity so everything lines up.","title":"Battery size scaling"},{"location":"apps-yaml/#import-export-scaling","text":"import_export_scaling: scale Default value 1.0. Used to scale the import & export kWh data from GivTCP if the inverter information is incorrect.","title":"Import export scaling"},{"location":"apps-yaml/#inverter-rate-minimum","text":"inverter_battery_rate_min: watts One per inverter (optional), set in Watts, when set models a \"bug\" in the inverter firmware in some models where if charge or discharge rates are set to 0 you actually get a small amount of charge or discharge. Recommended setting is 200 for Gen 1 hybrids with this issue.","title":"Inverter rate minimum"},{"location":"apps-yaml/#inverter-reserve-maximum","text":"inverter_reserve_max: percent Global, sets the maximum reserve % that may be set to the inverter, the default is 98, as some Gen 2 & Gen 3 inverters and AIO firmware versions refuse to be set to 100. Comment the line out or set to 100 if your inverter allows setting to 100%.","title":"Inverter reserve maximum"},{"location":"apps-yaml/#automatic-restarts","text":"If the add-on that is providing the inverter control stops functioning it can prevent Predbat from functioning correctly. In this case you can tell Predbat how to restart the add-on using a service. Right now only communication loss with GE inverters is detectable but in future other systems will be supported. When enabled if communication is lost then the service configured will be triggered and can cause a restart which may restart the connection. This maybe useful with GivTCP if you have time sync errors or lost of REST service every now and again. The auto_restart itself is a list of commands to run to trigger a restart. The shell command will call a 'sh' shell and can be used to delete files and suchlike. The service command is used to call a service, and can contain arguments of addon and/or entity_id auto_restart: - shell: 'rm -rf /homeassistant/GivTCP/*.pkl' - service: hassio/addon_restart addon: a6a2857d_givtcp","title":"Automatic restarts"},{"location":"apps-yaml/#battery-chargedischarge-curves","text":"battery_charge_power_curve - Some batteries tail off their charge rate at high SoC% and this optional configuration item enables you to model this in Predbat. Enter the charging curve as a series of steps of % of max charge rate for each SoC percentage. The default is 1.0 (full power) charge all the way to 100%. Modelling the charge curve becomes important if you have limited charging slots (e.g. only a few hours a night) or you wish to make accurate use of the low power charging mode ( switch.predbat_set_charge_low_power ). Predbat can now automatically calculate the charging curve for you if you have enough suitable historical data in Home Assistant. The charging curve will be calculated when the battery_charge_power_curve option is not set in apps.yaml and Predbat performs an initial run (e.g. due to restarting AppDaemon or an edit being made to apps.yaml). You should look at the AppDaemon/Predbat logfile to find the predicted battery charging curve and copy/paste it into your apps.yaml file. The logfile will also include a recommendation for how to set your battery_rate_max_scaling setting in HA. The YouTube video charging curve and low power charging explains how the curve works and shows how Predbat automatically creates it. Setting this option to auto will cause the computed curve to be stored and used automatically. This is not recommended if you use low power charging mode as your history will eventually not contain any full power charging data to compute the curve, so in this case it's best to manually save the data. NB: In order for Predbat to have calculate your charging curve it needs to have access to historical Home Assistant data for battery_charge_rate, battery_power and soc_kw. If you are using the recommended default REST mode to control your inverter then you will need to uncomment out the following entries in apps.yaml : charge_rate: - number.givtcp_{geserial}_battery_charge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh Once the battery charge curve has been created these entries can be commented out again in apps.yaml . Example charging curve from a GivEnergy 9.5kWh battery with latest firmware and Gen 1 inverter: battery_charge_power_curve: 91 : 0.91 92 : 0.81 93 : 0.71 94 : 0.62 95 : 0.52 96 : 0.43 97 : 0.33 98 : 0.24 99 : 0.24 100 : 0.24 battery_discharge_power_curve - Some batteries tail off their discharge rate at low SoC% and this optional configuration item enables you to model this in Predbat. Enter the discharging curve as a series of steps of % of max discharge rate for each SoC percentage. The default is 1.0 (full power) discharge all the way to 0%. When the battery_discharge_power_curve option is not set in apps.yaml and Predbat performs an initial run (e.g. due to restarting AppDaemon or an edit being made to apps.yaml), Predbat will generate the curve for you from historical battery discharging information. You should look at the AppDaemon/Predbat logfile to find the predicted battery discharging curve and copy/paste it into your apps.yaml file. Setting This option to auto will cause the computed curve to be stored and used automatically. This may not work very well if you don't do regular discharges to empty the battery. In the same way as for the battery charge curve above, Predbat needs to have access to historical Home Assistant data for battery_discharge_rate, battery_power and soc_kw. If you are using REST mode to control your inverter then the following entries in apps.yaml will need to be uncommented : discharge_rate: - number.givtcp_{geserial}_battery_discharge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh","title":"Battery charge/discharge curves"},{"location":"apps-yaml/#triggers","text":"export_triggers - The export trigger feature is useful to help trigger your own automations based on Predbat predicting in the plan that you will have spare solar energy that would be exported - this could happen if the battery is full or there is more predicted solar generation than can be charged into the battery. You can use the trigger in an automation, for example you could turn on an immersion heater or the washing machine to consume the excess solar power. The triggers count export energy until the next active charge slot only. For each trigger give a name, the minutes of export needed, and the energy required in that time. Multiple triggers can be enabled by Predbat at once so in total you could use too much energy if multiple triggered automations all run. Each trigger specified in apps.yaml will create a Home Assistant entity called 'binary_sensor.predbat_export_trigger_ name ' which will be turned on when the predicted trigger conditions are valid. Connect this binary sensor to your automation to start whatever you want to trigger. Set the name for each trigger, the number of minutes of solar export you need, and the amount of energy in kWh you will need available during that time period in apps.yaml: For example: export_triggers: - name: \"large\" minutes: 60 energy: 1.0 - name: \"small\" minutes: 15 energy: 0.25 Note: Predbat will set an export trigger to True if in the plan it predicts that there will be more than the specified amount of excess solar energy over the specified time period. In the example above, the 'large' trigger will be set to True for the 1 hour period where Predbat predicts that there will be a total of 1kWh of excess solar generation over that time period . For clarity the trigger is not set based on actual excess solar generation or export. It should also be recognised that this prediction could be wrong; there could be less solar generation or more house load than was predicted in the plan. If you wish to trigger activities based on Predbat charging or discharging the battery rather than spare solar energy you can instead use the following binary sensors in Home Assistant: binary_sensor.predbat_charging - Will be True when the home battery is inside a charge slot (either being charged or being held at a level). Note that this does include charge freeze slots where the discharge rate is set to zero without charging the battery. binary_sensor.predbat_discharging - Will be True when the home battery is inside a force discharge slot. This does not include discharge freeze slots where the charge rate is set to zero to export excess solar only.","title":"Triggers"},{"location":"apps-yaml/#understanding-how-days_previous-works","text":"As described earlier, days_previous is a list of the previous days of historical house load that are averaged together to predict your future daily load. e.g., if you want the average of the same day for the last 2 weeks: days_previous: - 7 - 14 This section describes in more detail how days_previous is used by Predbat in creating the future battery plan, and gives some worked examples and a 'gotcha' to be aware of. When Predbat forecasts future home demand it counts backwards the days_previous number of days to find the appropriate historical home consumption. This is best explained through a worked example: In this example, days_previous is set to use history from 2 days ago: days_previous: - 2 If right now today it's Monday 3:15pm and Predbat is predicting the forward plan for the next 48 hours: For tomorrow (Tuesday) 9am slot, Predbat will look backwards 2 days from Tuesday so will use the historical home consumption from Sunday 9am as being the predicted load for Tuesday 9am. For the day after (Wednesday) 9am slot, Predbat again looks backwards 2 days from that day, so will use historical home consumption from Monday 9am as being the Wednesday 9am prediction. This pattern of counting backwards days_previous days to find the appropriate time slot to load historical home consumption from requires Predbat to operate some additional special processing if days_previous is set to a low value or forecast_hours to a high value. Extending the previous example but this time days_previous is set to use history from just the previous day: days_previous: - 1 Today its still Monday 3:15pm and Predbat is predicting the forward plan for the next 48 hours: For tomorrow (Tuesday) 9am slot, Predbat will look backwards 1 day from Tuesday so will use the historical home consumption from today (Monday) 9am as being the predicted load for Tuesday 9am. For the day after (Wednesday) 9am slot, Predbat again looks backwards 1 days from that day, so looks for historical home consumption from Tuesday 9am as being the Wednesday 9am prediction, but of course it's still Monday and Tuesday hasn't happened yet so we can't know what that historial consumption was! What Predbat does in this circumstance is to subtract a further day from days_previous and for Wednesday 9am's prediction it will therefore use the historical load from Monday 9am. This issue of finding future historical load only occurs when days_previous is set to 1 and Predbat is forecasting more than 24 hours ahead from 'now'. So to highlight this with some edge cases, today is still Monday 3:15pm, days_previous is still set to '1' and in the forward plan: For tomorrow (Tuesday) 2:30pm slot, Predbat looks backwards 1 day from Tuesday and takes the historical home consumption from today (Monday) 2:30pm slot. For tomorrow (Tuesday) 3:00pm slot, Predbat looks backwards 1 day and takes the historical load from today (Monday) 3:00pm slot - which we are only part way through so only 15 minutes of load will be predicted for tomorrow 3pm. For tomorrow (Tuesday) 3:30pm slot, Predbat looks backwards 1 day but the 3:30pm slot today hasn't yet occurred so Predbat will take the historical load from the prior day and has to use Sunday's 3:30pm load for tomorrow's prediction. Ditto the predicted load for tomorrow (Tuesday) 4:00pm slot comes from Sunday 4pm. Of course as today rolls forward and Predbat keeps on updating the forward plan every 5 minutes the prediction will be updated with the correct previous_day history as and when it exists. Its recommended therefore that days_previous isn't set to 1, or if it is, that you understand the way this has to work and the consequences. If you want to set days_previous to take an average of the house load over all the days of the last week its suggested that it be set as: days_previous: - 2 - 3 - 4 - 5 - 6 - 7 - 8","title":"Understanding how days_previous works"},{"location":"car-charge-planning/","text":"Car charging planning You will firstly need to configure the Car charging settings in apps.yaml and have installed the appropriate Home Assistant integration for your car charger. As a bare minimum a HA-controllable smart plug with a granny charger could be used, but do consider there could be an electrical spike to the car if the smart plug is turned off when the car is charging. A proper car charger and HA integration is preferable. There are two ways that Predbat can plan the slots for charging your car: If you have Intelligent Octopus import tariff, have completed enrollment of your car/charger to Intelligent Octopus (requires a compatible charger or car), and you have installed the Octopus Energy integration - in which case Predbat will use the car charging slots allocated by Octopus Energy in battery prediction. The Octopus Energy integration supports Octopus Intelligent , and through that Predbat gets most of the information it needs. octopus_intelligent_slot in apps.yaml is pre-configured with a regular expression to point to the Intelligent Slot sensor in the Octopus Energy integration. You should not need to change this, but its worth checking the Predbat logfile to confirm that it has found your Octopus account details Set switch.predbat_octopus_intelligent_charging to True Information about the car's battery size will be automatically extracted from the Octopus Energy integration You should set the cars current soc sensor, car_charging_soc in apps.yaml to point to a Home Assistant sensor that specifies the car's current % charge level to have accurate results. This should normally be a sensor provided by your car charger. If you don't have this available for your charger then Predbat will assume the car's current charge level is 0%. If you set car_charging_limit in apps.yaml then Predbat can also know if the car's limit is set lower than in Intelligent Octopus. If you don't set this Predbat will default to 100%. You can use car_charging_now as a workaround to indicate your car is charging but the Intelligent API hasn't reported it. Let the Octopus app control when your car charges. Predbat-led charging - Here Predbat plans and can initiate the car charging based on the upcoming low rate slots Ensure car_charging_limit , car_charging_soc and car_charging_planned are set correctly in apps.yaml . Set select.predbat_car_charging_plan_time in Home Assistant to the time you want the car to be ready by. Enable switch.predbat_car_charging_plan_smart if you want to use the cheapest slots only. You can set car_charging_plan_max_price if you want to set a maximum price per kWh to charge your car (e.g. 10p) If you leave this disabled then all low rate slots will be used. This may mean you need to use expert mode and change your low rate threshold to configure which slots should be considered if you have a tariff with more than 2 import rates (e.g. flux) Predbat will set binary_sensor.predbat_car_charging_slot when it determines the car can be charged; you will need to write a Home Assistant automation based on this sensor to control when your car charges. A sample automation to start/stop car charging using a Zappi car charger and the MyEnergi Zappi integration is as follows, this should be adapted for your own charger type and how it controls starting/stopping car charging: yaml alias: Car charging description: \"Start/stop car charging based on Predbat determined slots\" trigger: - platform: state entity_id: - binary_sensor.predbat_car_charging_slot action: - choose: - conditions: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"on\" sequence: <commands to turn on your car charger, e.g.> - service: select.select_option data: option: Eco+ target: entity_id: select.myenergi_zappi_charge_mode - conditions: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"off\" sequence: <commands to turn off your car charger, e.g.> - service: select.select_option data: option: Stopped target: entity_id: select.myenergi_zappi_charge_mode mode: single WARNING: Do not set car_charging_now or you will create a circular dependency. NOTE: Multiple cars can be planned with Predbat. If you have one charger and multiple cars configured in Predbat then set car_charging_exclusive in apps.yaml to True to indicate that only one car may charge at once (the first car reporting as plugged in will be considered as charging). If you set this to False then it is assumed each car can charge independently and hence two or more could charge at once car_charging_exclusive: - True - True See Car charging filtering and Planned car charging in the apps.yaml settings section of the documentation. Example EV and charger setup and Predbat automation to use the cheapest charging slots with no/limited Home Assistant Integration MG4 EV Vehicle with a Hypervolt Car Charger. There is no 3rd party integration with the MG, and the Hypervolt car charger doesn't understand when an EV is plugged in. Yet it can be stopped and started with a 3rd party integration. In Home Assistant, create two helper entities (Settings / Devices & Services / Helpers) of type 'Number': EV Max Charge - input_number.car_max_charge EV Current SOC in kWh - input_number.predbat_car_charging_manual_soc_kwh Create a 'Dropdown' helper entity that has two options 'true' and 'false' (in lower case): Car Charger Plugged in - input_select.car_charger_plugged_in Within the apps.yaml configuration file specify the following configuration settings: Find the line for car_charger_battery_size and enter the Car Battery Size in kWh: Example car_charging_battery_size: - 61.7 Specify the Car Charging Limit to use the EV Max Charge helper entity created earlier: car_charging_limit: - 're:(input_number.car_max_charge)' Find car_charging_planned and add the input_select.car_charger_plugged_in dropdown helper entity to the end of the line: car_charging_planned: - 're:(sensor.wallbox_portal_status_description|sensor.myenergi_zappi_[0-9a-z]+_plug_status|input_select.car_charger_plugged_in)' Find car_charging_planned_response and add 'true' to the list: car_charging_planned_response: - 'yes' - 'on' - 'true' If possible, add an entity keeping track of the kWh used for car charging to car_charging_energy . If your charging device doesn't keep track of kWh but you can measure the power sent to the car charger (e.g. from the EV charger integration or an energy monitor/smart plug for the EV charger) then you can create another helper entity to convert kW power into kWh: Create a helper entity (Settings / Devices & Services / Helpers) of type 'Integration - Riemann Sum integral': Name : car_energy_used Input sensor : sensor that measures power consumed by the car charger Integration method : Right Riemann sum Metric prefix : k (kilo) Please look into Integration - Riemann sum integral to convert kW into kWh. Example car_charging_energy: 're:(sensor.myenergi_zappi_[0-9a-z]+_charge_added_session|sensor.wallbox_portal_added_energy|sensor.car_energy_used)' car_charging_now must be commented out (hashed out) in apps.yaml : #car_charging_now: # - off Save the apps.yaml file and exit. In Home Assistant, turn on the following Predbat control switches: switch.predbat_car_charging_hold switch.predbat_car_charging_manual_soc switch.predbat_car_charging_plan_smart And turn off the Predbat control switch: switch.predbat_octopus_intelligent_charging HA Charging Slot Automation In Home Assistant (Settings / Automation & Scenes), create an automation to monitor the Predbat car charging slot sensor and turn the charger on and off according to the Predbat plan: alias: Car Charging Slot description: \"\" trigger: - platform: state entity_id: - binary_sensor.predbat_car_charging_slot action: - if: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"off\" then: - type: turn_off device_id: ac8b06952c7fe838314e entity_id: f6de2df0758744aba60f6b5f domain: switch - if: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"on\" then: - type: turn_on device_id: ac8b06952c7fe838314e entity_id: f6de2df0758744aba60f6b5f domain: switch mode: single Finally, for simplicity, add the below entities to your HA Dashboard: EV Max Charge - input_number.car_max_charge EV Current SOC in kWh - input_number.predbat_car_charging_manual_soc_kwh Car Charger Plugged in - input_select.car_charger_plugged_in Annoyingly, you have to calculate the kWh your vehicle has in total by taking the Percentage left in the car / 100 * Total EV Battery capacity. For example: 65/100*61.7=40.1 Enter '40.1' into 'EV Current SOC in kWh' and '80%' into 'EV Max charge'. Once the charger is switched to true and your EV Max charge (target SOC) % is higher than the kWh currently in the car, Predbat will plan and charge the EV with the kW that are needed to reach the EV target SOC.","title":"Car charging planning"},{"location":"car-charge-planning/#car-charging-planning","text":"You will firstly need to configure the Car charging settings in apps.yaml and have installed the appropriate Home Assistant integration for your car charger. As a bare minimum a HA-controllable smart plug with a granny charger could be used, but do consider there could be an electrical spike to the car if the smart plug is turned off when the car is charging. A proper car charger and HA integration is preferable. There are two ways that Predbat can plan the slots for charging your car: If you have Intelligent Octopus import tariff, have completed enrollment of your car/charger to Intelligent Octopus (requires a compatible charger or car), and you have installed the Octopus Energy integration - in which case Predbat will use the car charging slots allocated by Octopus Energy in battery prediction. The Octopus Energy integration supports Octopus Intelligent , and through that Predbat gets most of the information it needs. octopus_intelligent_slot in apps.yaml is pre-configured with a regular expression to point to the Intelligent Slot sensor in the Octopus Energy integration. You should not need to change this, but its worth checking the Predbat logfile to confirm that it has found your Octopus account details Set switch.predbat_octopus_intelligent_charging to True Information about the car's battery size will be automatically extracted from the Octopus Energy integration You should set the cars current soc sensor, car_charging_soc in apps.yaml to point to a Home Assistant sensor that specifies the car's current % charge level to have accurate results. This should normally be a sensor provided by your car charger. If you don't have this available for your charger then Predbat will assume the car's current charge level is 0%. If you set car_charging_limit in apps.yaml then Predbat can also know if the car's limit is set lower than in Intelligent Octopus. If you don't set this Predbat will default to 100%. You can use car_charging_now as a workaround to indicate your car is charging but the Intelligent API hasn't reported it. Let the Octopus app control when your car charges. Predbat-led charging - Here Predbat plans and can initiate the car charging based on the upcoming low rate slots Ensure car_charging_limit , car_charging_soc and car_charging_planned are set correctly in apps.yaml . Set select.predbat_car_charging_plan_time in Home Assistant to the time you want the car to be ready by. Enable switch.predbat_car_charging_plan_smart if you want to use the cheapest slots only. You can set car_charging_plan_max_price if you want to set a maximum price per kWh to charge your car (e.g. 10p) If you leave this disabled then all low rate slots will be used. This may mean you need to use expert mode and change your low rate threshold to configure which slots should be considered if you have a tariff with more than 2 import rates (e.g. flux) Predbat will set binary_sensor.predbat_car_charging_slot when it determines the car can be charged; you will need to write a Home Assistant automation based on this sensor to control when your car charges. A sample automation to start/stop car charging using a Zappi car charger and the MyEnergi Zappi integration is as follows, this should be adapted for your own charger type and how it controls starting/stopping car charging: yaml alias: Car charging description: \"Start/stop car charging based on Predbat determined slots\" trigger: - platform: state entity_id: - binary_sensor.predbat_car_charging_slot action: - choose: - conditions: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"on\" sequence: <commands to turn on your car charger, e.g.> - service: select.select_option data: option: Eco+ target: entity_id: select.myenergi_zappi_charge_mode - conditions: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"off\" sequence: <commands to turn off your car charger, e.g.> - service: select.select_option data: option: Stopped target: entity_id: select.myenergi_zappi_charge_mode mode: single WARNING: Do not set car_charging_now or you will create a circular dependency. NOTE: Multiple cars can be planned with Predbat. If you have one charger and multiple cars configured in Predbat then set car_charging_exclusive in apps.yaml to True to indicate that only one car may charge at once (the first car reporting as plugged in will be considered as charging). If you set this to False then it is assumed each car can charge independently and hence two or more could charge at once car_charging_exclusive: - True - True See Car charging filtering and Planned car charging in the apps.yaml settings section of the documentation. Example EV and charger setup and Predbat automation to use the cheapest charging slots with no/limited Home Assistant Integration MG4 EV Vehicle with a Hypervolt Car Charger. There is no 3rd party integration with the MG, and the Hypervolt car charger doesn't understand when an EV is plugged in. Yet it can be stopped and started with a 3rd party integration. In Home Assistant, create two helper entities (Settings / Devices & Services / Helpers) of type 'Number': EV Max Charge - input_number.car_max_charge EV Current SOC in kWh - input_number.predbat_car_charging_manual_soc_kwh Create a 'Dropdown' helper entity that has two options 'true' and 'false' (in lower case): Car Charger Plugged in - input_select.car_charger_plugged_in Within the apps.yaml configuration file specify the following configuration settings: Find the line for car_charger_battery_size and enter the Car Battery Size in kWh: Example car_charging_battery_size: - 61.7 Specify the Car Charging Limit to use the EV Max Charge helper entity created earlier: car_charging_limit: - 're:(input_number.car_max_charge)' Find car_charging_planned and add the input_select.car_charger_plugged_in dropdown helper entity to the end of the line: car_charging_planned: - 're:(sensor.wallbox_portal_status_description|sensor.myenergi_zappi_[0-9a-z]+_plug_status|input_select.car_charger_plugged_in)' Find car_charging_planned_response and add 'true' to the list: car_charging_planned_response: - 'yes' - 'on' - 'true' If possible, add an entity keeping track of the kWh used for car charging to car_charging_energy . If your charging device doesn't keep track of kWh but you can measure the power sent to the car charger (e.g. from the EV charger integration or an energy monitor/smart plug for the EV charger) then you can create another helper entity to convert kW power into kWh: Create a helper entity (Settings / Devices & Services / Helpers) of type 'Integration - Riemann Sum integral': Name : car_energy_used Input sensor : sensor that measures power consumed by the car charger Integration method : Right Riemann sum Metric prefix : k (kilo) Please look into Integration - Riemann sum integral to convert kW into kWh. Example car_charging_energy: 're:(sensor.myenergi_zappi_[0-9a-z]+_charge_added_session|sensor.wallbox_portal_added_energy|sensor.car_energy_used)' car_charging_now must be commented out (hashed out) in apps.yaml : #car_charging_now: # - off Save the apps.yaml file and exit. In Home Assistant, turn on the following Predbat control switches: switch.predbat_car_charging_hold switch.predbat_car_charging_manual_soc switch.predbat_car_charging_plan_smart And turn off the Predbat control switch: switch.predbat_octopus_intelligent_charging HA Charging Slot Automation In Home Assistant (Settings / Automation & Scenes), create an automation to monitor the Predbat car charging slot sensor and turn the charger on and off according to the Predbat plan: alias: Car Charging Slot description: \"\" trigger: - platform: state entity_id: - binary_sensor.predbat_car_charging_slot action: - if: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"off\" then: - type: turn_off device_id: ac8b06952c7fe838314e entity_id: f6de2df0758744aba60f6b5f domain: switch - if: - condition: state entity_id: binary_sensor.predbat_car_charging_slot state: \"on\" then: - type: turn_on device_id: ac8b06952c7fe838314e entity_id: f6de2df0758744aba60f6b5f domain: switch mode: single Finally, for simplicity, add the below entities to your HA Dashboard: EV Max Charge - input_number.car_max_charge EV Current SOC in kWh - input_number.predbat_car_charging_manual_soc_kwh Car Charger Plugged in - input_select.car_charger_plugged_in Annoyingly, you have to calculate the kWh your vehicle has in total by taking the Percentage left in the car / 100 * Total EV Battery capacity. For example: 65/100*61.7=40.1 Enter '40.1' into 'EV Current SOC in kWh' and '80%' into 'EV Max charge'. Once the charger is switched to true and your EV Max charge (target SOC) % is higher than the kWh currently in the car, Predbat will plan and charge the EV with the kW that are needed to reach the EV target SOC.","title":"Car charging planning"},{"location":"configuration-guide/","text":"Configuration guide First get the basics set up, ensure you have the inverter controls configured , you have configured apps.yaml to your setup, and the solar forecast is in place. Make sure your energy rates are configured correctly for import and export. If you have an EV try to set up the car charging sensor correctly so Predbat can tell what part of your historical load is EV charging. You might want to also set to the car charging plan so you can predict when your car is plugged in and how much it will charge. It is recommended that you create a dashboard page with all the required entities to control Predbat. This page gives a summary of some of the key configuration settings you should consider in Predbat for different energy tariffs; the Predbat customisation guide details all the Predbat customisation options. You should try to tune input_number.predbat_inverter_loss , input_number.predbat_battery_loss and input_number.predbat_battery_loss_discharge to the correct % loss for your system in order to get more accurate predictions. Around 4% for each is good for a hybrid inverter. For a Hybrid inverter the inverter loss includes the loss on inverting PV as well going AC to DC when importing. Battery loss charge and discharge are factors to account for the loss in charging and discharging the battery as DC. For a AC coupled inverter the inverter loss is just the loss of the battery inverter, if you need to model the loss of your PV inverter then use input_number.predbat_pv_scaling or adjust your Solcast output. Battery loss charge and discharge are factors to account for the loss in charging and discharging the battery as DC. Also set switch.predbat_inverter_hybrid to True or False depending upon if you have a Hybrid or AC-Coupled battery. The setting input_number.predbat_metric_battery_cycle ( expert mode ) can be used to put a 'virtual cost' in pence per kWh on using your battery for charging and discharging. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. The default is 0.5p (meaning charging and discharging the battery would effectively cost an extra 1p per kWh) but can be set to 0 if you want to turn this feature off. Below is a guide to some of the electricity tariff options and a set of recommended Predbat settings for each tariff type. In theory most tariffs will work out of the box but still it's worth reviewing your settings. Fixed daily rates With a fixed daily rate tariff you will just be predicting the battery levels, no charging or discharging is required although it won't hurt if you leave these options enabled. You should set select.predbat_mode to 'Monitor'. Cheap night rate with bad export rate (e.g. Octopus Go, Economy 7 etc) In this scenario you will want to charge overnight based on the next day's solar forecast and don't want Predbat to force discharge your battery. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge You want Predbat to calculate and control charging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy If you are using expert mode then these options maybe worth reviewing: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit You should set select.predbat_mode to 'Control charge' Cheap night rate, with a good export rate (e.g. Intelligent Octopus with Octopus Outgoing) Follow the instructions from the Cheap Night rate above, but also you will also want to have automatic discharge occurring when the export rates are profitable. Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Can be set non-zero if you want to force a minimum charge level You should set select.predbat_mode to 'Control charge & discharge' Multiple rates for import and export (e.g. Octopus Flux & Cozy) Follow the instructions from Cheap Night rate above, but also you will want to have automatic discharge when the export rates are profitable. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to 'Control charge & discharge' Half hourly variable rates (e.g. Octopus Agile) Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24-48 If you set this to 24 then you will have quicker updates, going to 36/48 for a longer plan input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to 'Control charge & discharge'","title":"Configuration guide"},{"location":"configuration-guide/#configuration-guide","text":"First get the basics set up, ensure you have the inverter controls configured , you have configured apps.yaml to your setup, and the solar forecast is in place. Make sure your energy rates are configured correctly for import and export. If you have an EV try to set up the car charging sensor correctly so Predbat can tell what part of your historical load is EV charging. You might want to also set to the car charging plan so you can predict when your car is plugged in and how much it will charge. It is recommended that you create a dashboard page with all the required entities to control Predbat. This page gives a summary of some of the key configuration settings you should consider in Predbat for different energy tariffs; the Predbat customisation guide details all the Predbat customisation options. You should try to tune input_number.predbat_inverter_loss , input_number.predbat_battery_loss and input_number.predbat_battery_loss_discharge to the correct % loss for your system in order to get more accurate predictions. Around 4% for each is good for a hybrid inverter. For a Hybrid inverter the inverter loss includes the loss on inverting PV as well going AC to DC when importing. Battery loss charge and discharge are factors to account for the loss in charging and discharging the battery as DC. For a AC coupled inverter the inverter loss is just the loss of the battery inverter, if you need to model the loss of your PV inverter then use input_number.predbat_pv_scaling or adjust your Solcast output. Battery loss charge and discharge are factors to account for the loss in charging and discharging the battery as DC. Also set switch.predbat_inverter_hybrid to True or False depending upon if you have a Hybrid or AC-Coupled battery. The setting input_number.predbat_metric_battery_cycle ( expert mode ) can be used to put a 'virtual cost' in pence per kWh on using your battery for charging and discharging. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. The default is 0.5p (meaning charging and discharging the battery would effectively cost an extra 1p per kWh) but can be set to 0 if you want to turn this feature off. Below is a guide to some of the electricity tariff options and a set of recommended Predbat settings for each tariff type. In theory most tariffs will work out of the box but still it's worth reviewing your settings.","title":"Configuration guide"},{"location":"configuration-guide/#fixed-daily-rates","text":"With a fixed daily rate tariff you will just be predicting the battery levels, no charging or discharging is required although it won't hurt if you leave these options enabled. You should set select.predbat_mode to 'Monitor'.","title":"Fixed daily rates"},{"location":"configuration-guide/#cheap-night-rate-with-bad-export-rate-eg-octopus-go-economy-7-etc","text":"In this scenario you will want to charge overnight based on the next day's solar forecast and don't want Predbat to force discharge your battery. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge You want Predbat to calculate and control charging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy If you are using expert mode then these options maybe worth reviewing: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit You should set select.predbat_mode to 'Control charge'","title":"Cheap night rate with bad export rate (e.g. Octopus Go, Economy 7 etc)"},{"location":"configuration-guide/#cheap-night-rate-with-a-good-export-rate-eg-intelligent-octopus-with-octopus-outgoing","text":"Follow the instructions from the Cheap Night rate above, but also you will also want to have automatic discharge occurring when the export rates are profitable. Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Can be set non-zero if you want to force a minimum charge level You should set select.predbat_mode to 'Control charge & discharge'","title":"Cheap night rate, with a good export rate (e.g. Intelligent Octopus with Octopus Outgoing)"},{"location":"configuration-guide/#multiple-rates-for-import-and-export-eg-octopus-flux-cozy","text":"Follow the instructions from Cheap Night rate above, but also you will want to have automatic discharge when the export rates are profitable. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to 'Control charge & discharge'","title":"Multiple rates for import and export (e.g. Octopus Flux &amp; Cozy)"},{"location":"configuration-guide/#half-hourly-variable-rates-eg-octopus-agile","text":"Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want Predbat to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24-48 If you set this to 24 then you will have quicker updates, going to 36/48 for a longer plan input_number.predbat_metric_min_improvement 0 Charge less if it's cost neutral input_number.predbat_metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.predbat_metric_battery_cycle 0-2 Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to 'Control charge & discharge'","title":"Half hourly variable rates (e.g. Octopus Agile)"},{"location":"creating-charts/","text":"Creating the charts There are a number of fancy Apex charts that can be produced from Predbat data - things like Home Battery SoC prediction, Cost prediction, Energy Rates, etc. There's a Video Guide to the different charts available on YouTube. To install the charts: Install Apex Charts https://github.com/RomRider/apexcharts-card : In HACS, click on Frontend Click the blue Explore and download repositories button and type 'apex' Click on 'apexcharts-card', then click the blue 'Download', then 'Download' again to install it When prompted to 'reload your browser', click 'Reload' Next, on a Home Assistant dashboard you create the charts you want. There are multiple charts, for each section of the example chart yaml file , create a new apexcharts card and copy the YAML into it: Click the blue 'Add card', scroll down the list of cards to the bottom and click 'Custom: ApexCharts card' Delete the template card configuration and copy/paste ONE Apex chart from the example file Click 'Save' Repeat (adding Apex chart card, copy paste card config) for all of the charts you want to see Customise as you like If you get an error 'Custom element doesn't exist: apexcharts-card' then you've not installed the Apex Charts card correctly from HACS. See the video guides for a walkthrough of what the different charts show. Example charts:","title":"Creating the charts"},{"location":"creating-charts/#creating-the-charts","text":"There are a number of fancy Apex charts that can be produced from Predbat data - things like Home Battery SoC prediction, Cost prediction, Energy Rates, etc. There's a Video Guide to the different charts available on YouTube. To install the charts: Install Apex Charts https://github.com/RomRider/apexcharts-card : In HACS, click on Frontend Click the blue Explore and download repositories button and type 'apex' Click on 'apexcharts-card', then click the blue 'Download', then 'Download' again to install it When prompted to 'reload your browser', click 'Reload' Next, on a Home Assistant dashboard you create the charts you want. There are multiple charts, for each section of the example chart yaml file , create a new apexcharts card and copy the YAML into it: Click the blue 'Add card', scroll down the list of cards to the bottom and click 'Custom: ApexCharts card' Delete the template card configuration and copy/paste ONE Apex chart from the example file Click 'Save' Repeat (adding Apex chart card, copy paste card config) for all of the charts you want to see Customise as you like If you get an error 'Custom element doesn't exist: apexcharts-card' then you've not installed the Apex Charts card correctly from HACS. See the video guides for a walkthrough of what the different charts show. Example charts:","title":"Creating the charts"},{"location":"customisation/","text":"Customisation This document describes the Predbat configuration items in Home Assistant that you can modify to customise Predbat to fit your needs. All of these settings are entities that can be configured directly in Home Assistant (unlike the ' apps.yaml ' configuration items that have to be edited with a file editor). See Displaying output data for information on how to view and edit these entities within Home Assistant. Saving and restoring Predbat settings The selector select.predbat_saverestore can be used to save your current Predbat settings to a yaml file (kept in the directory /config/predbat_save/ ) and to restore the settings from one of these files. Selecting the selector option save current will cause the settings to be saved to a date/time stamped file. You can rename this file yourself in the Home Assistant filesystem to give it a more human readable name, or delete it if you no longer want to keep it. This is normally best done in an SSH window or via a Samba mount. Selecting the option restore default will put all your settings back to the Predbat defaults. Before the restore the current Predbat settings will be saved to the file previous.yaml - should you have made a mistake you can restore them quickly again. Selecting any of the .yaml files you have created will restore your settings from this file. Predbat mode The mode that Predbat operates in will change the operation, this can be configured with select.predbat_mode drop down menu as follows: Monitor Control SOC Only Control charge Control charge & discharge If the switch.predbat_set_read_only is set to True then this prevents Predbat from making modifications to the inverter settings (regardless of the configuration). Predbat will continue making and updating its prediction plan every 5 minutes, but no inverter changes will be made. This is useful if you want to over-ride what predbat is planning to do (e.g. your own automation), or whilst you are learning how Predbat works prior to turning it on 'in anger'. NOTE: Changing the Predbat mode or the read only switch will cause Predbat to reset the inverter settings to default, this will disable both charge and discharge, reset charge and discharge rates to full power and reset the reserve to the default setting Predbat Monitor mode In Monitor mode Predbat will not control or Plan any charging or discharging, inverter balancing will take place if enabled, and the plan will show just what is expected based on the current inverter configuration alone. Predbat Control SOC only mode In Control SOC only mode Predbat will adjust the target charge percentage (SOC target) according to the Best plan, but the charge window will not be modified. This mode can be useful if you just have one fixed charge slot per day and you only want Predbat to control the percentage the battery is charged based on solar generation and predicted house load. CAUTION: You must manually set any charging required on the inverter and if the charge window is disabled then no charging will take place. Predbat Control charge mode In Control charge mode Predbat will set the charge times and charge percentages according to the Best plan, charging can be enabled and disabled by Predbat. Predbat will set the inverter into Eco mode when required to enable the battery to support house load, but it will not plan any forced discharging of the battery for export purposes. This mode can be useful if you don't have an export rate, or if you want to preserve the battery for home demand. Predbat Control charge & discharge mode In Control charge & discharge mode Predbat will set both charge and discharge times and control charge and discharge percentages. If you have set the switch.predbat_set_discharge_freeze_only set to True then forced export won't occur but Predbat can force the export of solar power to the grid when desired. Expert mode Predbat has a toggle switch called switch.predbat_expert_mode which is set to Off by default for new installs (On by default for upgraded installs). A lot of Predbat's more advanced configuration options will not be available unless expert mode is enabled. It's recommended for new users to start without expert mode and then maybe enable it later once you become more confident with the tool. Performance related By default Predbat controls the inverter and updates the plan every 5 minutes, this can however use a lot of CPU power especially on more complex tariffs like Agile when run on lower power machines such as Raspberry PIs and some thin clients. You can tweak input_number.predbat_calculate_plan_every ( expert mode ) to reduce the frequency of replanning while keeping the inverter control in the 5 minute slots. E.g. a value of 10 or 15 minutes should also give good results. If you have performance problems leave switch.predbat_calculate_second_pass ( expert mode ) turned Off as it's quite CPU intensive and provides very little improvement for most systems. You can can enable combine_charge_slots and combine_discharge_slots in order to speed up planning. Note: Combining discharge slots may prevent optimal forced export. Combining charge slots is usually fine for tariffs with longer periods of fixed rates but can limit the planning ability in some cases. The number of threads you use can change your performance, you can set threads in apps.yaml to 0 to disable threading if you don't have multiple CPUs available or set it to 'auto' (the default) to use one thread per CPU. Its recommended you don't set this to an odd number of threads. Battery loss options input_number.predbat_battery_loss is an assumed percentage figure for energy lost when charging the battery, the default 0.05 is 5%. input_number.predbat_battery_loss_discharge is an assumed percentage figure for energy lost whilst discharging the battery, the default 0.05 is 5%. input_number.predbat_inverter_loss is an assumed percentage figure for energy lost during the conversion within the inverter from DC to AC or AC to DC, the default is 0% for legacy reasons but please adjust. switch.predbat_inverter_hybrid Set to True if you have a hybrid inverter so no inverter losses will be applied for DC charging from Solar generation. Set to False if you have an AC coupled battery and inverter losses will be applied when charging from solar. NB: This switch only applies when Predbat is modelling solar charging. All grid charging (regardless of inverter type) has to undergo an AC to DC conversion and so the inverter_loss % will be included in Predbat's model when charging from the grid. input_number.predbat_metric_battery_cycle ( expert mode ) This sets a 'virtual cost' in pence per kWh on using your battery for charging and discharging. Higher numbers will reduce battery cycles at the expense of using higher energy costs. In theory if you think your battery will last say 6000 complete cycles and cost you \u00a34000 and is 9.5kWh then each full charge and discharge cycle is 19kWh and so the cost per cycle is \u00a34000 / 19 / 6000 = 3.5p. Taking the 3.5p example, Predbat will apply a \"virtual cost\" of 3.5p to every kWh of charge and of discharge of the battery. This cost will be included in Predbat's cost optimisation plan when it decides whether to charge, discharge the battery or let the house run on grid import. NB: For clarity and to re-emphasise, the \"virtual cost\" will be applied to BOTH the cost calculation for charging AND for discharging the battery. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. Note that the cycle cost will not be included in the cost predictions that Predbat produces such as the Predbat HTML plan or Apex charts, its just a cost taken into account by Predbat at the planning stage when the plan is calculated. NB: Setting this to a non-zero value will increase your daily cost, but will reduce your home battery usage. Figures of around 0p-2p are recommended, the default is 0p per kWh. input_number.predbat_metric_battery_value_scaling ( expert mode ) A percentage value that can be used to scale the value of the energy in the battery at the end of the plan. The battery value is accounted for in the optimisations at the lowest future import rate including charging and inverter losses. A value of 1.0 means no change to this, while lower than 1.0 means to value future battery levels less, greater than 1.0 will value it more (and hence hold more charge at the end of the plan). input_number.metric_self_sufficiency ( export mode ) A price in pence per kWh used to skew the calculations towards self sufficiency. Effectively saying to Predbat to account for imports at a higher price than reality in the calculation and thus selecting plans with less import. If you want to be as self sufficient as possible then set this to the difference between your lowest import rate and the highest export rate to take exports that require additional import appear unprofitable. This setting will not impact the real calculated costs and is only used for plan selection. Values of 5-10p maybe worth trying if you prefer to avoid importing even if it saves you money. Scaling and weight options input_number.predbat_battery_rate_max_scaling is a percentage factor to adjust your maximum charge rate from that reported by the inverter. For example a value of 0.95 would be 95% and indicate charging at 5% slower than reported. For GE inverters the charge rate reports the max AC rate and thus needs to be reduced by inverter losses. You can try computing your discharge curve and check recommendations for changing this figure in the logfile. input_number.predbat_battery_rate_max_scaling_discharge is a percentage factor to adjust your maximum discharge rate from that reported by the inverter. For GE inverters the discharge rate is reported as the max AC rate and thus is fairly accurate. You can try computing your discharge curve and check recommendations for changing this figure in the logfile. switch.predbat_battery_capacity_nominal - When enabled Predbat uses the reported battery size from the GivTCP 'Battery Nominal Capacity' field rather than from the normal GivTCP reported 'Battery Capacity kWh' size. If your battery size is reported wrongly maybe try turning this on and see if it helps. input_number.predbat_load_scaling is a percentage Scaling factor applied to historical load, increase this if you want to be more pessimistic on future consumption. Use 1.0 to use exactly previous load data. A value of 1.1 for example would add 10% to historical load. input_number.predbat_load_scaling10 is a percentage Scaling factor applied to historical load only for the PV10% scenario (this is in addition to load_scaling above). This can be used to make the PV10% scenario take into account extra load usage and hence be more pessimistic while leaving the central scenario unchanged. The default is 1.1 meaning an extra 10% load is added. This will only have an impact if the PV 10% weighting is non-zero. input_number.predbat_load_scaling_saving is a percentage Scaling factor applied to historical load only during Octopus Saving sessions. This can be used to model your household cutting down on energy use inside a saving session (e.g. turning off a heat pump, deferring cooking until after the session, etc). input_number.predbat_pv_scaling is a percentage scaling factor applied to PV data, decrease this if you want to be more pessimistic on PV production vs Solcast. Use 1.0 to use exactly use the Solcast forecast generation data. A value of 0.9 for example would remove 10% from the Solcast generation forecast. input_number.predbat_pv_metric10_weight is the percentage weighting given to the Solcast 10% PV scenario in calculating solar generation. Use 0.0 to disable using the PV 10% in Predbat's forecast of solar generation. A value of 0.1 assumes that 1 in every 10 times we will get the Solcast 10% scenario, and 9 in every 10 times we will get the 'median' Solcast forecast. Predbat estimates solar generation for each half hour slot to be a pv_metric10_weight weighting of the Solcast 10% PV forecast to the Solcast Median forecast. A value of 0.15 is recommended. Historical load data The historical load data is taken from the load sensor as configured in apps.yaml and the days are selected using days_previous and weighted using days_previous_weight in the same configuration file switch.predbat_load_filter_modal ( expert mode ) when enabled will automatically discard the lowest daily consumption day from the list of days to use (provided you have more than 1 day selected in days_previous). This can be used to ignore a single low usage day in your average calculation. By default is feature is enabled but can be disabled only in expert mode. Car Charging Car charging hold options Car charging hold is a feature where you try to filter out previous car charging from your historical data so that future predictions are more accurate. When switch.predbat_car_charging_hold is enabled when for loads of above the power threshold input_number.predbat_car_charging_threshold are assumed to be car charging and input_number.predbat_car_charging_rate will be subtracted from the historical load data. For more accurate results can you use an incrementing energy sensor set with car_charging_energy in the apps.yaml configuration file. In this case when switch.predbat_car_charging_hold is enabled historical data will be subtracted from the load data instead of using the fixed threshold method. input_number.predbat_car_charging_energy_scale Is used to scale the car_charging_energy sensor, the default units are kWh so if you had a sensor in watts you might use 0.001 instead. input_number.predbat_car_charging_rate - Set to the car's charging rate in kW per hour (normally 7.5 for 7.5kWh), but will be pulled automatically from Octopus Energy integration if enabled for Octopus Intelligent. input_number.predbat_car_charging_loss gives the amount of energy lost when charging the car (load in the home vs energy added to the battery). A good setting is 0.08 which is 8%. Car charging plan options Car charging planning - is only used if Intelligent Octopus isn't enabled and car_charging_planned is connected correctly. This feature allows Predbat to create a plan for when you car will charge, but you will have to create an automation to trigger your car to charge using binary_sensor.predbat_car_charging_slot if you want it to match the plan. select.predbat_car_charging_plan_time - When using Predbat-led planning set this to the time you want the car to be charged by switch.predbat_car_charging_plan_smart - When enabled (True) allows Predbat to allocate car charging slots to the cheapest times, when disabled (False) all low rate slots will be used in time order. input_number.predbat_car_charging_plan_max_price - When non-zero sets a maximum price per kWh to pay when charging your car, when disabled (0) all slots will be considered. switch.predbat_octopus_intelligent_charging when true enables the Intelligent Octopus charging feature which will make Predbat create a car charging plan which is taken from the Intelligent Octopus plan you must have set the octopus_intelligent_slot sensor in apps.yaml to enable this feature. If Octopus Intelligent Charging is enabled the switch switch.predbat_octopus_intelligent_ignore_unplugged ( expert mode ) can be used to prevent Predbat from assuming the car will be charging when the car is unplugged. This will only work correctly if car_charging_planned is set correctly in apps.yaml to detect your car being plugged in. Control how your battery behaves during car charging: switch.predbat_car_charging_from_battery - When True the car can drain the home battery, Predbat will manage the correct level of battery accordingly. When False home battery discharge will be prevented when your car charges, all load from the car and home will be from the grid. This is achieved by setting the discharge rate to 0 during car charging and to the maximum otherwise, hence if you turn this switch Off you won't be able to change your discharge rate outside Predbat. The home battery can still charge from the grid/solar in either case. Only use this if Predbat knows your car charging plan, e.g. you are using Intelligent Octopus or you use the car slots in Predbat to control your car charging. If your car does not have an SOC sensor and you are not using Octopus Intelligent you can set switch.predbat_car_charging_manual_soc to have Predbat create input_number.predbat_car_charging_manual_soc_kwh which will hold the cars current state of charge (soc) in kWh. You will need to manually set this to the cars current charge level before charging, Predbat will increment it during charging sessions but will not reset it automatically. Calculation options See the Predbat mode setting as above for basic calculation options input_number.predbat_forecast_plan_hours is the minimum length of the Predbat charge plan, and is the number of hours after the first charge slot to include in the plan. The default of 24 hours is the recommended value (to match energy rate cycles). Note that the actual length of the Predbat plan will vary depending upon when the first charge slot is. switch.predbat_calculate_regions ( expert mode ) When True the a second pass of the initial thresholds is calculated in 4 hour regions before forming the detailed plan. Is True by default but can be turned off in expert mode. switch.predbat_calculate_discharge_oncharge ( expert mode ) When True calculated discharge slots will disable or move charge slots, allowing them to intermix. When False discharge slots will never be placed into charge slots. switch.predbat_set_discharge_during_charge - If turned off disables inverter discharge during charge slots, useful for multi-inverter setups to avoid cross charging when batteries are out of balance. switch.predbat_calculate_tweak_plan ( expert mode ) When True causes Predbat to perform a second pass optimisation across the next 8 charge and discharge windows in time order. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. switch.predbat_calculate_second_pass ( expert mode ) When True causes Predbat to perform a second pass optimisation across all the charge and discharge windows in time order. NOTE: This feature is quite slow and so may need a higher performance machine. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. Battery margins and metrics options input_number.predbat_best_soc_keep is the minimum battery level in kWh that Predbat will to try to keep the battery above for the Predbat plan. This is a soft constraint only that's used for longer term planning and is ignored for the forthcoming first 4 hours of the plan. As this is not used for short-term planning it's possible for your SoC to drop below this - use input_number.predbat_best_soc_min if you need a hard SoC constraint that will always be maintained. It's usually good to have best_soc_keep set to a value above 0 to allow some margin in case you use more energy than planned between charge slots. input_number.predbat_best_soc_min ( expert mode ) sets the minimum charge level (in kWh) for charging during each slot and the minimum discharge level also (set to 0 if you want to skip some slots). If you set this to a non-zero value you will need to use the low rate threshold to control which slots you charge from or you may charge all the time. input_number.predbat_best_soc_max ( expert mode ) sets the maximum charge level (in kWh) for charging during each slot. A value of 0 disables this feature. input_number.combine_rate_threshold ( expert mode ) sets a threshold (in pence) to combine charge or discharge slots together into a single larger average rate slot. The default is 0p which disables this feature and all rate changes result in a new slot. switch.predbat_combine_charge_slots Controls if charge slots of > 30 minutes can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. Turn this off if you want to enable ad-hoc import during long periods of higher rates but you wouldn't charge normally in that period (e.g. pre-charge at day rate before a saving session). The default is disabled (False) switch.predbat_combine_discharge_slots ( expert mode ) Controls if discharge slots of > 30 minute can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. The default is disabled (False) input_number.predbat_metric_min_improvement ( expert mode ) sets the minimum cost improvement in pence that it's worth lowering the battery SOC % for. The default value is 0 which means this feature is disabled and the battery will be charged less if it's cost neutral. If you use input_number.predbat_pv_metric10_weight then you probably don't need to enable this as the 10% forecast does the same thing better Do not use if you have multiple charge windows in a given period as it won't lead to good results (e.g. Agile) You could even go to something like -0.1 to say you would charge less even if it cost up to 0.1p more (best used with metric10). input_number.predbat_metric_min_improvement_discharge ( expert mode ) Sets the minimum pence cost improvement it's worth doing a forced discharge (and export) for. A value of 0.1 is the default which prevents any marginal discharges. If you increase this value (e.g. you only want to discharge/forced export if definitely very profitable), then discharges will become less common and shorter. The value is in pence per 30 minutes of export time. input_number.predbat_rate_low_threshold ( expert mode ) When set to 0 (the default) Predbat will automatically look at the future import rates in the plan and determine the import rate threshold below which a slot will be considered to be a potential charging slot. If rate_low_threshold is set to a non zero value this will set the threshold below future average import rates as the minimum to consider for a charge window, e.g. setting to 0.8 = 80% of average rate. If you set this too low you might not get enough charge slots. If it's too high you might get too many in the 24-hour period which makes optimisation harder. input_number.predbat_rate_high_threshold ( expert mode ) When set to 0 (the default) Predbat will automatically look at the future export rates in the plan and determine the threshold above which a slot can be considered a potential exporting slot. If rate_high_threshold is set to a non zero value this will set the threshold above future average export rates as the minimum export rate to consider exporting for, e.g. setting to 1.2 = 20% above average rate. If you set this too high you might not get any export slots. If it's too low you might get too many in the 24-hour period. input_number.predbat_metric_future_rate_offset_import ( expert mode ) Sets an offset to apply to future import energy rates that are not yet published, best used for variable rate tariffs such as Agile import where the rates are not published until 4pm. If you set this to a positive value then Predbat will assume unpublished import rates are higher by the given amount. Setting this to 1 to 1.5p for example results in Predbat being a little more aggressive in the charging calculation for today - Predbat will charge the battery to a higher percentage than it would otherwise as it expects a cost benefit of using today's lower rates. NB: this can lead to higher costs and to some export if solar generation is better than forecast. input_number.predbat_metric_future_rate_offset_export ( expert mode ) Sets an offset to apply to future export energy rates that are not yet published, best used for variable rate tariffs such as Agile export where the rates are not published until 4pm. If you set this to a negative value then Predbat will assume unpublished export rates are lower by the given amount. switch.predbat_calculate_inday_adjustment ( expert mode ) Enabled by default with damping of 0.95. When enabled will calculate the difference between today's actual load and today's predicated load and adjust the rest of the days usage prediction accordingly. A scale factor can be set with input_number.predbat_metric_inday_adjust_damping ( expert mode ) to either scale up or down the impact of the in-day adjustment (lower numbers scale down its impact). The in-day adjustment factor can be seen in predbat.load_inday_adjustment and charted with the In Day Adjustment chart (template can be found in the charts template in Github). input_number.predbat_carbon_metric ( carbon enable ) When Carbon footprint tracking is enabled ( switch.predbat_carbon_enable ) you can specify a cost per Kg of CO2 used to weight the selection of plans. Values of around 10-200 will give varying outcomes to trade off cost vs carbon footprint of your system. Note: Carbon footprint tracking can only be enabled if apps.yaml is configured to point to the correct CO2 cost sensor Inverter control options switch.predbat_set_status_notify Enables mobile notification about changes to the Predbat state (e.g. Charge, Discharge etc). On by default. switch.predbat_set_inverter_notify Enables mobile notification about all changes to inverter registers (e.g. setting window, turning discharge on/off). Off by default. switch.predbat_set_charge_low_power Enables low power charging mode where the max charge rate will be automatically determined by Predbat to be the lowest possible rate to meet the charge target. This is only really effective for charge windows >30 minutes. If this setting is turned on, its strongly recommended that you create a battery_power_charge_curve in apps.yaml as otherwise the low power charge may not reach the charge target in time. This setting is off by default. The YouTube video low power charging and charging curve explains how the low power charging works and shows how Predbat automatically creates it. switch.predbat_set_reserve_enable ( expert_mode ) When enabled the reserve setting is used to hold the battery charge level once it has been reached or to protect against discharging beyond the set limit. Enabled by default. switch.predbat_set_charge_freeze ( expert mode ) When enabled will allow Predbat to hold the current battery level while drawing from the grid/solar as an alternative to charging. Enabled by default. switch.predbat_set_discharge_freeze_only ( expert mode ) When enabled forced discharge is prevented, but discharge freeze can be used (if enabled) to export excess solar rather than charging the battery. This is useful with tariffs that pay you for solar exports but don't allow forced export (brown energy). If you have switch.predbat_inverter_hybrid set to False then if switch.predbat_inverter_soc_reset ( expert mode ) is set to True then the target SOC % will be reset to 100% outside a charge window. This may be required for AIO inverter to ensure it charges from solar. The default for this switch is True but it can be disabled in expert mode if need be. input_number.predbat_set_reserve_min Defines the reserve percentage to reset the reserve to when not in use, a value of 4 is the minimum and recommended to make use of the full battery. If you want to pre-prepare the battery to retain extra charge in the event of a high likelihood of a grid power outage such as storms predicted, you can increase set_reserve_min to 100%, and then change it back afterwards. (Obviously this is only any use if your inverter is wired to act as an Emergency Power Supply or whole-home backup 'island mode' on the GivEnergy AIO). switch.predbat_inverter_soc_reset ( expert mode ) When enabled the target SOC for the inverter(s) will be reset to 100% when a charge slot is not active, this can be used to workaround some firmware issues where the SOC target is used for solar charging as well as grid charging. When disabled the SOC % will not be changed after a charge slot. This is disabled by default. Balance Inverters When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. The apps.yaml contains a setting balance_inverters_seconds which defines how often to run the balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds. Enable the switch.predbat_balance_inverters_enable switch in Home Assistant to enable this feature. switch.predbat_balance_inverters_charge - Is used to toggle on/off balancing while the batteries are charging switch.predbat_balance_inverters_discharge - Is used to toggle on/off balancing while the batteries are discharging switch.predbat_balance_inverters_crosscharge - Is used to toggle on/off balancing when the batteries are cross charging input_number.predbat_balance_inverters_threshold_charge - Sets the minimum percentage divergence of SoC during charge before balancing, default is 1% input_number.predbat_balance_inverters_threshold_discharge - Sets the minimum percentage divergence of SoC during discharge before balancing, default is 1% Cloud coverage and load variance Predbat tries to model passing clouds by modulating the PV forecast data on a 5 minute interval up and down while retaining the same predicted total. The amount of modulation depends on the difference between the PV50% (default) and PV10% scenario produced by Solcast. You can disable this feature ( expert mode only ) using switch.predbat_metric_cloud_enable Predbat tries to model changes in your household load by modulating the historical data on a 5 minute interval up and down while retaining the same predicted total. The amount of modulation depends on the standard deviation of your load predictions over the coming period (currently 4 hours). You can disable this feature ( expert mode only ) using switch.metric_load_divergence_enable iBoost model options Predbat has an 'iBoost model' that can be used to model using excess solar energy to heat hot water (or similar) instead of it being exported to the grid. This model can be used to control any solar diverter device, for example an iBoost (e.g. using a Fingerbot or similar device to physically press the 'boost' button on the iBoost), a MyEnergy Eddi (using the MyEnergy integration), or it can be used with a high power smart switch to turn on the hot water cylinder immersion heater when there is excess solar. So although Predbat refers to controlling an iBoost, you are not limited to just an iBoost device when using this model within Predbat. To turn the model on, switch.predbat_iboost_enable needs to be enabled. The predicted output from the iBoost solar diverter model is returned in predbat.iboost_best and is populated in the 'iBoost' column of the Predbat plan . When you turn on predbat_iBoost_enable the following additional Home Assistant entities are created by Predbat: switch.predbat_iboost_solar When enabled assumes the solar diverter will use solar power to boost the hot water heating. input_number.predbat_iboost_min_soc sets the minimum home battery SoC percentage that must be in the battery before the solar diverter is turned on. The default is 0 meaning hot water heating can occur regardless of what SoC level the battery is at. switch.predbat_iboost_gas When enabled will control the solar diverter to only operate when electric rates are lower than gas rates. This is useful if you have the choice to heat your hot water by immersion heater or by gas boiler. Note: Gas rates have to be configured in apps.yaml using metric_octopus_gas . input_number.predbat_iboost_gas_scale Sets the scaling of the gas rates (set in apps.yaml )used before comparing with electric rates, to account for gas boiler losses and efficiency. It should be set to the reciprocal of the boiler efficiency, i.e. for an 80% efficient gas boiler, set to 1.25. input_number.predbat_iboost_value_scaling Sets how to account for the value of iBoost units of energy. The default value of 0.75 means that each kWh of energy diverted is accounted for a 0.75 x The lowest future import rate. Higher values will generate plans with more solar diversion while lower values will generate less. A value of 0 means all diverted energy should be ignored in planning (assumed to be zero value). switch.predbat_iboost_charging If set to on, the solar diverter will only operate when the battery is charging (can be combined with iboost_gas or not). input_number.predbat_iboost_max_energy Sets the maximum energy in kWh that the solar diverter can consume during a day before turning off - default 3kWh. input_number.predbat_iboost_max_power Sets the maximum power in watts that the solar diverter will consume - default 2400. input_number.predbat_iboost_min_power Sets the minimum power in watts that the solar diverter will consume - default 500. You will see input_number.predbat_iboost_today entity which tracks the estimated kWh consumed by the solar diverter during the day, and resets at 11:30pm every night. The binary_sensor.predbat_iboost_active entity will be enabled when the solar diverter should be active, can be used for automations to trigger the immersion heater boost. Example template automation for controlling the solar diverter: alias: Solar Diverter description: \"Start/stop solar diverter based on Predbat determined slots\" trigger: - platform: state entity_id: - binary_sensor.predbat_iboost_active action: - choose: - conditions: - condition: state entity_id: binary_sensor.predbat_iboost_active state: \"True\" sequence: <commands to turn on your solar diverter> - conditions: - condition: state entity_id: binary_sensor.predbat_iboost_active state: \"False\" sequence: <commands to turn off your solar diverter> mode: single If you have an incrementing sensor that tracks the solar diverter energy usage then to make your predictions more accurate you should set the iboost_energy_today sensor in apps.yaml to point to it, and optionally set iboost_energy_scaling if the sensor isn't in kWh (e.g. set to 0.001 if the sensor is in Watts). The sensor should be an incrementing sensor which can reset at midnight or not. Holiday mode When you go away you are likely to use less electricity and so the previous load data will be quite pessimistic. Using the Home Assistant entity input_number.predbat_holiday_days_left you can set the number of full days that you will be away for (including today). The number will count down by 1 day at midnight until it gets back to zero. Whilst holiday days left is non-zero, Predbat's 'holiday mode' is active. When Predbat's 'holiday mode' is active the historical load data will be taken from yesterday's data (1 day ago) rather than from the days_previous setting in apps.yaml . This means Predbat will adjust more quickly to the new usage pattern. If you have been away for a longer period of time (more than your normal days_previous setting) then obviously it's going to take longer for the historical data to catch up, you could then enable holiday mode for another 7 days after your return. In summary: For short holidays set holiday_days_left to the number of full days you are away, including today but excluding the return day For longer holidays set holiday_days_left to the number of days you are away plus another 7 days until the data catches back up Manual control In some cases you may want to override Predbat's planned behaviour and make a decision yourself. One way to achieve this is to put Predbat into read-only mode using switch.predbat_set_read_only . When going to read only mode the inverter will be put back to the default settings and you should then control it yourself using GivTCP or the App appropriate to your inverter. A better alternative in some cases is to tell Predbat what you want it to do using the manual force features: You can force the battery to be charged within a 30 minute slot by using the select.predbat_manual_charge selector. Pick the 30 minute slot you wish to charge in, and Predbat will change the plan to charge in the selected slot. You can select multiple slots by using the drop down menu more than once. When Predbat updates the plan you will see the slots picked to be charging slots in the current value of this selector, and annotated in the Predbat HTML plan with an upside down 'F' symbol. You can cancel a force slot by selecting the slot time again (it will be shown in square brackets to indicate its already selected). The select.predbat_manual_discharge selector can be used to manually force a discharge within a 30 minute slot in the same way as the manual force charge feature. The force discharge takes priority over force charging. The select.predbat_manual_idle selector is used to force Predbat to idle mode during a 30 minute slot, this implies no forced grid charging or discharging of the battery. House load will be supplied from solar, or from the battery if there is insufficient solar, or grid import if there is insufficient battery charge. This is described as 'ECO' Mode for GivEnergy inverters but other inverters use different terminology. The select.predbat_manual_freeze_charge selector is used to force Predbat to freeze charge during a 30 minute slot, this implies the battery will not discharge and hold at the current level. The grid maybe used if solar is not enough to cover the load. The select.predbat_manual_freeze_discharge selector is used to force Predbat to freeze discharge during a 30 minute slot, this implies the battery will not charge but will still discharge for the house load. Any solar will be exported to the grid. When you use the manual override features you can only select times in the next 18 hours, the overrides will be removed once their time slot expires (they do not repeat). _NOTE: once you select a time slot from any of the select.predbat_manual_ selectors the selected time slot is immediately marked on the drop-down and you can then make another change. Predbat still has to update the plan which it will be doing so in the background, and this can take a few minutes to run (depending on the speed and power of the PC you are running Home Assistant on) so don't be surprised why the Predbat plan doesn't change immediately - remember you can see the date/time the plan was last updated on the first row of the plan. CAUTION: If you leave Predbat turned off for a long period of time then the override timeslots could end up repeating when you restart Debug switch.predbat_debug_enable when on prints lots of debug, leave off by default switch.predbat_plan_debug ( expert mode ) when enabled adds some extra debug to the Predbat HTML plan - see Predbat Plan debug mode for more details.","title":"Customisation"},{"location":"customisation/#customisation","text":"This document describes the Predbat configuration items in Home Assistant that you can modify to customise Predbat to fit your needs. All of these settings are entities that can be configured directly in Home Assistant (unlike the ' apps.yaml ' configuration items that have to be edited with a file editor). See Displaying output data for information on how to view and edit these entities within Home Assistant.","title":"Customisation"},{"location":"customisation/#saving-and-restoring-predbat-settings","text":"The selector select.predbat_saverestore can be used to save your current Predbat settings to a yaml file (kept in the directory /config/predbat_save/ ) and to restore the settings from one of these files. Selecting the selector option save current will cause the settings to be saved to a date/time stamped file. You can rename this file yourself in the Home Assistant filesystem to give it a more human readable name, or delete it if you no longer want to keep it. This is normally best done in an SSH window or via a Samba mount. Selecting the option restore default will put all your settings back to the Predbat defaults. Before the restore the current Predbat settings will be saved to the file previous.yaml - should you have made a mistake you can restore them quickly again. Selecting any of the .yaml files you have created will restore your settings from this file.","title":"Saving and restoring Predbat settings"},{"location":"customisation/#predbat-mode","text":"The mode that Predbat operates in will change the operation, this can be configured with select.predbat_mode drop down menu as follows: Monitor Control SOC Only Control charge Control charge & discharge If the switch.predbat_set_read_only is set to True then this prevents Predbat from making modifications to the inverter settings (regardless of the configuration). Predbat will continue making and updating its prediction plan every 5 minutes, but no inverter changes will be made. This is useful if you want to over-ride what predbat is planning to do (e.g. your own automation), or whilst you are learning how Predbat works prior to turning it on 'in anger'. NOTE: Changing the Predbat mode or the read only switch will cause Predbat to reset the inverter settings to default, this will disable both charge and discharge, reset charge and discharge rates to full power and reset the reserve to the default setting","title":"Predbat mode"},{"location":"customisation/#predbat-monitor-mode","text":"In Monitor mode Predbat will not control or Plan any charging or discharging, inverter balancing will take place if enabled, and the plan will show just what is expected based on the current inverter configuration alone.","title":"Predbat Monitor mode"},{"location":"customisation/#predbat-control-soc-only-mode","text":"In Control SOC only mode Predbat will adjust the target charge percentage (SOC target) according to the Best plan, but the charge window will not be modified. This mode can be useful if you just have one fixed charge slot per day and you only want Predbat to control the percentage the battery is charged based on solar generation and predicted house load. CAUTION: You must manually set any charging required on the inverter and if the charge window is disabled then no charging will take place.","title":"Predbat Control SOC only mode"},{"location":"customisation/#predbat-control-charge-mode","text":"In Control charge mode Predbat will set the charge times and charge percentages according to the Best plan, charging can be enabled and disabled by Predbat. Predbat will set the inverter into Eco mode when required to enable the battery to support house load, but it will not plan any forced discharging of the battery for export purposes. This mode can be useful if you don't have an export rate, or if you want to preserve the battery for home demand.","title":"Predbat Control charge mode"},{"location":"customisation/#predbat-control-charge-discharge-mode","text":"In Control charge & discharge mode Predbat will set both charge and discharge times and control charge and discharge percentages. If you have set the switch.predbat_set_discharge_freeze_only set to True then forced export won't occur but Predbat can force the export of solar power to the grid when desired.","title":"Predbat Control charge &amp; discharge mode"},{"location":"customisation/#expert-mode","text":"Predbat has a toggle switch called switch.predbat_expert_mode which is set to Off by default for new installs (On by default for upgraded installs). A lot of Predbat's more advanced configuration options will not be available unless expert mode is enabled. It's recommended for new users to start without expert mode and then maybe enable it later once you become more confident with the tool.","title":"Expert mode"},{"location":"customisation/#performance-related","text":"By default Predbat controls the inverter and updates the plan every 5 minutes, this can however use a lot of CPU power especially on more complex tariffs like Agile when run on lower power machines such as Raspberry PIs and some thin clients. You can tweak input_number.predbat_calculate_plan_every ( expert mode ) to reduce the frequency of replanning while keeping the inverter control in the 5 minute slots. E.g. a value of 10 or 15 minutes should also give good results. If you have performance problems leave switch.predbat_calculate_second_pass ( expert mode ) turned Off as it's quite CPU intensive and provides very little improvement for most systems. You can can enable combine_charge_slots and combine_discharge_slots in order to speed up planning. Note: Combining discharge slots may prevent optimal forced export. Combining charge slots is usually fine for tariffs with longer periods of fixed rates but can limit the planning ability in some cases. The number of threads you use can change your performance, you can set threads in apps.yaml to 0 to disable threading if you don't have multiple CPUs available or set it to 'auto' (the default) to use one thread per CPU. Its recommended you don't set this to an odd number of threads.","title":"Performance related"},{"location":"customisation/#battery-loss-options","text":"input_number.predbat_battery_loss is an assumed percentage figure for energy lost when charging the battery, the default 0.05 is 5%. input_number.predbat_battery_loss_discharge is an assumed percentage figure for energy lost whilst discharging the battery, the default 0.05 is 5%. input_number.predbat_inverter_loss is an assumed percentage figure for energy lost during the conversion within the inverter from DC to AC or AC to DC, the default is 0% for legacy reasons but please adjust. switch.predbat_inverter_hybrid Set to True if you have a hybrid inverter so no inverter losses will be applied for DC charging from Solar generation. Set to False if you have an AC coupled battery and inverter losses will be applied when charging from solar. NB: This switch only applies when Predbat is modelling solar charging. All grid charging (regardless of inverter type) has to undergo an AC to DC conversion and so the inverter_loss % will be included in Predbat's model when charging from the grid. input_number.predbat_metric_battery_cycle ( expert mode ) This sets a 'virtual cost' in pence per kWh on using your battery for charging and discharging. Higher numbers will reduce battery cycles at the expense of using higher energy costs. In theory if you think your battery will last say 6000 complete cycles and cost you \u00a34000 and is 9.5kWh then each full charge and discharge cycle is 19kWh and so the cost per cycle is \u00a34000 / 19 / 6000 = 3.5p. Taking the 3.5p example, Predbat will apply a \"virtual cost\" of 3.5p to every kWh of charge and of discharge of the battery. This cost will be included in Predbat's cost optimisation plan when it decides whether to charge, discharge the battery or let the house run on grid import. NB: For clarity and to re-emphasise, the \"virtual cost\" will be applied to BOTH the cost calculation for charging AND for discharging the battery. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. Note that the cycle cost will not be included in the cost predictions that Predbat produces such as the Predbat HTML plan or Apex charts, its just a cost taken into account by Predbat at the planning stage when the plan is calculated. NB: Setting this to a non-zero value will increase your daily cost, but will reduce your home battery usage. Figures of around 0p-2p are recommended, the default is 0p per kWh. input_number.predbat_metric_battery_value_scaling ( expert mode ) A percentage value that can be used to scale the value of the energy in the battery at the end of the plan. The battery value is accounted for in the optimisations at the lowest future import rate including charging and inverter losses. A value of 1.0 means no change to this, while lower than 1.0 means to value future battery levels less, greater than 1.0 will value it more (and hence hold more charge at the end of the plan). input_number.metric_self_sufficiency ( export mode ) A price in pence per kWh used to skew the calculations towards self sufficiency. Effectively saying to Predbat to account for imports at a higher price than reality in the calculation and thus selecting plans with less import. If you want to be as self sufficient as possible then set this to the difference between your lowest import rate and the highest export rate to take exports that require additional import appear unprofitable. This setting will not impact the real calculated costs and is only used for plan selection. Values of 5-10p maybe worth trying if you prefer to avoid importing even if it saves you money.","title":"Battery loss options"},{"location":"customisation/#scaling-and-weight-options","text":"input_number.predbat_battery_rate_max_scaling is a percentage factor to adjust your maximum charge rate from that reported by the inverter. For example a value of 0.95 would be 95% and indicate charging at 5% slower than reported. For GE inverters the charge rate reports the max AC rate and thus needs to be reduced by inverter losses. You can try computing your discharge curve and check recommendations for changing this figure in the logfile. input_number.predbat_battery_rate_max_scaling_discharge is a percentage factor to adjust your maximum discharge rate from that reported by the inverter. For GE inverters the discharge rate is reported as the max AC rate and thus is fairly accurate. You can try computing your discharge curve and check recommendations for changing this figure in the logfile. switch.predbat_battery_capacity_nominal - When enabled Predbat uses the reported battery size from the GivTCP 'Battery Nominal Capacity' field rather than from the normal GivTCP reported 'Battery Capacity kWh' size. If your battery size is reported wrongly maybe try turning this on and see if it helps. input_number.predbat_load_scaling is a percentage Scaling factor applied to historical load, increase this if you want to be more pessimistic on future consumption. Use 1.0 to use exactly previous load data. A value of 1.1 for example would add 10% to historical load. input_number.predbat_load_scaling10 is a percentage Scaling factor applied to historical load only for the PV10% scenario (this is in addition to load_scaling above). This can be used to make the PV10% scenario take into account extra load usage and hence be more pessimistic while leaving the central scenario unchanged. The default is 1.1 meaning an extra 10% load is added. This will only have an impact if the PV 10% weighting is non-zero. input_number.predbat_load_scaling_saving is a percentage Scaling factor applied to historical load only during Octopus Saving sessions. This can be used to model your household cutting down on energy use inside a saving session (e.g. turning off a heat pump, deferring cooking until after the session, etc). input_number.predbat_pv_scaling is a percentage scaling factor applied to PV data, decrease this if you want to be more pessimistic on PV production vs Solcast. Use 1.0 to use exactly use the Solcast forecast generation data. A value of 0.9 for example would remove 10% from the Solcast generation forecast. input_number.predbat_pv_metric10_weight is the percentage weighting given to the Solcast 10% PV scenario in calculating solar generation. Use 0.0 to disable using the PV 10% in Predbat's forecast of solar generation. A value of 0.1 assumes that 1 in every 10 times we will get the Solcast 10% scenario, and 9 in every 10 times we will get the 'median' Solcast forecast. Predbat estimates solar generation for each half hour slot to be a pv_metric10_weight weighting of the Solcast 10% PV forecast to the Solcast Median forecast. A value of 0.15 is recommended.","title":"Scaling and weight options"},{"location":"customisation/#historical-load-data","text":"The historical load data is taken from the load sensor as configured in apps.yaml and the days are selected using days_previous and weighted using days_previous_weight in the same configuration file switch.predbat_load_filter_modal ( expert mode ) when enabled will automatically discard the lowest daily consumption day from the list of days to use (provided you have more than 1 day selected in days_previous). This can be used to ignore a single low usage day in your average calculation. By default is feature is enabled but can be disabled only in expert mode.","title":"Historical load data"},{"location":"customisation/#car-charging","text":"","title":"Car Charging"},{"location":"customisation/#car-charging-hold-options","text":"Car charging hold is a feature where you try to filter out previous car charging from your historical data so that future predictions are more accurate. When switch.predbat_car_charging_hold is enabled when for loads of above the power threshold input_number.predbat_car_charging_threshold are assumed to be car charging and input_number.predbat_car_charging_rate will be subtracted from the historical load data. For more accurate results can you use an incrementing energy sensor set with car_charging_energy in the apps.yaml configuration file. In this case when switch.predbat_car_charging_hold is enabled historical data will be subtracted from the load data instead of using the fixed threshold method. input_number.predbat_car_charging_energy_scale Is used to scale the car_charging_energy sensor, the default units are kWh so if you had a sensor in watts you might use 0.001 instead. input_number.predbat_car_charging_rate - Set to the car's charging rate in kW per hour (normally 7.5 for 7.5kWh), but will be pulled automatically from Octopus Energy integration if enabled for Octopus Intelligent. input_number.predbat_car_charging_loss gives the amount of energy lost when charging the car (load in the home vs energy added to the battery). A good setting is 0.08 which is 8%.","title":"Car charging hold options"},{"location":"customisation/#car-charging-plan-options","text":"Car charging planning - is only used if Intelligent Octopus isn't enabled and car_charging_planned is connected correctly. This feature allows Predbat to create a plan for when you car will charge, but you will have to create an automation to trigger your car to charge using binary_sensor.predbat_car_charging_slot if you want it to match the plan. select.predbat_car_charging_plan_time - When using Predbat-led planning set this to the time you want the car to be charged by switch.predbat_car_charging_plan_smart - When enabled (True) allows Predbat to allocate car charging slots to the cheapest times, when disabled (False) all low rate slots will be used in time order. input_number.predbat_car_charging_plan_max_price - When non-zero sets a maximum price per kWh to pay when charging your car, when disabled (0) all slots will be considered. switch.predbat_octopus_intelligent_charging when true enables the Intelligent Octopus charging feature which will make Predbat create a car charging plan which is taken from the Intelligent Octopus plan you must have set the octopus_intelligent_slot sensor in apps.yaml to enable this feature. If Octopus Intelligent Charging is enabled the switch switch.predbat_octopus_intelligent_ignore_unplugged ( expert mode ) can be used to prevent Predbat from assuming the car will be charging when the car is unplugged. This will only work correctly if car_charging_planned is set correctly in apps.yaml to detect your car being plugged in. Control how your battery behaves during car charging: switch.predbat_car_charging_from_battery - When True the car can drain the home battery, Predbat will manage the correct level of battery accordingly. When False home battery discharge will be prevented when your car charges, all load from the car and home will be from the grid. This is achieved by setting the discharge rate to 0 during car charging and to the maximum otherwise, hence if you turn this switch Off you won't be able to change your discharge rate outside Predbat. The home battery can still charge from the grid/solar in either case. Only use this if Predbat knows your car charging plan, e.g. you are using Intelligent Octopus or you use the car slots in Predbat to control your car charging. If your car does not have an SOC sensor and you are not using Octopus Intelligent you can set switch.predbat_car_charging_manual_soc to have Predbat create input_number.predbat_car_charging_manual_soc_kwh which will hold the cars current state of charge (soc) in kWh. You will need to manually set this to the cars current charge level before charging, Predbat will increment it during charging sessions but will not reset it automatically.","title":"Car charging plan options"},{"location":"customisation/#calculation-options","text":"See the Predbat mode setting as above for basic calculation options input_number.predbat_forecast_plan_hours is the minimum length of the Predbat charge plan, and is the number of hours after the first charge slot to include in the plan. The default of 24 hours is the recommended value (to match energy rate cycles). Note that the actual length of the Predbat plan will vary depending upon when the first charge slot is. switch.predbat_calculate_regions ( expert mode ) When True the a second pass of the initial thresholds is calculated in 4 hour regions before forming the detailed plan. Is True by default but can be turned off in expert mode. switch.predbat_calculate_discharge_oncharge ( expert mode ) When True calculated discharge slots will disable or move charge slots, allowing them to intermix. When False discharge slots will never be placed into charge slots. switch.predbat_set_discharge_during_charge - If turned off disables inverter discharge during charge slots, useful for multi-inverter setups to avoid cross charging when batteries are out of balance. switch.predbat_calculate_tweak_plan ( expert mode ) When True causes Predbat to perform a second pass optimisation across the next 8 charge and discharge windows in time order. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. switch.predbat_calculate_second_pass ( expert mode ) When True causes Predbat to perform a second pass optimisation across all the charge and discharge windows in time order. NOTE: This feature is quite slow and so may need a higher performance machine. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late.","title":"Calculation options"},{"location":"customisation/#battery-margins-and-metrics-options","text":"input_number.predbat_best_soc_keep is the minimum battery level in kWh that Predbat will to try to keep the battery above for the Predbat plan. This is a soft constraint only that's used for longer term planning and is ignored for the forthcoming first 4 hours of the plan. As this is not used for short-term planning it's possible for your SoC to drop below this - use input_number.predbat_best_soc_min if you need a hard SoC constraint that will always be maintained. It's usually good to have best_soc_keep set to a value above 0 to allow some margin in case you use more energy than planned between charge slots. input_number.predbat_best_soc_min ( expert mode ) sets the minimum charge level (in kWh) for charging during each slot and the minimum discharge level also (set to 0 if you want to skip some slots). If you set this to a non-zero value you will need to use the low rate threshold to control which slots you charge from or you may charge all the time. input_number.predbat_best_soc_max ( expert mode ) sets the maximum charge level (in kWh) for charging during each slot. A value of 0 disables this feature. input_number.combine_rate_threshold ( expert mode ) sets a threshold (in pence) to combine charge or discharge slots together into a single larger average rate slot. The default is 0p which disables this feature and all rate changes result in a new slot. switch.predbat_combine_charge_slots Controls if charge slots of > 30 minutes can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. Turn this off if you want to enable ad-hoc import during long periods of higher rates but you wouldn't charge normally in that period (e.g. pre-charge at day rate before a saving session). The default is disabled (False) switch.predbat_combine_discharge_slots ( expert mode ) Controls if discharge slots of > 30 minute can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. The default is disabled (False) input_number.predbat_metric_min_improvement ( expert mode ) sets the minimum cost improvement in pence that it's worth lowering the battery SOC % for. The default value is 0 which means this feature is disabled and the battery will be charged less if it's cost neutral. If you use input_number.predbat_pv_metric10_weight then you probably don't need to enable this as the 10% forecast does the same thing better Do not use if you have multiple charge windows in a given period as it won't lead to good results (e.g. Agile) You could even go to something like -0.1 to say you would charge less even if it cost up to 0.1p more (best used with metric10). input_number.predbat_metric_min_improvement_discharge ( expert mode ) Sets the minimum pence cost improvement it's worth doing a forced discharge (and export) for. A value of 0.1 is the default which prevents any marginal discharges. If you increase this value (e.g. you only want to discharge/forced export if definitely very profitable), then discharges will become less common and shorter. The value is in pence per 30 minutes of export time. input_number.predbat_rate_low_threshold ( expert mode ) When set to 0 (the default) Predbat will automatically look at the future import rates in the plan and determine the import rate threshold below which a slot will be considered to be a potential charging slot. If rate_low_threshold is set to a non zero value this will set the threshold below future average import rates as the minimum to consider for a charge window, e.g. setting to 0.8 = 80% of average rate. If you set this too low you might not get enough charge slots. If it's too high you might get too many in the 24-hour period which makes optimisation harder. input_number.predbat_rate_high_threshold ( expert mode ) When set to 0 (the default) Predbat will automatically look at the future export rates in the plan and determine the threshold above which a slot can be considered a potential exporting slot. If rate_high_threshold is set to a non zero value this will set the threshold above future average export rates as the minimum export rate to consider exporting for, e.g. setting to 1.2 = 20% above average rate. If you set this too high you might not get any export slots. If it's too low you might get too many in the 24-hour period. input_number.predbat_metric_future_rate_offset_import ( expert mode ) Sets an offset to apply to future import energy rates that are not yet published, best used for variable rate tariffs such as Agile import where the rates are not published until 4pm. If you set this to a positive value then Predbat will assume unpublished import rates are higher by the given amount. Setting this to 1 to 1.5p for example results in Predbat being a little more aggressive in the charging calculation for today - Predbat will charge the battery to a higher percentage than it would otherwise as it expects a cost benefit of using today's lower rates. NB: this can lead to higher costs and to some export if solar generation is better than forecast. input_number.predbat_metric_future_rate_offset_export ( expert mode ) Sets an offset to apply to future export energy rates that are not yet published, best used for variable rate tariffs such as Agile export where the rates are not published until 4pm. If you set this to a negative value then Predbat will assume unpublished export rates are lower by the given amount. switch.predbat_calculate_inday_adjustment ( expert mode ) Enabled by default with damping of 0.95. When enabled will calculate the difference between today's actual load and today's predicated load and adjust the rest of the days usage prediction accordingly. A scale factor can be set with input_number.predbat_metric_inday_adjust_damping ( expert mode ) to either scale up or down the impact of the in-day adjustment (lower numbers scale down its impact). The in-day adjustment factor can be seen in predbat.load_inday_adjustment and charted with the In Day Adjustment chart (template can be found in the charts template in Github). input_number.predbat_carbon_metric ( carbon enable ) When Carbon footprint tracking is enabled ( switch.predbat_carbon_enable ) you can specify a cost per Kg of CO2 used to weight the selection of plans. Values of around 10-200 will give varying outcomes to trade off cost vs carbon footprint of your system. Note: Carbon footprint tracking can only be enabled if apps.yaml is configured to point to the correct CO2 cost sensor","title":"Battery margins and metrics options"},{"location":"customisation/#inverter-control-options","text":"switch.predbat_set_status_notify Enables mobile notification about changes to the Predbat state (e.g. Charge, Discharge etc). On by default. switch.predbat_set_inverter_notify Enables mobile notification about all changes to inverter registers (e.g. setting window, turning discharge on/off). Off by default. switch.predbat_set_charge_low_power Enables low power charging mode where the max charge rate will be automatically determined by Predbat to be the lowest possible rate to meet the charge target. This is only really effective for charge windows >30 minutes. If this setting is turned on, its strongly recommended that you create a battery_power_charge_curve in apps.yaml as otherwise the low power charge may not reach the charge target in time. This setting is off by default. The YouTube video low power charging and charging curve explains how the low power charging works and shows how Predbat automatically creates it. switch.predbat_set_reserve_enable ( expert_mode ) When enabled the reserve setting is used to hold the battery charge level once it has been reached or to protect against discharging beyond the set limit. Enabled by default. switch.predbat_set_charge_freeze ( expert mode ) When enabled will allow Predbat to hold the current battery level while drawing from the grid/solar as an alternative to charging. Enabled by default. switch.predbat_set_discharge_freeze_only ( expert mode ) When enabled forced discharge is prevented, but discharge freeze can be used (if enabled) to export excess solar rather than charging the battery. This is useful with tariffs that pay you for solar exports but don't allow forced export (brown energy). If you have switch.predbat_inverter_hybrid set to False then if switch.predbat_inverter_soc_reset ( expert mode ) is set to True then the target SOC % will be reset to 100% outside a charge window. This may be required for AIO inverter to ensure it charges from solar. The default for this switch is True but it can be disabled in expert mode if need be. input_number.predbat_set_reserve_min Defines the reserve percentage to reset the reserve to when not in use, a value of 4 is the minimum and recommended to make use of the full battery. If you want to pre-prepare the battery to retain extra charge in the event of a high likelihood of a grid power outage such as storms predicted, you can increase set_reserve_min to 100%, and then change it back afterwards. (Obviously this is only any use if your inverter is wired to act as an Emergency Power Supply or whole-home backup 'island mode' on the GivEnergy AIO). switch.predbat_inverter_soc_reset ( expert mode ) When enabled the target SOC for the inverter(s) will be reset to 100% when a charge slot is not active, this can be used to workaround some firmware issues where the SOC target is used for solar charging as well as grid charging. When disabled the SOC % will not be changed after a charge slot. This is disabled by default.","title":"Inverter control options"},{"location":"customisation/#balance-inverters","text":"When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. The apps.yaml contains a setting balance_inverters_seconds which defines how often to run the balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds. Enable the switch.predbat_balance_inverters_enable switch in Home Assistant to enable this feature. switch.predbat_balance_inverters_charge - Is used to toggle on/off balancing while the batteries are charging switch.predbat_balance_inverters_discharge - Is used to toggle on/off balancing while the batteries are discharging switch.predbat_balance_inverters_crosscharge - Is used to toggle on/off balancing when the batteries are cross charging input_number.predbat_balance_inverters_threshold_charge - Sets the minimum percentage divergence of SoC during charge before balancing, default is 1% input_number.predbat_balance_inverters_threshold_discharge - Sets the minimum percentage divergence of SoC during discharge before balancing, default is 1%","title":"Balance Inverters"},{"location":"customisation/#cloud-coverage-and-load-variance","text":"Predbat tries to model passing clouds by modulating the PV forecast data on a 5 minute interval up and down while retaining the same predicted total. The amount of modulation depends on the difference between the PV50% (default) and PV10% scenario produced by Solcast. You can disable this feature ( expert mode only ) using switch.predbat_metric_cloud_enable Predbat tries to model changes in your household load by modulating the historical data on a 5 minute interval up and down while retaining the same predicted total. The amount of modulation depends on the standard deviation of your load predictions over the coming period (currently 4 hours). You can disable this feature ( expert mode only ) using switch.metric_load_divergence_enable","title":"Cloud coverage and load variance"},{"location":"customisation/#iboost-model-options","text":"Predbat has an 'iBoost model' that can be used to model using excess solar energy to heat hot water (or similar) instead of it being exported to the grid. This model can be used to control any solar diverter device, for example an iBoost (e.g. using a Fingerbot or similar device to physically press the 'boost' button on the iBoost), a MyEnergy Eddi (using the MyEnergy integration), or it can be used with a high power smart switch to turn on the hot water cylinder immersion heater when there is excess solar. So although Predbat refers to controlling an iBoost, you are not limited to just an iBoost device when using this model within Predbat. To turn the model on, switch.predbat_iboost_enable needs to be enabled. The predicted output from the iBoost solar diverter model is returned in predbat.iboost_best and is populated in the 'iBoost' column of the Predbat plan . When you turn on predbat_iBoost_enable the following additional Home Assistant entities are created by Predbat: switch.predbat_iboost_solar When enabled assumes the solar diverter will use solar power to boost the hot water heating. input_number.predbat_iboost_min_soc sets the minimum home battery SoC percentage that must be in the battery before the solar diverter is turned on. The default is 0 meaning hot water heating can occur regardless of what SoC level the battery is at. switch.predbat_iboost_gas When enabled will control the solar diverter to only operate when electric rates are lower than gas rates. This is useful if you have the choice to heat your hot water by immersion heater or by gas boiler. Note: Gas rates have to be configured in apps.yaml using metric_octopus_gas . input_number.predbat_iboost_gas_scale Sets the scaling of the gas rates (set in apps.yaml )used before comparing with electric rates, to account for gas boiler losses and efficiency. It should be set to the reciprocal of the boiler efficiency, i.e. for an 80% efficient gas boiler, set to 1.25. input_number.predbat_iboost_value_scaling Sets how to account for the value of iBoost units of energy. The default value of 0.75 means that each kWh of energy diverted is accounted for a 0.75 x The lowest future import rate. Higher values will generate plans with more solar diversion while lower values will generate less. A value of 0 means all diverted energy should be ignored in planning (assumed to be zero value). switch.predbat_iboost_charging If set to on, the solar diverter will only operate when the battery is charging (can be combined with iboost_gas or not). input_number.predbat_iboost_max_energy Sets the maximum energy in kWh that the solar diverter can consume during a day before turning off - default 3kWh. input_number.predbat_iboost_max_power Sets the maximum power in watts that the solar diverter will consume - default 2400. input_number.predbat_iboost_min_power Sets the minimum power in watts that the solar diverter will consume - default 500. You will see input_number.predbat_iboost_today entity which tracks the estimated kWh consumed by the solar diverter during the day, and resets at 11:30pm every night. The binary_sensor.predbat_iboost_active entity will be enabled when the solar diverter should be active, can be used for automations to trigger the immersion heater boost. Example template automation for controlling the solar diverter: alias: Solar Diverter description: \"Start/stop solar diverter based on Predbat determined slots\" trigger: - platform: state entity_id: - binary_sensor.predbat_iboost_active action: - choose: - conditions: - condition: state entity_id: binary_sensor.predbat_iboost_active state: \"True\" sequence: <commands to turn on your solar diverter> - conditions: - condition: state entity_id: binary_sensor.predbat_iboost_active state: \"False\" sequence: <commands to turn off your solar diverter> mode: single If you have an incrementing sensor that tracks the solar diverter energy usage then to make your predictions more accurate you should set the iboost_energy_today sensor in apps.yaml to point to it, and optionally set iboost_energy_scaling if the sensor isn't in kWh (e.g. set to 0.001 if the sensor is in Watts). The sensor should be an incrementing sensor which can reset at midnight or not.","title":"iBoost model options"},{"location":"customisation/#holiday-mode","text":"When you go away you are likely to use less electricity and so the previous load data will be quite pessimistic. Using the Home Assistant entity input_number.predbat_holiday_days_left you can set the number of full days that you will be away for (including today). The number will count down by 1 day at midnight until it gets back to zero. Whilst holiday days left is non-zero, Predbat's 'holiday mode' is active. When Predbat's 'holiday mode' is active the historical load data will be taken from yesterday's data (1 day ago) rather than from the days_previous setting in apps.yaml . This means Predbat will adjust more quickly to the new usage pattern. If you have been away for a longer period of time (more than your normal days_previous setting) then obviously it's going to take longer for the historical data to catch up, you could then enable holiday mode for another 7 days after your return. In summary: For short holidays set holiday_days_left to the number of full days you are away, including today but excluding the return day For longer holidays set holiday_days_left to the number of days you are away plus another 7 days until the data catches back up","title":"Holiday mode"},{"location":"customisation/#manual-control","text":"In some cases you may want to override Predbat's planned behaviour and make a decision yourself. One way to achieve this is to put Predbat into read-only mode using switch.predbat_set_read_only . When going to read only mode the inverter will be put back to the default settings and you should then control it yourself using GivTCP or the App appropriate to your inverter. A better alternative in some cases is to tell Predbat what you want it to do using the manual force features: You can force the battery to be charged within a 30 minute slot by using the select.predbat_manual_charge selector. Pick the 30 minute slot you wish to charge in, and Predbat will change the plan to charge in the selected slot. You can select multiple slots by using the drop down menu more than once. When Predbat updates the plan you will see the slots picked to be charging slots in the current value of this selector, and annotated in the Predbat HTML plan with an upside down 'F' symbol. You can cancel a force slot by selecting the slot time again (it will be shown in square brackets to indicate its already selected). The select.predbat_manual_discharge selector can be used to manually force a discharge within a 30 minute slot in the same way as the manual force charge feature. The force discharge takes priority over force charging. The select.predbat_manual_idle selector is used to force Predbat to idle mode during a 30 minute slot, this implies no forced grid charging or discharging of the battery. House load will be supplied from solar, or from the battery if there is insufficient solar, or grid import if there is insufficient battery charge. This is described as 'ECO' Mode for GivEnergy inverters but other inverters use different terminology. The select.predbat_manual_freeze_charge selector is used to force Predbat to freeze charge during a 30 minute slot, this implies the battery will not discharge and hold at the current level. The grid maybe used if solar is not enough to cover the load. The select.predbat_manual_freeze_discharge selector is used to force Predbat to freeze discharge during a 30 minute slot, this implies the battery will not charge but will still discharge for the house load. Any solar will be exported to the grid. When you use the manual override features you can only select times in the next 18 hours, the overrides will be removed once their time slot expires (they do not repeat). _NOTE: once you select a time slot from any of the select.predbat_manual_ selectors the selected time slot is immediately marked on the drop-down and you can then make another change. Predbat still has to update the plan which it will be doing so in the background, and this can take a few minutes to run (depending on the speed and power of the PC you are running Home Assistant on) so don't be surprised why the Predbat plan doesn't change immediately - remember you can see the date/time the plan was last updated on the first row of the plan. CAUTION: If you leave Predbat turned off for a long period of time then the override timeslots could end up repeating when you restart","title":"Manual control"},{"location":"customisation/#debug","text":"switch.predbat_debug_enable when on prints lots of debug, leave off by default switch.predbat_plan_debug ( expert mode ) when enabled adds some extra debug to the Predbat HTML plan - see Predbat Plan debug mode for more details.","title":"Debug"},{"location":"developing/","text":"Developing on Predbat Creating a fork Using GitHub, take a fork of Predbat - effectively, this creates a copy of the main repository, but in your personal space. There, you can create branches to develop on. Pull requests Once you've completed your work on your branch, you can create a pull request (PR) to merge your work back in to the main branch of Predbat. This PR should describe the work you've done in a way that makes it easy for someone to review your work, and either add comments or approve it. Unit level testing Note you will need to install python_matplotlib (e.g. brew install python_matplotlib or pip install matplotlib) Predbat now has some unit level tests, to run them on your local machine: Create a test directory somewhere Copy apps.yaml to your test area Run python3 /path/6adb4f0d_predbat/unit_test.py If the tests fail then debug them. For coverage analysis installed the 'coverage' library with Python python3 -m coverage run /path/6adb4f0d_predbat/unit_test.py python3 -m coverage html Open htmlcov/index.html in your web browser Editing the code There are at least a couple of ways of working on the code, outlined here. Using GitHub Codespaces What is GitHub Codespaces? Especially if you don't need to have a running Home Assistant system to make the changes you're interested in (e.g. for documentation, quick fixes etc.) a really easy way to work on the code is using GitHub Codespaces. GitHub Codespaces gives you a full featured development environment. This includes: A full IDE (a code editor), Visual Studio Code, which can be: Run in the browser, requiring no additional software to be installed Run in a virtual machine (VM) running in the cloud which can connect to a copy of VS Code installed on your own machine A terminal where you can run commands against your codebase e.g. running pre-commit to run the automatic code quality checks, linting files, etc. Software like mkdocs to re-generate the documentation files (and other software we may include) pre-installed in it The Codespaces environment is entirely separate from your HA installation, so does not require any modification to your HA setup to work with it. However, you are modifying code in an environment where you can't see HA running, so it's great for things like updating documentation, or writing automated tests, but not if you need to see your changes live within HA. Running GitHub Codespaces You may with to first install VS Code on your machine, which does offer some benefits compared to running Codespaces in the cloud, but this is certainly not essential, and you'll see the same code editor and terminal, and you'll have the same commands and Python packages available in the terminal. The local installation is better in a small number of scenarios e.g. if you need to connect from your browser to a specific port on the VM, such as if you're working on the documentation. Importantly, even if you do a local install of VS Code and use that to edit your code within GitHub, the terminal, the code you're editing any commands that you run, and any processes like mkdocs that you may browse to are all running in the Codespaces VM. Your local VS Code is connected to the VM through SSH. It will appear as if the code, the terminal etc. are local, but they are not. Running a local VS Code install connected to Codespaces will not install Python, Python packages or anything else on your local machine. Now, from your fork or branch, click on the Code button, and select the Codespaces tab. You can create multiple environments, or use a single environment and swap between branches in it. Once you start your Codespaces environment, it'll take a minute to create a VM for you, and to install the software we've asked it to install in there. It will also clone your repository and chosen branch into it for you, and the VM will be authenticated with GitHub so you can commit and push straight back to your fork of Predbat on GitHub. You can choose between running the IDE in the browser, or having your local installation of VS Code connect to the environment that GitHub Codespaces has created for you. The Codespaces will be already set up with Python, along with various Python packages (as defined in requirements.txt ). The environment is configured through the config in .devcontainer/devcontainer.json . Developing locally within Home Assistant To be documented later. Working on the documentation Overview of the Predbat documentation The documentation site at https://springfall2008.github.io/batpred/ is built from Markdown files in this repo. The Markdown files used to build the documentation are in the docs/ folder, with additional config for building the documentation site in mkdocs.yml . If you're making minor changes to the documentation e.g. fixing a spelling, you can just edit the Markdown files directly, and it will be pushed to the main documentation site as outlined in the documentation build process section below, once your changes are merged into main and released. However, if you're doing more than that, e.g. adding new sections, working with lists etc. we recommend you follow the instructions in working locally on the documentation below, as this will give you a live preview of what the documentation will look like once it's build and published. This will avoid any unexpected results appearing in the main documentation site. If you are adding a new file, please ensure you add that file to mkdocs.yml , so it will be linked from the menu in the sidebar. The documentation build process The documentation for the site is built using mkdocs , which will already be installed if you're using a GitHub Codespaces environment. For a detailed explanation of mkdocs features, please read the mkdocs documentation . As briefly covered above, mkdocs.yml contains the config for defining the documentation site, and the documentation is built by mkdocs reading the Markdown files in the docs/ folder, and creating HTML files from those files. mkdocs can be used locally for previewing, but is also used as part of the documentation build process that publishes the official documentation site. The publishing of the documentation is triggered by a GitHub action, as defined in .github/workflows/main.yml . In short, after configuring the build environment, mkdocs builds the site, then pushes the HTML produced to the gh-pages branch, overwriting whatever was there previously. GitHub will then detect a new commit on the gh-pages branch, and that will trigger another action to run (as defined by GitHub). This action will take the HTML files on the gh-pages branch, and will make it available at https://springfall2008.github.io/batpred/ . The documentation will be published as it is, with no further review process, so please ensure you check the documentation that will be built before merging it in. Working locally on the documentation If you are making changes to the documentation, you can see a live preview version of the documentation as it will be built and deployed. This preview version is local to your environment, is temporary, and does not impact the published version in any way. It's recommended for anything other than simple changes like fixing spellings, adding a sentence or two. Things like new sections, lists, new pages etc. are best previewed due to the complications of various Markdown standards, as what works on GitHub READMEs, for example, does not necessarily work with the published documentation site (which follows a more strict Markdown standard). There are a number of terminal commands that you can use in the Codespaces environment. Open a terminal window in Codespaces by choosing menu > Terminal > New Terminal. To run the live preview, enter mkdocs serve in the terminal window - this will cause mkdocs to build a local temporary version of the documentation site, and to temporarily publish it on port 8000 - it will show the link where you can access the documentation. Also, it will watch the docs/ folder, and any time you change the files, it will rebuild the site, allowing you to see changes to the Markdown files in your browser within a few seconds. The site will continue being served until you press CTRL-C to end the mkdocs serve command. Note, accessing the site published by mkdocs serve is not possible if you are using Codespaces to run VS Code in the browser, but it is possible if you're using it via VS Code running locally, due to the way in which ports on your environment are shared. Coding standards Expected standards This section will be enhanced following discussions as we go. However, here's a starting point: Variable names should be lower_case_with_underscores - this fits with most existing variables, is a common standard for Python code, and also allows the spell checking to check individual words within the variable name. Enforced standards Certain coding standards are enforced within the repository. Some of them can be auto-fixed, if you do a commit that fails one of those standards; other issues will need fixing first, as your pull request won't merge in GitHub until it passes. These standards are enforced by pre-commit , a tool which is able to run other tools to check, and potentially fix (for certain types of issues) any mistakes you've made. The .pre-commit-config.yaml file lists all checks that are currently carried out within the repository. Bear in mind that these checks are done according to the config within that file in the branch that you are working in, so if someone adds a new check, or changes some of the related settings, it won't apply on your branch until you've merged in their changes. Some of the tools have their own related config files: CSpell - .cspell.json and .cspell/custom-dictionary-workspace.txt Black - pyproject.toml Markdown Lint - .markdownlint.jsonc Additional notes on some of the standards: CSpell - if you have the spelling check failing due to a word which is valid but is not in the in-built dictionary, please add that word to the end of .cspell/custom-dictionary-workspace.txt and stage those changes. The spell-check should then pass. Note, the dictionary file will get re-sorted alphabetically when you run pre-commit , so you'll need to re-stage the file after it's been sorted. Running the checks locally If you are using a Codespaces environment, you'll already have pre-commit installed automatically. You can run it manually, or automatically. Running pre-commit manually: In a terminal window, running pre-commit will run all the checks against any files that you have modified and staged. Alternatively, running pre-commit run --all-files will run all the checks against all files within the repository. Note that if pre-commit makes any changes to any files when it runs, those changes will not be staged. You will need to stage those changes too before committing. You may notice pre-commit mentioning about stashing changes - this is because when it runs, any changes that aren't staged are stashed (saved away temporarily) so it runs against only the staged changes; after it has run, it pulls back those stashed changes, so they appear again (still unstaged). Running pre-commit automatically: If you run pre-commit install in a terminal window it will install a pre-commit hook - this is a file which tells git to run some code each type you do a particular action (a pre-commit hook runs at the start of processing a commit, but there are other hooks e.g. pre-push). Now, any time you perform a commit, pre-commit will run automatically on the staged files - this is a handy way of making sure that you don't accidentally commit code which will fail checks later. You can still run it manually as outlined above, in addition to the automated checks that it will do on commits. Running the checks from within GitHub When commits are done on pull requests, and in any other scenarios added to the on section of .github/workflows/linting.yml , the GitHub Actions in that file will run. In particular, the pre-commit.ci lite action will run. This uses the code here to run the same checks that get run locally (as described in the .pre-commit-config.yaml file). This will cause your commit, branch or pull request to get either a green tick or a red cross against it, to show whether the code passed the checks or not. This will happen automatically, when you push code on a branch that has a pull request. In addition, if pre-commit finds any errors that it is able to fix (e.g. a missing blank line at the end of a file, or trailing whitespace), it will do a commit of its own to fix those problems, and will push that commit back to your branch on GitHub. This will then trigger another run, which should now pass. Note : This means that pre-commit will be adding commits to your branch - this will need you to be pulling changes from GitHub so you pick up the changes that have been added by pre-commit otherwise you will hit a problem when you next try to push a commit on your branch. You can pull in those changes by running git pull , which is the equivalent of running git fetch then git merge . This is no different to working on the same branch with another developer, but it will be different to the workflow most of us have when working on Predbat.","title":"Developing on Predbat"},{"location":"developing/#developing-on-predbat","text":"","title":"Developing on Predbat"},{"location":"developing/#creating-a-fork","text":"Using GitHub, take a fork of Predbat - effectively, this creates a copy of the main repository, but in your personal space. There, you can create branches to develop on.","title":"Creating a fork"},{"location":"developing/#pull-requests","text":"Once you've completed your work on your branch, you can create a pull request (PR) to merge your work back in to the main branch of Predbat. This PR should describe the work you've done in a way that makes it easy for someone to review your work, and either add comments or approve it.","title":"Pull requests"},{"location":"developing/#unit-level-testing","text":"Note you will need to install python_matplotlib (e.g. brew install python_matplotlib or pip install matplotlib) Predbat now has some unit level tests, to run them on your local machine: Create a test directory somewhere Copy apps.yaml to your test area Run python3 /path/6adb4f0d_predbat/unit_test.py If the tests fail then debug them. For coverage analysis installed the 'coverage' library with Python python3 -m coverage run /path/6adb4f0d_predbat/unit_test.py python3 -m coverage html Open htmlcov/index.html in your web browser","title":"Unit level testing"},{"location":"developing/#editing-the-code","text":"There are at least a couple of ways of working on the code, outlined here.","title":"Editing the code"},{"location":"developing/#using-github-codespaces","text":"","title":"Using GitHub Codespaces"},{"location":"developing/#what-is-github-codespaces","text":"Especially if you don't need to have a running Home Assistant system to make the changes you're interested in (e.g. for documentation, quick fixes etc.) a really easy way to work on the code is using GitHub Codespaces. GitHub Codespaces gives you a full featured development environment. This includes: A full IDE (a code editor), Visual Studio Code, which can be: Run in the browser, requiring no additional software to be installed Run in a virtual machine (VM) running in the cloud which can connect to a copy of VS Code installed on your own machine A terminal where you can run commands against your codebase e.g. running pre-commit to run the automatic code quality checks, linting files, etc. Software like mkdocs to re-generate the documentation files (and other software we may include) pre-installed in it The Codespaces environment is entirely separate from your HA installation, so does not require any modification to your HA setup to work with it. However, you are modifying code in an environment where you can't see HA running, so it's great for things like updating documentation, or writing automated tests, but not if you need to see your changes live within HA.","title":"What is GitHub Codespaces?"},{"location":"developing/#running-github-codespaces","text":"You may with to first install VS Code on your machine, which does offer some benefits compared to running Codespaces in the cloud, but this is certainly not essential, and you'll see the same code editor and terminal, and you'll have the same commands and Python packages available in the terminal. The local installation is better in a small number of scenarios e.g. if you need to connect from your browser to a specific port on the VM, such as if you're working on the documentation. Importantly, even if you do a local install of VS Code and use that to edit your code within GitHub, the terminal, the code you're editing any commands that you run, and any processes like mkdocs that you may browse to are all running in the Codespaces VM. Your local VS Code is connected to the VM through SSH. It will appear as if the code, the terminal etc. are local, but they are not. Running a local VS Code install connected to Codespaces will not install Python, Python packages or anything else on your local machine. Now, from your fork or branch, click on the Code button, and select the Codespaces tab. You can create multiple environments, or use a single environment and swap between branches in it. Once you start your Codespaces environment, it'll take a minute to create a VM for you, and to install the software we've asked it to install in there. It will also clone your repository and chosen branch into it for you, and the VM will be authenticated with GitHub so you can commit and push straight back to your fork of Predbat on GitHub. You can choose between running the IDE in the browser, or having your local installation of VS Code connect to the environment that GitHub Codespaces has created for you. The Codespaces will be already set up with Python, along with various Python packages (as defined in requirements.txt ). The environment is configured through the config in .devcontainer/devcontainer.json .","title":"Running GitHub Codespaces"},{"location":"developing/#developing-locally-within-home-assistant","text":"To be documented later.","title":"Developing locally within Home Assistant"},{"location":"developing/#working-on-the-documentation","text":"","title":"Working on the documentation"},{"location":"developing/#overview-of-the-predbat-documentation","text":"The documentation site at https://springfall2008.github.io/batpred/ is built from Markdown files in this repo. The Markdown files used to build the documentation are in the docs/ folder, with additional config for building the documentation site in mkdocs.yml . If you're making minor changes to the documentation e.g. fixing a spelling, you can just edit the Markdown files directly, and it will be pushed to the main documentation site as outlined in the documentation build process section below, once your changes are merged into main and released. However, if you're doing more than that, e.g. adding new sections, working with lists etc. we recommend you follow the instructions in working locally on the documentation below, as this will give you a live preview of what the documentation will look like once it's build and published. This will avoid any unexpected results appearing in the main documentation site. If you are adding a new file, please ensure you add that file to mkdocs.yml , so it will be linked from the menu in the sidebar.","title":"Overview of the Predbat documentation"},{"location":"developing/#the-documentation-build-process","text":"The documentation for the site is built using mkdocs , which will already be installed if you're using a GitHub Codespaces environment. For a detailed explanation of mkdocs features, please read the mkdocs documentation . As briefly covered above, mkdocs.yml contains the config for defining the documentation site, and the documentation is built by mkdocs reading the Markdown files in the docs/ folder, and creating HTML files from those files. mkdocs can be used locally for previewing, but is also used as part of the documentation build process that publishes the official documentation site. The publishing of the documentation is triggered by a GitHub action, as defined in .github/workflows/main.yml . In short, after configuring the build environment, mkdocs builds the site, then pushes the HTML produced to the gh-pages branch, overwriting whatever was there previously. GitHub will then detect a new commit on the gh-pages branch, and that will trigger another action to run (as defined by GitHub). This action will take the HTML files on the gh-pages branch, and will make it available at https://springfall2008.github.io/batpred/ . The documentation will be published as it is, with no further review process, so please ensure you check the documentation that will be built before merging it in.","title":"The documentation build process"},{"location":"developing/#working-locally-on-the-documentation","text":"If you are making changes to the documentation, you can see a live preview version of the documentation as it will be built and deployed. This preview version is local to your environment, is temporary, and does not impact the published version in any way. It's recommended for anything other than simple changes like fixing spellings, adding a sentence or two. Things like new sections, lists, new pages etc. are best previewed due to the complications of various Markdown standards, as what works on GitHub READMEs, for example, does not necessarily work with the published documentation site (which follows a more strict Markdown standard). There are a number of terminal commands that you can use in the Codespaces environment. Open a terminal window in Codespaces by choosing menu > Terminal > New Terminal. To run the live preview, enter mkdocs serve in the terminal window - this will cause mkdocs to build a local temporary version of the documentation site, and to temporarily publish it on port 8000 - it will show the link where you can access the documentation. Also, it will watch the docs/ folder, and any time you change the files, it will rebuild the site, allowing you to see changes to the Markdown files in your browser within a few seconds. The site will continue being served until you press CTRL-C to end the mkdocs serve command. Note, accessing the site published by mkdocs serve is not possible if you are using Codespaces to run VS Code in the browser, but it is possible if you're using it via VS Code running locally, due to the way in which ports on your environment are shared.","title":"Working locally on the documentation"},{"location":"developing/#coding-standards","text":"","title":"Coding standards"},{"location":"developing/#expected-standards","text":"This section will be enhanced following discussions as we go. However, here's a starting point: Variable names should be lower_case_with_underscores - this fits with most existing variables, is a common standard for Python code, and also allows the spell checking to check individual words within the variable name.","title":"Expected standards"},{"location":"developing/#enforced-standards","text":"Certain coding standards are enforced within the repository. Some of them can be auto-fixed, if you do a commit that fails one of those standards; other issues will need fixing first, as your pull request won't merge in GitHub until it passes. These standards are enforced by pre-commit , a tool which is able to run other tools to check, and potentially fix (for certain types of issues) any mistakes you've made. The .pre-commit-config.yaml file lists all checks that are currently carried out within the repository. Bear in mind that these checks are done according to the config within that file in the branch that you are working in, so if someone adds a new check, or changes some of the related settings, it won't apply on your branch until you've merged in their changes. Some of the tools have their own related config files: CSpell - .cspell.json and .cspell/custom-dictionary-workspace.txt Black - pyproject.toml Markdown Lint - .markdownlint.jsonc Additional notes on some of the standards: CSpell - if you have the spelling check failing due to a word which is valid but is not in the in-built dictionary, please add that word to the end of .cspell/custom-dictionary-workspace.txt and stage those changes. The spell-check should then pass. Note, the dictionary file will get re-sorted alphabetically when you run pre-commit , so you'll need to re-stage the file after it's been sorted.","title":"Enforced standards"},{"location":"developing/#running-the-checks-locally","text":"If you are using a Codespaces environment, you'll already have pre-commit installed automatically. You can run it manually, or automatically. Running pre-commit manually: In a terminal window, running pre-commit will run all the checks against any files that you have modified and staged. Alternatively, running pre-commit run --all-files will run all the checks against all files within the repository. Note that if pre-commit makes any changes to any files when it runs, those changes will not be staged. You will need to stage those changes too before committing. You may notice pre-commit mentioning about stashing changes - this is because when it runs, any changes that aren't staged are stashed (saved away temporarily) so it runs against only the staged changes; after it has run, it pulls back those stashed changes, so they appear again (still unstaged). Running pre-commit automatically: If you run pre-commit install in a terminal window it will install a pre-commit hook - this is a file which tells git to run some code each type you do a particular action (a pre-commit hook runs at the start of processing a commit, but there are other hooks e.g. pre-push). Now, any time you perform a commit, pre-commit will run automatically on the staged files - this is a handy way of making sure that you don't accidentally commit code which will fail checks later. You can still run it manually as outlined above, in addition to the automated checks that it will do on commits.","title":"Running the checks locally"},{"location":"developing/#running-the-checks-from-within-github","text":"When commits are done on pull requests, and in any other scenarios added to the on section of .github/workflows/linting.yml , the GitHub Actions in that file will run. In particular, the pre-commit.ci lite action will run. This uses the code here to run the same checks that get run locally (as described in the .pre-commit-config.yaml file). This will cause your commit, branch or pull request to get either a green tick or a red cross against it, to show whether the code passed the checks or not. This will happen automatically, when you push code on a branch that has a pull request. In addition, if pre-commit finds any errors that it is able to fix (e.g. a missing blank line at the end of a file, or trailing whitespace), it will do a commit of its own to fix those problems, and will push that commit back to your branch on GitHub. This will then trigger another run, which should now pass. Note : This means that pre-commit will be adding commits to your branch - this will need you to be pulling changes from GitHub so you pick up the changes that have been added by pre-commit otherwise you will hit a problem when you next try to push a commit on your branch. You can pull in those changes by running git pull , which is the equivalent of running git fetch then git merge . This is no different to working on the same branch with another developer, but it will be different to the workflow most of us have when working on Predbat.","title":"Running the checks from within GitHub"},{"location":"devices/","text":"Support 3rd party devices/integrations Wallbox Pulsar https://www.home-assistant.io/integrations/wallbox/ Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in car_charging_energy: 're:sensor.wallbox_portal_added_energy' car_charging_planned: - 're:sensor.wallbox_portal_status_description' Wallbox works with Octopus Intelligent GO, and can be triggered via Octopus themselves or via a HA automation linked to the Predbat slot sensor Zappi https://github.com/CJNE/ha-myenergi Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in car_charging_energy: 're:sensor.myenergi_zappi_[0-9a-z]+_charge_added_session' car_charging_planned: - 're:sensor.myenergi_zappi_[0-9a-z]+_plug_status)' Tesla https://github.com/alandtse/tesla Can be used to extract the cars current SOC and Charge limit. Also can be used to control the cars charging with an automation linked to the Predbat slot sensor car_charging_limit: - 're:number.xxx_charge_limit' car_charging_soc: - 're:sensor.xxx_battery' Ohme https://github.com/dan-r/HomeAssistant-Ohme Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in. Also can be used with Octopus Intelligent GO to map out the cars charging slots into Predbat car charging energy car_charging_energy: 'sensor.ohme_session_energy' Octopus Intelligent GO octopus_intelligent_slot: 'binary_sensor.ohme_slot_active' octopus_ready_time: 'time.ohme_target_time' octopus_charge_limit: 'number.ohme_target_percent' Determine if the car is charging now Normally not recommended if you are on Intelligent GO, but can be useful for ad-hoc charging not planned via Predbat car_charging_now: - 'binary_sensor.ohme_car_charging' Octopus Energy https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy Can be used for energy rates, car charging and saving sessions For energy rate metric_octopus_import: 're:(sensor.(octopus_energy_|)electricity_[0-9a-z]+_[0-9a-z]+_current_rate)' metric_octopus_export: 're:(sensor.(octopus_energy_|)electricity_[0-9a-z]+_[0-9a-z]+_export_current_rate)' For Octopus Intelligent GO octopus_intelligent_slot: 're:(binary_sensor.octopus_energy([0-9a-z_]+|)_intelligent_dispatching)' octopus_ready_time: 're:(time.octopus_energy([0-9a-z_]+|)_intelligent_ready_time)' octopus_charge_limit: 're:(number.octopus_energy([0-9a-z_]+|)_intelligent_charge_limit)' For Octopus Saving sessions octopus_saving_session: 're:(binary_sensor.octopus_energy([0-9a-z_]+|)_saving_session(s|))' octopus_saving_session_octopoints_per_penny: 8 Nordpool For adjustment to Octopus Intelligent This is built into Predbat, see the apps.yaml configuration guide As your energy rates (e.g. for those in Norway) https://github.com/custom-components/nordpool/ Can be linked to Predbat to provide energy rates in your region e.g: metric_octopus_import: 'sensor.nordpool_kwh_oslo_eur_3_10_025' Solcast https://github.com/oziee/ha-solcast-solar For solar forecast data pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4))","title":"Support 3rd party devices/integrations"},{"location":"devices/#support-3rd-party-devicesintegrations","text":"","title":"Support 3rd party devices/integrations"},{"location":"devices/#wallbox-pulsar","text":"https://www.home-assistant.io/integrations/wallbox/ Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in car_charging_energy: 're:sensor.wallbox_portal_added_energy' car_charging_planned: - 're:sensor.wallbox_portal_status_description' Wallbox works with Octopus Intelligent GO, and can be triggered via Octopus themselves or via a HA automation linked to the Predbat slot sensor","title":"Wallbox Pulsar"},{"location":"devices/#zappi","text":"https://github.com/CJNE/ha-myenergi Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in car_charging_energy: 're:sensor.myenergi_zappi_[0-9a-z]+_charge_added_session' car_charging_planned: - 're:sensor.myenergi_zappi_[0-9a-z]+_plug_status)'","title":"Zappi"},{"location":"devices/#tesla","text":"https://github.com/alandtse/tesla Can be used to extract the cars current SOC and Charge limit. Also can be used to control the cars charging with an automation linked to the Predbat slot sensor car_charging_limit: - 're:number.xxx_charge_limit' car_charging_soc: - 're:sensor.xxx_battery'","title":"Tesla"},{"location":"devices/#ohme","text":"https://github.com/dan-r/HomeAssistant-Ohme Can be used both for Car Charging Hold feature (to filter out previous car charging) and to determine if the car is plugged in. Also can be used with Octopus Intelligent GO to map out the cars charging slots into Predbat car charging energy car_charging_energy: 'sensor.ohme_session_energy' Octopus Intelligent GO octopus_intelligent_slot: 'binary_sensor.ohme_slot_active' octopus_ready_time: 'time.ohme_target_time' octopus_charge_limit: 'number.ohme_target_percent' Determine if the car is charging now Normally not recommended if you are on Intelligent GO, but can be useful for ad-hoc charging not planned via Predbat car_charging_now: - 'binary_sensor.ohme_car_charging'","title":"Ohme"},{"location":"devices/#octopus-energy","text":"https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy Can be used for energy rates, car charging and saving sessions For energy rate metric_octopus_import: 're:(sensor.(octopus_energy_|)electricity_[0-9a-z]+_[0-9a-z]+_current_rate)' metric_octopus_export: 're:(sensor.(octopus_energy_|)electricity_[0-9a-z]+_[0-9a-z]+_export_current_rate)' For Octopus Intelligent GO octopus_intelligent_slot: 're:(binary_sensor.octopus_energy([0-9a-z_]+|)_intelligent_dispatching)' octopus_ready_time: 're:(time.octopus_energy([0-9a-z_]+|)_intelligent_ready_time)' octopus_charge_limit: 're:(number.octopus_energy([0-9a-z_]+|)_intelligent_charge_limit)' For Octopus Saving sessions octopus_saving_session: 're:(binary_sensor.octopus_energy([0-9a-z_]+|)_saving_session(s|))' octopus_saving_session_octopoints_per_penny: 8","title":"Octopus Energy"},{"location":"devices/#nordpool","text":"","title":"Nordpool"},{"location":"devices/#for-adjustment-to-octopus-intelligent","text":"This is built into Predbat, see the apps.yaml configuration guide","title":"For adjustment to Octopus Intelligent"},{"location":"devices/#as-your-energy-rates-eg-for-those-in-norway","text":"https://github.com/custom-components/nordpool/ Can be linked to Predbat to provide energy rates in your region e.g: metric_octopus_import: 'sensor.nordpool_kwh_oslo_eur_3_10_025'","title":"As your energy rates (e.g. for those in Norway)"},{"location":"devices/#solcast","text":"https://github.com/oziee/ha-solcast-solar For solar forecast data pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4))","title":"Solcast"},{"location":"energy-rates/","text":"Energy rates Predbat needs to know what your Import and (optionally) Export rates are so it can plan the optimal way to use your battery. Your Import and Export rates can be simple flat rates, more complex time of day tariffs (e.g. Economy 7, Octopus Flux), or daily/half-hourly rates that track electricity market prices (e.g. Octopus Agile or Tracker). Energy rates are all configured in the apps.yaml file that's stored in either the /addon_configs/46f69597_appdaemon-predbat/apps or the /config/appdaemon/apps/batpred/config/ directory depending on what type of Predbat installation method you have used . You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to edit this file - see editing configuration files within Home Assistant if you need to install an editor. Octopus Energy integration If your electricity supplier is Octopus Energy then the simplest way to provide Predbat with your electricity pricing information is to use the Octopus Energy integration . The Octopus Energy integration connects to your Octopus Energy account and retrieves the tariffs you are on, and the current tariff rates. If you change tariff within Octopus the integration will automatically retrieve the updated tariff information, and as tariff prices change, again they are automatically retrieved. The integration also provides support for Intelligent Octopus charging to support car charging. Follow the instructions provided in the Octopus Energy integration documentation to install and setup the integration. Once installed, you will need to configure the integration (go to Settings / Devices & Services / Integrations / Octopus Energy then click 'Configure') and provide the integration with your 'Octopus API key' (that you obtain from your Octopus account : Personal Details / API access). CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following Octopus Energy events which are disabled by default when the integration is installed: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates event.octopus_energy_gas_xxxxxxxx_previous_day_rates event.octopus_energy_gas_xxxxxxxx_current_day_rates event.octopus_energy_gas_xxxxxxxx_next_day_rates To enable the above events: Go to Settings / Devices & Services / Integrations, choose Octopus Energy, then xx entities You will see a list of entities (and events) supplied by the Octopus integration Click the 'Filter' symbol on the top right hand corner (a series of lines in a downwards pointing arrow) and make sure all the options are selected Then in the left hand-side search entities box, type \"current_day\" Click on the first event that comes up, check the name is the right one Click the cog wheel, then you should see the option to enable the event Click the option to enable the event and press 'Update' to make the change Repeat this for the other events. The gas rates are only required if you have a gas boiler, an iBoost, and are using Predbat to determine whether it's cheaper to heat your hot water with the iBoost or via gas. Verify that the integration is working correctly in Home Assistant by going to Developer Tools / States, and enter 'octopus' in the 'Filter entities' box. Confirm that the Octopus entities are being populated correctly. Configuring Predbat to use the Octopus Energy integration The following configuration items in apps.yaml are used to configure Predbat to use the Octopus Energy integration. They are set to a regular expression and should be auto-discovered so that Predbat automatically uses the Octopus Energy integration, but you can comment out the regular expression lines to disable, or you set them manually. metric_octopus_import - Import rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_electricity_ _current_rate metric_octopus_export - Export rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_electricity_ _export_current_rate metric_octopus_gas - Gas rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_gas_ _current_rate octopus_intelligent_slot - If you have the Octopus Intelligent GO tariff this should point to the 'slot' sensor binary_sensor.octopus_energy_ _intelligent_dispatching metric_octopus_gas is (as above) only required to be configured if you are using Predbat to determine whether to heat your hot water via your iBoost or gas. If you do not have an export rate, or are not on the Octopus Go tariff, then the appropriate lines can be commented out in apps.yaml. Standing charge Predbat can also (optionally) include the daily standing charge in cost predictions. The following configuration item in apps.yaml defaults to obtaining the standing charge from the Octopus Energy integration: metric_standing_charge - Standing charge in pounds. By default points to the Octopus Energy integration sensor sensor.octopus_energy_electricity_ _current_standing_charge You can manually change this to a standing charge in pounds, e.g. 0.50 is 50p, or delete this line from apps.yaml, or set it to zero if you don't want the standing charge (and only have consumption usage) to be included in Predbat charts and output data. Octopus Saving sessions Predbat is able to automatically join you to Octopus saving sessions and plan battery activity for the saving session period to maximise your income. For Predbat to automatically manage Octopus saving sessions the following additional configuration item in apps.yaml is used. Like the electricity rates this is set in the apps.yaml template to a regular expression that should auto-discover the Octopus Energy integration. octopus_saving_session - Indicates if a saving session is active, should point to the sensor binary_sensor.octopus_energy_ _octoplus_saving_sessions. When a saving session is available it will be automatically joined by Predbat and should then appear as a joined session within the next 30 minutes. In the Predbat plan, for joined saving sessions the energy rates for import and export will be overridden by adding the assumed saving rate to your normal rate. The assumed rate will be taken from the Octopus Energy integration and converted into pence using the octopus_saving_session_octopoints_per_penny configuration item in apps.yaml (default is 8). If you normally cut back your house usage during a saving session then you can change input_number.predbat_load_scaling_saving to allow Predbat to assume an energy reduction in this period. E.g. setting to a value of 0.8 would indicate you will use 80% of the normal consumption in that period (a 20% reduction). As the saving session import and export rates are very high compared to normal Predbat will plan additional export during the saving session period. If necessary, a pre-charge may happen at some point during the day to maintain the battery right level for the session. Note that Predbat's operational mode select.predbat_mode must be set to either 'Control charge' or 'Control charge & discharge' for Predbat to be able to manage the battery for the saving session. If you do not have an export tariff then forced export will not apply and Predbat will just ensure you have enough battery charge to see you through the saving session period. If you do not want Predbat to automatically join Octopus saving sessions and manage your battery activity for the session, simply delete or comment out the octopus_saving_session entry in apps.yaml. Octopus Rates URL If you do not wish to use the Octopus Energy integration and are an Octopus Energy customer then you can configure Predbat to get the electricity rates directly online from the Octopus website. In apps.yaml configure the following lines: rates_import_octopus_url to point to the appropriate import tariff URL on the Octopus website rates_export_octopus_url to point to the export tariff URL e.g. rates_import_octopus_url : \"https://api.octopus.energy/v1/products/FLUX-IMPORT-23-02-14/electricity-tariffs/E-1R-FLUX-IMPORT-23-02-14-A/standard-unit-rates\" rates_import_octopus_url : \"https://api.octopus.energy/v1/products/AGILE-FLEX-BB-23-02-08/electricity-tariffs/E-1R-AGILE-FLEX-BB-23-02-08-A/standard-unit-rates\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/FLUX-EXPORT-BB-23-02-14/electricity-tariffs/E-1R-FLUX-EXPORT-BB-23-02-14-A/standard-unit-rates\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/AGILE-OUTGOING-BB-23-02-28/electricity-tariffs/E-1R-AGILE-OUTGOING-BB-23-02-28-A/standard-unit-rates/\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/OUTGOING-FIX-12M-BB-23-02-09/electricity-tariffs/E-1R-OUTGOING-FIX-12M-BB-23-02-09-A/standard-unit-rates/\" If you configure the rates_import_octopus_url then Predbat will use this instead of metric_octopus or rates_import. Similarly rates_export_octopus_url takes precedence over metric_octopus_export or rates_export. Configuring the Octopus rates URL is an expert feature and for most users the Octopus Energy integration is a simpler solution to use. Rate Bands to manually configure Energy Rates If you are not an Octopus Energy customer, or you are but your energy rates repeat in a simple manner, you can configure your rate bands in apps.yaml using rates_import/rates_export/rates_gas. Add the following entries to apps.yaml to define the pattern of rates over a 24-hour period: rates_import: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_export: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_gas: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence start and end are in the time format of \"HH:MM:SS\" e.g. \"12:30:00\" and should be aligned to 30 minute slots normally. rate is in pence e.g. 4.2 start and end can be omitted and Predbat will assume that you are on a single flat rate tariff. If there are any gaps in the 24-hour period then a zero rate will be assumed. If you don't use gas then you can not put this one in the configuration. Manually over-riding energy rates You can also override the energy rates (regardless of whether they are set manually or via the Octopus Energy integration) by using the override feature in apps.yaml. Rate override is used to set the specific date and time period where your rates are different, e.g. an Octopus Power Up session (zero rate for an hour or two), or the British Gas half-price electricity on Sunday's. Unfortunately there aren't any API's available to feed this information automatically into Predbat so you will have to edit apps.yaml manually to set the appropriate rate over-ride dates and times: rates_import_override: - date : \"YYYY-MM-DD\" start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence rates_export_override: - date : \"YYYY-MM-DD\" start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence Optionally you can add a predicted load scaling in these periods using load_scaling for example: rates_import_override: - date: '2024-01-21' start: '17:30:00' end: '18:30:00' rate: 150 load_scaling: 0.8 This instructs Predbat that during a 1 hour period at 5:30-6:30pm on 21st of Jan set the import rate to 150p and assume our load will be 80% of normal (20% lower). You can also make relative adjustments to your energy rates, e.g. if you want to avoid exporting during peak periods to improve your energy saving session results you could make a relative adjustment to your export rates using rate_increment . The reason not to just set rate is then when an energy saving session is active you do not want to ignore the higher export rate that is automatically provided by Octopus. In this example we subtract 10p from our export rate during the period that saving sessions normally fall within and thus steer Predbat away from force exporting during that time. The saving session will still work correctly as a 10p adjustment on rates >100p will have little/no impact. rates_export_override: - start: '17:00:00' end: '19:00:00' rate_increment: -10 You can also use a similar but opposite approach of setting a positive export rate_increment to encourage Predbat to discharge the battery at certain time periods. If you have a very low overnight rate (such as Octopus Go) and want to ensure your battery is discharged just before the low rate period, but you don't want to risk the battery running out too early (and importing at a higher rate), you can add a rate export override for the period you want to discharge just before the low rate period: rates_export_override: - start: '22:30:00' end: '23:30:00' rate_increment: 10 You can also use rate_increment with load_scaling, e.g. a rate_increment of 0 can be used to just apply load scaling to certain defined periods. date is in the date format of \"YYYY-MM-DD\" e.g. \"2023-09-09\", start and end in \"HH:MM:SS\" time format e.g. \"12:30:00\", and rate in pence. load_scaling is a percentage factor, where 1.0 would be no change, 0.8 is 80% of nominal house load. rate_increment is the number of pence to add (or subtract) to the reported energy rates during this period Rate offsets If you are on an Agile or Tracker tariff you can tune future unknown energy rates by adjusting the entities input_number.predbat_metric_future_rate_offset_import ( expert mode ) and input_number.predbat_metric_future_rate_offset_export ( expert mode ) inside Home Assistant to set the predicted offset for future unknown rates. Future Agile energy rates In the energy market it's possible to calculate the Octopus Agile rates from around 10am UK time using public data, you can enable this in apps.yaml for Import, Export or both. This will approximate next day's rates based on the spot prices. The approximation is only used until the real Octopus Agile rates are released around 4pm. futurerate_url - URL of future energy market prices; this should not normally need to be changed futurerate_adjust_import and futurerate_adjust_export - Whether tomorrow's predicted import or export prices should be adjusted based on energy market prices or not. Set these depending upon whether you have an agile tariff for import, export or both futurerate_peak_start and futurerate_peak_end - during the peak period Octopus apply an additional peak-rate price adjustment. These configuration items enable the peak-rate hours to be adjusted futurerate_peak_premium_import and futurerate_peak_premium_export - the price premium (in pence) to be added to the energy market prices during the above-defined peak period CAUTION: You may violate the terms and conditions of the Nordpool site if you use this data and as such the authors of Predbat accept no responsibility for any violations: https://www.nordpoolgroup.com/en/About-us/terms-and-conditions-for-useofwebsite/ futurerate_url: '<https://www.nordpoolgroup.com/api/marketdata/page/325?currency=GBP>' futurerate_adjust_import: True futurerate_adjust_export: False futurerate_peak_start: \"16:00:00\" futurerate_peak_end: \"19:00:00\" futurerate_peak_premium_import: 14 futurerate_peak_premium_export: 6.5 Grid Carbon intensity Predbat can also track Carbon intensity by linking it to an integration which provides this data. UK Grid Carbon intensity The National Grid provides this data, please install this integration: https://github.com/jfparis/sensor.carbon_intensity_uk Once it is active update apps.yaml to link Predbat to the Sensor (if its not already in your template): # Carbon Intensity data from National grid carbon_intensity: 're:(sensor.carbon_intensity_uk)' By enabling switch.predbat_carbon_enable you can view Carbon Intensity in the predbat plan . Predbat can also optimise your grid charging based on the Carbon footprint by setting input_number.predbat_carbon_metric .","title":"Energy rates"},{"location":"energy-rates/#energy-rates","text":"Predbat needs to know what your Import and (optionally) Export rates are so it can plan the optimal way to use your battery. Your Import and Export rates can be simple flat rates, more complex time of day tariffs (e.g. Economy 7, Octopus Flux), or daily/half-hourly rates that track electricity market prices (e.g. Octopus Agile or Tracker). Energy rates are all configured in the apps.yaml file that's stored in either the /addon_configs/46f69597_appdaemon-predbat/apps or the /config/appdaemon/apps/batpred/config/ directory depending on what type of Predbat installation method you have used . You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to edit this file - see editing configuration files within Home Assistant if you need to install an editor.","title":"Energy rates"},{"location":"energy-rates/#octopus-energy-integration","text":"If your electricity supplier is Octopus Energy then the simplest way to provide Predbat with your electricity pricing information is to use the Octopus Energy integration . The Octopus Energy integration connects to your Octopus Energy account and retrieves the tariffs you are on, and the current tariff rates. If you change tariff within Octopus the integration will automatically retrieve the updated tariff information, and as tariff prices change, again they are automatically retrieved. The integration also provides support for Intelligent Octopus charging to support car charging. Follow the instructions provided in the Octopus Energy integration documentation to install and setup the integration. Once installed, you will need to configure the integration (go to Settings / Devices & Services / Integrations / Octopus Energy then click 'Configure') and provide the integration with your 'Octopus API key' (that you obtain from your Octopus account : Personal Details / API access). CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following Octopus Energy events which are disabled by default when the integration is installed: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates event.octopus_energy_gas_xxxxxxxx_previous_day_rates event.octopus_energy_gas_xxxxxxxx_current_day_rates event.octopus_energy_gas_xxxxxxxx_next_day_rates To enable the above events: Go to Settings / Devices & Services / Integrations, choose Octopus Energy, then xx entities You will see a list of entities (and events) supplied by the Octopus integration Click the 'Filter' symbol on the top right hand corner (a series of lines in a downwards pointing arrow) and make sure all the options are selected Then in the left hand-side search entities box, type \"current_day\" Click on the first event that comes up, check the name is the right one Click the cog wheel, then you should see the option to enable the event Click the option to enable the event and press 'Update' to make the change Repeat this for the other events. The gas rates are only required if you have a gas boiler, an iBoost, and are using Predbat to determine whether it's cheaper to heat your hot water with the iBoost or via gas. Verify that the integration is working correctly in Home Assistant by going to Developer Tools / States, and enter 'octopus' in the 'Filter entities' box. Confirm that the Octopus entities are being populated correctly.","title":"Octopus Energy integration"},{"location":"energy-rates/#configuring-predbat-to-use-the-octopus-energy-integration","text":"The following configuration items in apps.yaml are used to configure Predbat to use the Octopus Energy integration. They are set to a regular expression and should be auto-discovered so that Predbat automatically uses the Octopus Energy integration, but you can comment out the regular expression lines to disable, or you set them manually. metric_octopus_import - Import rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_electricity_ _current_rate metric_octopus_export - Export rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_electricity_ _export_current_rate metric_octopus_gas - Gas rates from the Octopus Energy integration, should point to the sensor sensor.octopus_energy_gas_ _current_rate octopus_intelligent_slot - If you have the Octopus Intelligent GO tariff this should point to the 'slot' sensor binary_sensor.octopus_energy_ _intelligent_dispatching metric_octopus_gas is (as above) only required to be configured if you are using Predbat to determine whether to heat your hot water via your iBoost or gas. If you do not have an export rate, or are not on the Octopus Go tariff, then the appropriate lines can be commented out in apps.yaml.","title":"Configuring Predbat to use the Octopus Energy integration"},{"location":"energy-rates/#standing-charge","text":"Predbat can also (optionally) include the daily standing charge in cost predictions. The following configuration item in apps.yaml defaults to obtaining the standing charge from the Octopus Energy integration: metric_standing_charge - Standing charge in pounds. By default points to the Octopus Energy integration sensor sensor.octopus_energy_electricity_ _current_standing_charge You can manually change this to a standing charge in pounds, e.g. 0.50 is 50p, or delete this line from apps.yaml, or set it to zero if you don't want the standing charge (and only have consumption usage) to be included in Predbat charts and output data.","title":"Standing charge"},{"location":"energy-rates/#octopus-saving-sessions","text":"Predbat is able to automatically join you to Octopus saving sessions and plan battery activity for the saving session period to maximise your income. For Predbat to automatically manage Octopus saving sessions the following additional configuration item in apps.yaml is used. Like the electricity rates this is set in the apps.yaml template to a regular expression that should auto-discover the Octopus Energy integration. octopus_saving_session - Indicates if a saving session is active, should point to the sensor binary_sensor.octopus_energy_ _octoplus_saving_sessions. When a saving session is available it will be automatically joined by Predbat and should then appear as a joined session within the next 30 minutes. In the Predbat plan, for joined saving sessions the energy rates for import and export will be overridden by adding the assumed saving rate to your normal rate. The assumed rate will be taken from the Octopus Energy integration and converted into pence using the octopus_saving_session_octopoints_per_penny configuration item in apps.yaml (default is 8). If you normally cut back your house usage during a saving session then you can change input_number.predbat_load_scaling_saving to allow Predbat to assume an energy reduction in this period. E.g. setting to a value of 0.8 would indicate you will use 80% of the normal consumption in that period (a 20% reduction). As the saving session import and export rates are very high compared to normal Predbat will plan additional export during the saving session period. If necessary, a pre-charge may happen at some point during the day to maintain the battery right level for the session. Note that Predbat's operational mode select.predbat_mode must be set to either 'Control charge' or 'Control charge & discharge' for Predbat to be able to manage the battery for the saving session. If you do not have an export tariff then forced export will not apply and Predbat will just ensure you have enough battery charge to see you through the saving session period. If you do not want Predbat to automatically join Octopus saving sessions and manage your battery activity for the session, simply delete or comment out the octopus_saving_session entry in apps.yaml.","title":"Octopus Saving sessions"},{"location":"energy-rates/#octopus-rates-url","text":"If you do not wish to use the Octopus Energy integration and are an Octopus Energy customer then you can configure Predbat to get the electricity rates directly online from the Octopus website. In apps.yaml configure the following lines: rates_import_octopus_url to point to the appropriate import tariff URL on the Octopus website rates_export_octopus_url to point to the export tariff URL e.g. rates_import_octopus_url : \"https://api.octopus.energy/v1/products/FLUX-IMPORT-23-02-14/electricity-tariffs/E-1R-FLUX-IMPORT-23-02-14-A/standard-unit-rates\" rates_import_octopus_url : \"https://api.octopus.energy/v1/products/AGILE-FLEX-BB-23-02-08/electricity-tariffs/E-1R-AGILE-FLEX-BB-23-02-08-A/standard-unit-rates\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/FLUX-EXPORT-BB-23-02-14/electricity-tariffs/E-1R-FLUX-EXPORT-BB-23-02-14-A/standard-unit-rates\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/AGILE-OUTGOING-BB-23-02-28/electricity-tariffs/E-1R-AGILE-OUTGOING-BB-23-02-28-A/standard-unit-rates/\" rates_export_octopus_url: \"https://api.octopus.energy/v1/products/OUTGOING-FIX-12M-BB-23-02-09/electricity-tariffs/E-1R-OUTGOING-FIX-12M-BB-23-02-09-A/standard-unit-rates/\" If you configure the rates_import_octopus_url then Predbat will use this instead of metric_octopus or rates_import. Similarly rates_export_octopus_url takes precedence over metric_octopus_export or rates_export. Configuring the Octopus rates URL is an expert feature and for most users the Octopus Energy integration is a simpler solution to use.","title":"Octopus Rates URL"},{"location":"energy-rates/#rate-bands-to-manually-configure-energy-rates","text":"If you are not an Octopus Energy customer, or you are but your energy rates repeat in a simple manner, you can configure your rate bands in apps.yaml using rates_import/rates_export/rates_gas. Add the following entries to apps.yaml to define the pattern of rates over a 24-hour period: rates_import: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_export: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_gas: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence start and end are in the time format of \"HH:MM:SS\" e.g. \"12:30:00\" and should be aligned to 30 minute slots normally. rate is in pence e.g. 4.2 start and end can be omitted and Predbat will assume that you are on a single flat rate tariff. If there are any gaps in the 24-hour period then a zero rate will be assumed. If you don't use gas then you can not put this one in the configuration.","title":"Rate Bands to manually configure Energy Rates"},{"location":"energy-rates/#manually-over-riding-energy-rates","text":"You can also override the energy rates (regardless of whether they are set manually or via the Octopus Energy integration) by using the override feature in apps.yaml. Rate override is used to set the specific date and time period where your rates are different, e.g. an Octopus Power Up session (zero rate for an hour or two), or the British Gas half-price electricity on Sunday's. Unfortunately there aren't any API's available to feed this information automatically into Predbat so you will have to edit apps.yaml manually to set the appropriate rate over-ride dates and times: rates_import_override: - date : \"YYYY-MM-DD\" start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence rates_export_override: - date : \"YYYY-MM-DD\" start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence Optionally you can add a predicted load scaling in these periods using load_scaling for example: rates_import_override: - date: '2024-01-21' start: '17:30:00' end: '18:30:00' rate: 150 load_scaling: 0.8 This instructs Predbat that during a 1 hour period at 5:30-6:30pm on 21st of Jan set the import rate to 150p and assume our load will be 80% of normal (20% lower). You can also make relative adjustments to your energy rates, e.g. if you want to avoid exporting during peak periods to improve your energy saving session results you could make a relative adjustment to your export rates using rate_increment . The reason not to just set rate is then when an energy saving session is active you do not want to ignore the higher export rate that is automatically provided by Octopus. In this example we subtract 10p from our export rate during the period that saving sessions normally fall within and thus steer Predbat away from force exporting during that time. The saving session will still work correctly as a 10p adjustment on rates >100p will have little/no impact. rates_export_override: - start: '17:00:00' end: '19:00:00' rate_increment: -10 You can also use a similar but opposite approach of setting a positive export rate_increment to encourage Predbat to discharge the battery at certain time periods. If you have a very low overnight rate (such as Octopus Go) and want to ensure your battery is discharged just before the low rate period, but you don't want to risk the battery running out too early (and importing at a higher rate), you can add a rate export override for the period you want to discharge just before the low rate period: rates_export_override: - start: '22:30:00' end: '23:30:00' rate_increment: 10 You can also use rate_increment with load_scaling, e.g. a rate_increment of 0 can be used to just apply load scaling to certain defined periods. date is in the date format of \"YYYY-MM-DD\" e.g. \"2023-09-09\", start and end in \"HH:MM:SS\" time format e.g. \"12:30:00\", and rate in pence. load_scaling is a percentage factor, where 1.0 would be no change, 0.8 is 80% of nominal house load. rate_increment is the number of pence to add (or subtract) to the reported energy rates during this period","title":"Manually over-riding energy rates"},{"location":"energy-rates/#rate-offsets","text":"If you are on an Agile or Tracker tariff you can tune future unknown energy rates by adjusting the entities input_number.predbat_metric_future_rate_offset_import ( expert mode ) and input_number.predbat_metric_future_rate_offset_export ( expert mode ) inside Home Assistant to set the predicted offset for future unknown rates.","title":"Rate offsets"},{"location":"energy-rates/#future-agile-energy-rates","text":"In the energy market it's possible to calculate the Octopus Agile rates from around 10am UK time using public data, you can enable this in apps.yaml for Import, Export or both. This will approximate next day's rates based on the spot prices. The approximation is only used until the real Octopus Agile rates are released around 4pm. futurerate_url - URL of future energy market prices; this should not normally need to be changed futurerate_adjust_import and futurerate_adjust_export - Whether tomorrow's predicted import or export prices should be adjusted based on energy market prices or not. Set these depending upon whether you have an agile tariff for import, export or both futurerate_peak_start and futurerate_peak_end - during the peak period Octopus apply an additional peak-rate price adjustment. These configuration items enable the peak-rate hours to be adjusted futurerate_peak_premium_import and futurerate_peak_premium_export - the price premium (in pence) to be added to the energy market prices during the above-defined peak period CAUTION: You may violate the terms and conditions of the Nordpool site if you use this data and as such the authors of Predbat accept no responsibility for any violations: https://www.nordpoolgroup.com/en/About-us/terms-and-conditions-for-useofwebsite/ futurerate_url: '<https://www.nordpoolgroup.com/api/marketdata/page/325?currency=GBP>' futurerate_adjust_import: True futurerate_adjust_export: False futurerate_peak_start: \"16:00:00\" futurerate_peak_end: \"19:00:00\" futurerate_peak_premium_import: 14 futurerate_peak_premium_export: 6.5","title":"Future Agile energy rates"},{"location":"energy-rates/#grid-carbon-intensity","text":"Predbat can also track Carbon intensity by linking it to an integration which provides this data.","title":"Grid Carbon intensity"},{"location":"energy-rates/#uk-grid-carbon-intensity","text":"The National Grid provides this data, please install this integration: https://github.com/jfparis/sensor.carbon_intensity_uk Once it is active update apps.yaml to link Predbat to the Sensor (if its not already in your template): # Carbon Intensity data from National grid carbon_intensity: 're:(sensor.carbon_intensity_uk)' By enabling switch.predbat_carbon_enable you can view Carbon Intensity in the predbat plan . Predbat can also optimise your grid charging based on the Carbon footprint by setting input_number.predbat_carbon_metric .","title":"UK Grid Carbon intensity"},{"location":"faq/","text":"FAQ I've installed Predbat but I don't see the correct entities First look at predbat.status in Home Assistant and the AppDaemon.log (which can be found in the list of log files in the System/Log area of the GUI). See if any errors are warnings are found. If you see an error it's likely something is configured wrongly, check your entity settings are correct. Make sure Solcast is installed and it's auto-updated at least a couple of times a day (see the Solcast instructions ). The default solcast sensor names maybe wrong, you might need to update the apps.yaml config to match your own names (some people don't have the solcast_ bit in their names) Did you configure AppDaemon apps_dir correctly in appdaemon.yaml ? Why is my predicted charge % higher or lower than I might expect? Predbat is based on costing, so it will try to save you money. If you have the PV 10% option enabled it will also take into account the more worse case scenario and how often it might happen, so if the forecast is a bit unreliable it's better to charge more and not risk getting stung importing. Have you checked your energy rates for import and export are correct, maybe check the rates graph and confirm. If you do something like have export>import then Predbat will try to export as much as possible. Have you tuned Solcast to match your output accurately? Have you tuned predbat_best_soc_keep settings ? Do you have predicted car charging during the time period? You can also tune predbat_load_scaling and predbat_pv_scaling to adjust predictions up and down a bit Maybe your historical data includes car charging, you might want to filter this out using car_charging_hold (see below) Why didn't the slot actually get configured? Are you in read-only mode? My plan doesn't include any charging? Do you have the predbat_mode set to Control charge (or Control charge & discharge)? The charge limit keeps increasing/decreasing in the charge window or is unstable Check you don't have any other automations running that adjust GivTCP settings during this time. Some people had a script that changes the reserve %, this will cause problems - please disable other automations and retry. I changed a config item but it made no difference? You might have to wait a few minutes until the next update cycle. Depending on the speed of the computer that Predbat is running on, it can take 1-5 minutes for Predbat to run through. You can see the date/time that Predbat last completed a run at the start of the Predbat HTML plan . It's all running but I'm not getting very good results You might want to tune input_number.predbat_best_soc_keep to set a minimum target battery level, e.g. I use 2.0 (for 2kWh, which is just over 20% on a 9.5kWh battery). If you set input_number.predbat_best_soc_keep too high then predbat could need to charge the battery in unfavourable import rates, so try to set it to a fairly low value, especially if you have a small battery. If you set it to zero then predbat may not charge at all, so use 0.1 as a minimum. Have a read of the energy rates configuration guide as depending on your tariff different settings maybe required Check your solar production is well calibrated (you can compare solcast vs actually in the Home Assistant energy tab or on the GivEnergy portal) Make sure your inverter max AC rate has been set correctly If you have an EV that you charge then you will want some sort of car charging sensor or use the basic car charging hold feature or your load predictions maybe unreliable - see Car charging planning Do you have a solar diverter? If so maybe you want to try using the iBoost model settings . Perhaps set up the calibration chart and let it run for 24 hours to see how things line up If your export slots are too small compared to expected check your inverter_limit is set correctly (see below) When my battery is charging to 100% is fluctuates between 98% and 100%, and/or gives an error setting reserve Some inverters e.g. GE AIO inverter won't allow the reserve to be set too 100, in which case set in apps.yaml inverter_reserve_max : 98 And this should prevent the issue The plan doesn't charge or discharge when I expect it to Predbat can only work on the information its given, although it does run every 5 minutes when it re-evaluates the plan and adjusts if necessary. The plan Predbat produces assumes that your average load and PV forecasts are accurate and Predbat will aim to give you the maximum return. Make sure you have setup your Solcast solar forecast correctly with the number of panels, orientation, output, etc. Projected daily load is determined from historical load information so make sure you have set days_previous and days_previous_weight in apps.yaml to give appropriately representative load history to Predbat, and read the longer explanation of how days_previous works . You could adjust input_number.predbat_load_scaling to 1.2 so the plan will incorporate 20% more expected load if you want to be more pessimistic about historical load, and input_number.predbat_pv_scaling to similarly adjust the PV forecast - these and other adjustment options are described in the Scaling and Weight options . It is very important to correctly set Predbat's Battery Loss Options and Battery Margins as these can have a huge and critical impact on the plan that Predbat generates. Predbat's default configuration values are the recommended starting values for most users but there is no single right set of configuration values for every user of Predbat, it depends on many factors and your personal preferences. Many users will need to customise and tweak their Predbat configuration to suit their needs. The SoC level that Predbat aims to keep in the battery input_number.predbat_best_soc_keep and the absolute minimum SoC level input_number.predbat_best_soc_min are the first thing to check. If these are set too high then Predbat will charge at unfavourable rates to maintain the battery SoC. Conversely if you find Predbat is letting the battery exhaust too early, set predbat_best_soc_keep to 1.0 so Predbat will aim to keep 1kWh available for unexpected load. Predbat performs a lowest cost battery optimisation so a key part of deciding whether to charge, discharge or feed the house from the battery are the loss rates input_number.predbat_battery_loss , input_number.predbat_battery_loss_discharge and input_number.predbat_inverter_loss . Typical values could be 4, 4, 4 or 5, 5, 5. It is tempting to set these inverter loss figures lower to encourage Predbat to use the battery more, but this should be resisted as experience from the GivEnergy community forum suggests total energy conversion losses are in the range of 10-20%. Putting these losses into context and assuming you have an AC-coupled battery and have set the losses to 4, 4 and 4; then for every kWh charged from the grid you will only get 0.92kWh stored in the battery (4% charge + 4% inverter conversion loss) and similarly when that 0.92kWh is discharged to the home you will only receive 0.85kWh (0.92 x 0.92). These loss percentages also impact the Predbat plan. Consider an import rate of 20p/kWh; after conversion losses are considered, each 1kWh of stored battery charge will in effect have cost 21.7p (20 / 0.92) to import. Then for discharging, the same applies. Each kWh of stored battery charge (that cost 21.7p to charge) will in effect have cost 23.6p (21.7 / 0.92) to discharge. Predbat makes cost optimisation decisions so unless the current import rate is more than 23.6p, it will be cheaper to let the home run off grid import rather than to discharge the battery. If you turn debug mode on for the Predbat plan then you can see the effective import and export rates after losses that Predbat calculates in the Predbat plan. Predbat also uses input_number.predbat_metric_battery_cycle ( expert mode setting) to apply a 'virtual cost' in pence per kWh for charging and discharging the battery. The default value is 1p but this this can be changed to a different value to recognise the 'cost of using the battery', or set to zero to disable this feature. So if metric battery cycle is set to 1p, and continuing the example above, each kWh of battery charge will be costed at 22.7p (21.7p + 1p battery metric to charge), and the battery will not be discharged to support the home unless the current import rate is more than 25.6p (23.6p + 1p cost of charging + 1p cost to discharge). input_number.predbat_metric_min_improvement and input_number.predbat_metric_min_improvement_discharge (both expert mode settings) also affect Predbat's cost optimisation decisions as to whether its cost beneficial to charge or discharge the battery so could be tweaked if you feel Predbat is charging or discharging with marginal benefits. The defaults (0p and 0.1p respectively) should however give good results for most users. Finally, it could be worth considering adding import or export rate increments to apps.yaml if you want to direct Predbat to avoid or encourage charging or discharging in certain time periods - e.g. avoiding exporting in the time period saving sessions normally fall in, or to encourage discharging just before import rates fall overnight. Predbat is causing warning messages about 'exceed maximum size' in the Home Assistant Core log If you have a large input_number.predbat_forecast_plan_hours then you may see warning messages in the Home Assistant Core log about the size of a number of Predbat entities, the message will be \"State attributes for predbat. XXXX exceed maximum size of 16384 bytes\". This is just a warning, the Predbat entity attributes aren't stored in the database anyway, but you can suppress these warnings by adding the following to your configuration.yaml file: # Filter out 'message too large' warnings from Predbat entities logger: default: warning filters: homeassistant.components.recorder.db_schema: - \"State attributes for predbat.base10_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_cycle exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_cycle_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_charge_limit exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_load_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.cost_today_export exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.cost_today_import exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.grid_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.grid_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_actual exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_adjusted exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_predicted exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.plan_html exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.rates exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_base10 exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_best10 exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" Error - metric_octopus_import not set correctly or no energy rates can be read If you get this error in the Predbat log file: Check that the Octopus integration is working and that event.octopus_energy_electricity_ _current_day_rates and sensor.octopus_electricity_energy_ _current_rate are both populated by the integration. Ensure that you have followed the Octopus Integration Installation instructions , including enabling the Octopus Integration events. If you been using an older version of the Octopus integration and have upgraded to version 9 or above, then you may find that your energy sensors are named sensor.electricity_ _current_rate (i.e. no 'octopus_energy_' prefix) but the 'event' entities have the 'octopus_energy' prefix. If the 'event' and 'sensor' entities are not consistently named then Predbat will not be able to find the event entities if the sensor names don't match what's expected. To fix this, uninstall the Octopus integration, reboot Home Assistant, delete all the old Octopus sensors, and re-install the Octopus Integration . WARN: No solar data has been configured If you get this warning message in the Predbat log file or you see that the 'PV kWh' column in the Predbat plan card is completely blank: Ensure that you have installed and configured Solcast correctly Check the Solcast integration in Home Assistant is configured and enabled (go to Settings / Integrations / Solcast ) Check that there are no errors relating to Solcast in the Home Assistant log (go to Settings / System / Logs and view the 'Home Assistant Core' log) Verify the solar forecast has been populated in Home Assistant by going to Developer Tools / States, filtering on 'solcast', and checking that you can see the half-hourly solar forecasts in the Solcast entities If you can see the solcast entities but there are no forecast PV figures, try running the 'Solcast update' automation you created, and check again the solcast entities If the solcast entities are still not populated, try reloading the Solcast integration (go to System / Devices & Services / Integrations tab, click on 'Solcast PV Forecast', click the three vertical dots beside 'Configure' and choose 'Reload' from the dropdown menu) Check sensor.solcast_pv_api_limit (it's normally 10 for new Solcast accounts) meaning you can call the Solcast API 10 times a day (but if you have two solar arrays, e.g. East/West) then retrieving the forecast will count as two API calls. Compare this to sensor.solcast_pv_api_used to see how many Solcast API calls you have made today (alternatively, you can confirm how many API calls you have made today by logging into your Solcast account). If you've run out of API calls you will have to wait until midnight GMT for the API count to reset. It's recommended that you don't include the Solcast forecast within your GivEnergy portal to avoid running out of API calls. Check the Solcast server API status is OK Note: Can not find battery charge curve If you get the message \"Note: Can not find battery charge curve, one of the required settings for soc_kw, battery_power and charge_rate are missing from apps.yaml\" in the logfile then Predbat is trying to create a battery charge curve but does not have access to the required history information in Home Assistant. Creating the battery charge curve is described in the apps.yaml document. The most likely cause of the above message appearing in the logfile is that you are controlling the inverter in REST mode but have not uncommented the following entities in apps.yaml that Predbat needs to obtain history from to create the battery charge curve: charge_rate: - number.givtcp_{geserial}_battery_charge_rate discharge_rate: - number.givtcp_{geserial}_battery_discharge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh WARN: Inverter is in calibration mode If you see the message \"WARN: Inverter is in calibration mode, Predbat will not function correctly and will be disabled\" in the logfile, then Predbat has identified that your inverter is currently calibrating your battery. Predbat's status will also be set to 'Calibration'. Predbat will set the inverter charge and discharge rates to maximum (if they are not already), SoC target to 100% and battery reserve to minimum (usually 4%), and will not execute the plan nor enable battery charge or discharge. Once the inverter finishes calibrating the battery, Predbat will resume normal operations. Inverter time is xxx AppDaemon time is xxx this is xxx minutes skewed, Predbat may not function correctly If the predbat.status gives a warning error about the inverter time: Then it indicates that there is a mis-match between the clock that Predbat AppDaemon is using and the inverter time clock, and clearly with a clock mis-match, charging and discharging your battery at specific times may not work as expected. There are several potential causes of this problem: Check that the inverter time is correctly set, especially that its set to GMT (even if its summer time). In the GivEnergy portal, go to My Inverters / Remote Control (cog symbol) / click SEND next to 'Set Date and Time' Check that the time_zone in appdaemon.yaml is correctly set for your location (e.g. Europe/London) The time zone for Predbat in apps.yaml needs to be set to the same value Finally, check how often your inverter integration is polling your inverter for new data. For GivTCP the Self Run Loop Timer is recommended to be set to a value of between 20 and 60 seconds. If you have checked the above and keep getting \u201ctime is skewed\u201d warnings then it means Home Assistant/predbat isn\u2019t getting the same time from the inverter as it is expecting. Either GivTCP has lost communications with the inverter or the inverter is stopped talking to the world. If you look at the Logbook in Home Assistant you should see a steady stream of entities changing in HA. In particular you will see the GivTCP inverter time entity changing every polling period, e.g. every 20 seconds. Possible fixes: restart the GivTCP add-on restart Home Assistant (although usually restarting GivTCP is enough) power the inverter off, turn off panels and battery first, then the inverter, then follow the reverse sequence to power the inverter back on again. This forces the inverter to reconnect to your wifi do a \u2018reset to defaults\u2019 in the portal If you keep getting the warning message, even sporadically, then this points to an underlying issue in your home network between Home Assistant and the inverter. You may need to add a Wi-Fi repeater or ideally a fixed Ethernet connection to your inverter to improve signal strength if this keeps happening. There is a Home Assistant automation that will alert you if GivTCP stops sending data to predbat . I have another problem not listed above If you are still having trouble feel free to raise a Github ticket for support","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#ive-installed-predbat-but-i-dont-see-the-correct-entities","text":"First look at predbat.status in Home Assistant and the AppDaemon.log (which can be found in the list of log files in the System/Log area of the GUI). See if any errors are warnings are found. If you see an error it's likely something is configured wrongly, check your entity settings are correct. Make sure Solcast is installed and it's auto-updated at least a couple of times a day (see the Solcast instructions ). The default solcast sensor names maybe wrong, you might need to update the apps.yaml config to match your own names (some people don't have the solcast_ bit in their names) Did you configure AppDaemon apps_dir correctly in appdaemon.yaml ?","title":"I've installed Predbat but I don't see the correct entities"},{"location":"faq/#why-is-my-predicted-charge-higher-or-lower-than-i-might-expect","text":"Predbat is based on costing, so it will try to save you money. If you have the PV 10% option enabled it will also take into account the more worse case scenario and how often it might happen, so if the forecast is a bit unreliable it's better to charge more and not risk getting stung importing. Have you checked your energy rates for import and export are correct, maybe check the rates graph and confirm. If you do something like have export>import then Predbat will try to export as much as possible. Have you tuned Solcast to match your output accurately? Have you tuned predbat_best_soc_keep settings ? Do you have predicted car charging during the time period? You can also tune predbat_load_scaling and predbat_pv_scaling to adjust predictions up and down a bit Maybe your historical data includes car charging, you might want to filter this out using car_charging_hold (see below)","title":"Why is my predicted charge % higher or lower than I might expect?"},{"location":"faq/#why-didnt-the-slot-actually-get-configured","text":"Are you in read-only mode?","title":"Why didn't the slot actually get configured?"},{"location":"faq/#my-plan-doesnt-include-any-charging","text":"Do you have the predbat_mode set to Control charge (or Control charge & discharge)?","title":"My plan doesn't include any charging?"},{"location":"faq/#the-charge-limit-keeps-increasingdecreasing-in-the-charge-window-or-is-unstable","text":"Check you don't have any other automations running that adjust GivTCP settings during this time. Some people had a script that changes the reserve %, this will cause problems - please disable other automations and retry.","title":"The charge limit keeps increasing/decreasing in the charge window or is unstable"},{"location":"faq/#i-changed-a-config-item-but-it-made-no-difference","text":"You might have to wait a few minutes until the next update cycle. Depending on the speed of the computer that Predbat is running on, it can take 1-5 minutes for Predbat to run through. You can see the date/time that Predbat last completed a run at the start of the Predbat HTML plan .","title":"I changed a config item but it made no difference?"},{"location":"faq/#its-all-running-but-im-not-getting-very-good-results","text":"You might want to tune input_number.predbat_best_soc_keep to set a minimum target battery level, e.g. I use 2.0 (for 2kWh, which is just over 20% on a 9.5kWh battery). If you set input_number.predbat_best_soc_keep too high then predbat could need to charge the battery in unfavourable import rates, so try to set it to a fairly low value, especially if you have a small battery. If you set it to zero then predbat may not charge at all, so use 0.1 as a minimum. Have a read of the energy rates configuration guide as depending on your tariff different settings maybe required Check your solar production is well calibrated (you can compare solcast vs actually in the Home Assistant energy tab or on the GivEnergy portal) Make sure your inverter max AC rate has been set correctly If you have an EV that you charge then you will want some sort of car charging sensor or use the basic car charging hold feature or your load predictions maybe unreliable - see Car charging planning Do you have a solar diverter? If so maybe you want to try using the iBoost model settings . Perhaps set up the calibration chart and let it run for 24 hours to see how things line up If your export slots are too small compared to expected check your inverter_limit is set correctly (see below)","title":"It's all running but I'm not getting very good results"},{"location":"faq/#when-my-battery-is-charging-to-100-is-fluctuates-between-98-and-100-andor-gives-an-error-setting-reserve","text":"Some inverters e.g. GE AIO inverter won't allow the reserve to be set too 100, in which case set in apps.yaml inverter_reserve_max : 98 And this should prevent the issue","title":"When my battery is charging to 100% is fluctuates between 98% and 100%, and/or gives an error setting reserve"},{"location":"faq/#the-plan-doesnt-charge-or-discharge-when-i-expect-it-to","text":"Predbat can only work on the information its given, although it does run every 5 minutes when it re-evaluates the plan and adjusts if necessary. The plan Predbat produces assumes that your average load and PV forecasts are accurate and Predbat will aim to give you the maximum return. Make sure you have setup your Solcast solar forecast correctly with the number of panels, orientation, output, etc. Projected daily load is determined from historical load information so make sure you have set days_previous and days_previous_weight in apps.yaml to give appropriately representative load history to Predbat, and read the longer explanation of how days_previous works . You could adjust input_number.predbat_load_scaling to 1.2 so the plan will incorporate 20% more expected load if you want to be more pessimistic about historical load, and input_number.predbat_pv_scaling to similarly adjust the PV forecast - these and other adjustment options are described in the Scaling and Weight options . It is very important to correctly set Predbat's Battery Loss Options and Battery Margins as these can have a huge and critical impact on the plan that Predbat generates. Predbat's default configuration values are the recommended starting values for most users but there is no single right set of configuration values for every user of Predbat, it depends on many factors and your personal preferences. Many users will need to customise and tweak their Predbat configuration to suit their needs. The SoC level that Predbat aims to keep in the battery input_number.predbat_best_soc_keep and the absolute minimum SoC level input_number.predbat_best_soc_min are the first thing to check. If these are set too high then Predbat will charge at unfavourable rates to maintain the battery SoC. Conversely if you find Predbat is letting the battery exhaust too early, set predbat_best_soc_keep to 1.0 so Predbat will aim to keep 1kWh available for unexpected load. Predbat performs a lowest cost battery optimisation so a key part of deciding whether to charge, discharge or feed the house from the battery are the loss rates input_number.predbat_battery_loss , input_number.predbat_battery_loss_discharge and input_number.predbat_inverter_loss . Typical values could be 4, 4, 4 or 5, 5, 5. It is tempting to set these inverter loss figures lower to encourage Predbat to use the battery more, but this should be resisted as experience from the GivEnergy community forum suggests total energy conversion losses are in the range of 10-20%. Putting these losses into context and assuming you have an AC-coupled battery and have set the losses to 4, 4 and 4; then for every kWh charged from the grid you will only get 0.92kWh stored in the battery (4% charge + 4% inverter conversion loss) and similarly when that 0.92kWh is discharged to the home you will only receive 0.85kWh (0.92 x 0.92). These loss percentages also impact the Predbat plan. Consider an import rate of 20p/kWh; after conversion losses are considered, each 1kWh of stored battery charge will in effect have cost 21.7p (20 / 0.92) to import. Then for discharging, the same applies. Each kWh of stored battery charge (that cost 21.7p to charge) will in effect have cost 23.6p (21.7 / 0.92) to discharge. Predbat makes cost optimisation decisions so unless the current import rate is more than 23.6p, it will be cheaper to let the home run off grid import rather than to discharge the battery. If you turn debug mode on for the Predbat plan then you can see the effective import and export rates after losses that Predbat calculates in the Predbat plan. Predbat also uses input_number.predbat_metric_battery_cycle ( expert mode setting) to apply a 'virtual cost' in pence per kWh for charging and discharging the battery. The default value is 1p but this this can be changed to a different value to recognise the 'cost of using the battery', or set to zero to disable this feature. So if metric battery cycle is set to 1p, and continuing the example above, each kWh of battery charge will be costed at 22.7p (21.7p + 1p battery metric to charge), and the battery will not be discharged to support the home unless the current import rate is more than 25.6p (23.6p + 1p cost of charging + 1p cost to discharge). input_number.predbat_metric_min_improvement and input_number.predbat_metric_min_improvement_discharge (both expert mode settings) also affect Predbat's cost optimisation decisions as to whether its cost beneficial to charge or discharge the battery so could be tweaked if you feel Predbat is charging or discharging with marginal benefits. The defaults (0p and 0.1p respectively) should however give good results for most users. Finally, it could be worth considering adding import or export rate increments to apps.yaml if you want to direct Predbat to avoid or encourage charging or discharging in certain time periods - e.g. avoiding exporting in the time period saving sessions normally fall in, or to encourage discharging just before import rates fall overnight.","title":"The plan doesn't charge or discharge when I expect it to"},{"location":"faq/#predbat-is-causing-warning-messages-about-exceed-maximum-size-in-the-home-assistant-core-log","text":"If you have a large input_number.predbat_forecast_plan_hours then you may see warning messages in the Home Assistant Core log about the size of a number of Predbat entities, the message will be \"State attributes for predbat. XXXX exceed maximum size of 16384 bytes\". This is just a warning, the Predbat entity attributes aren't stored in the database anyway, but you can suppress these warnings by adding the following to your configuration.yaml file: # Filter out 'message too large' warnings from Predbat entities logger: default: warning filters: homeassistant.components.recorder.db_schema: - \"State attributes for predbat.base10_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.base10_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_cycle exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_cycle_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.battery_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_charge_limit exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_load_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_import_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.best10_pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.cost_today_export exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.cost_today_import exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.export_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.grid_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.grid_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_actual exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_adjusted exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_energy_predicted exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.load_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.metric exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.plan_html exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_energy exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_power exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.pv_power_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.rates exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_base10 exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_best exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" - \"State attributes for predbat.soc_kw_best10 exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\"","title":"Predbat is causing warning messages about 'exceed maximum size' in the Home Assistant Core log"},{"location":"faq/#error-metric_octopus_import-not-set-correctly-or-no-energy-rates-can-be-read","text":"If you get this error in the Predbat log file: Check that the Octopus integration is working and that event.octopus_energy_electricity_ _current_day_rates and sensor.octopus_electricity_energy_ _current_rate are both populated by the integration. Ensure that you have followed the Octopus Integration Installation instructions , including enabling the Octopus Integration events. If you been using an older version of the Octopus integration and have upgraded to version 9 or above, then you may find that your energy sensors are named sensor.electricity_ _current_rate (i.e. no 'octopus_energy_' prefix) but the 'event' entities have the 'octopus_energy' prefix. If the 'event' and 'sensor' entities are not consistently named then Predbat will not be able to find the event entities if the sensor names don't match what's expected. To fix this, uninstall the Octopus integration, reboot Home Assistant, delete all the old Octopus sensors, and re-install the Octopus Integration .","title":"Error - metric_octopus_import not set correctly or no energy rates can be read"},{"location":"faq/#warn-no-solar-data-has-been-configured","text":"If you get this warning message in the Predbat log file or you see that the 'PV kWh' column in the Predbat plan card is completely blank: Ensure that you have installed and configured Solcast correctly Check the Solcast integration in Home Assistant is configured and enabled (go to Settings / Integrations / Solcast ) Check that there are no errors relating to Solcast in the Home Assistant log (go to Settings / System / Logs and view the 'Home Assistant Core' log) Verify the solar forecast has been populated in Home Assistant by going to Developer Tools / States, filtering on 'solcast', and checking that you can see the half-hourly solar forecasts in the Solcast entities If you can see the solcast entities but there are no forecast PV figures, try running the 'Solcast update' automation you created, and check again the solcast entities If the solcast entities are still not populated, try reloading the Solcast integration (go to System / Devices & Services / Integrations tab, click on 'Solcast PV Forecast', click the three vertical dots beside 'Configure' and choose 'Reload' from the dropdown menu) Check sensor.solcast_pv_api_limit (it's normally 10 for new Solcast accounts) meaning you can call the Solcast API 10 times a day (but if you have two solar arrays, e.g. East/West) then retrieving the forecast will count as two API calls. Compare this to sensor.solcast_pv_api_used to see how many Solcast API calls you have made today (alternatively, you can confirm how many API calls you have made today by logging into your Solcast account). If you've run out of API calls you will have to wait until midnight GMT for the API count to reset. It's recommended that you don't include the Solcast forecast within your GivEnergy portal to avoid running out of API calls. Check the Solcast server API status is OK","title":"WARN: No solar data has been configured"},{"location":"faq/#note-can-not-find-battery-charge-curve","text":"If you get the message \"Note: Can not find battery charge curve, one of the required settings for soc_kw, battery_power and charge_rate are missing from apps.yaml\" in the logfile then Predbat is trying to create a battery charge curve but does not have access to the required history information in Home Assistant. Creating the battery charge curve is described in the apps.yaml document. The most likely cause of the above message appearing in the logfile is that you are controlling the inverter in REST mode but have not uncommented the following entities in apps.yaml that Predbat needs to obtain history from to create the battery charge curve: charge_rate: - number.givtcp_{geserial}_battery_charge_rate discharge_rate: - number.givtcp_{geserial}_battery_discharge_rate battery_power: - sensor.givtcp_{geserial}_battery_power soc_kw: - sensor.givtcp_{geserial}_soc_kwh","title":"Note: Can not find battery charge curve"},{"location":"faq/#warn-inverter-is-in-calibration-mode","text":"If you see the message \"WARN: Inverter is in calibration mode, Predbat will not function correctly and will be disabled\" in the logfile, then Predbat has identified that your inverter is currently calibrating your battery. Predbat's status will also be set to 'Calibration'. Predbat will set the inverter charge and discharge rates to maximum (if they are not already), SoC target to 100% and battery reserve to minimum (usually 4%), and will not execute the plan nor enable battery charge or discharge. Once the inverter finishes calibrating the battery, Predbat will resume normal operations.","title":"WARN: Inverter is in calibration mode"},{"location":"faq/#inverter-time-is-xxx-appdaemon-time-is-xxx-this-is-xxx-minutes-skewed-predbat-may-not-function-correctly","text":"If the predbat.status gives a warning error about the inverter time: Then it indicates that there is a mis-match between the clock that Predbat AppDaemon is using and the inverter time clock, and clearly with a clock mis-match, charging and discharging your battery at specific times may not work as expected. There are several potential causes of this problem: Check that the inverter time is correctly set, especially that its set to GMT (even if its summer time). In the GivEnergy portal, go to My Inverters / Remote Control (cog symbol) / click SEND next to 'Set Date and Time' Check that the time_zone in appdaemon.yaml is correctly set for your location (e.g. Europe/London) The time zone for Predbat in apps.yaml needs to be set to the same value Finally, check how often your inverter integration is polling your inverter for new data. For GivTCP the Self Run Loop Timer is recommended to be set to a value of between 20 and 60 seconds. If you have checked the above and keep getting \u201ctime is skewed\u201d warnings then it means Home Assistant/predbat isn\u2019t getting the same time from the inverter as it is expecting. Either GivTCP has lost communications with the inverter or the inverter is stopped talking to the world. If you look at the Logbook in Home Assistant you should see a steady stream of entities changing in HA. In particular you will see the GivTCP inverter time entity changing every polling period, e.g. every 20 seconds. Possible fixes: restart the GivTCP add-on restart Home Assistant (although usually restarting GivTCP is enough) power the inverter off, turn off panels and battery first, then the inverter, then follow the reverse sequence to power the inverter back on again. This forces the inverter to reconnect to your wifi do a \u2018reset to defaults\u2019 in the portal If you keep getting the warning message, even sporadically, then this points to an underlying issue in your home network between Home Assistant and the inverter. You may need to add a Wi-Fi repeater or ideally a fixed Ethernet connection to your inverter to improve signal strength if this keeps happening. There is a Home Assistant automation that will alert you if GivTCP stops sending data to predbat .","title":"Inverter time is xxx AppDaemon time is xxx this is xxx minutes skewed, Predbat may not function correctly"},{"location":"faq/#i-have-another-problem-not-listed-above","text":"If you are still having trouble feel free to raise a Github ticket for support","title":"I have another problem not listed above"},{"location":"install/","text":"Install These instructions will take you through the process of installing and configuring Predbat for first time use. It's recommended that you watch the Predbat Video Guides before you start. We have tried to make the documentation as comprehensive as possible but a level of familiarity with the basics of Home Assistant, Add-on's, Integrations, Entities, File Editing and YAML is assumed. There are plenty of \"Home Assistant basics\" tutorials on YouTube, but here are a few useful videos to introduce you to Home Assistant and displaying inverter data: What is Home Assistant from Smart Home Junkie YAML Basics from This Smart Home Installing GivTCP and Mosquitto Add-on's from Speak to the Geek Installing HACS from Speak to the Geek Setting up the Energy dashboard for GivEnergy inverters from Speak to the Geek Power Flow Card Plus from Speak to the Geek If you get stuck, please read the FAQ's and if necessary raise a Github ticket for support. Inverter Control Integration install You will need to install an integration to communicate with and control your inverter. The specific integration you need will depend on the brand of inverter you have: Brand Integration Github Link GivEnergy GivTCP https://github.com/britkat1980/giv_tcp GivEnergy GivEnergy Cloud https://github.com/springfall2008/ge_cloud GivEnergy EMS GivEnergy Cloud https://github.com/springfall2008/ge_cloud Solis SolaX ModBus https://github.com/wills106/homeassistant-solax-modbus Solax Gen4 Solax Modbus https://github.com/wills106/homeassistant-solax-modbus Sofar Sofar MQTT https://github.com/cmcgerty/Sofar2mqtt Huawei Huawei Modbus https://github.com/wlcrs/huawei_solar SolarEdge SolarEdge Modbus https://github.com/WillCodeForCats/solaredge-modbus-multi SunSynk SunSynk Modbus https://github.com/kellerza/sunsynk Predbat was originally written for GivEnergy inverters controlled by the GivTCP add-on but has been extended for other inverter types. Please see Other Inverters for details on the install details. Follow the installation and configuration instructions appropriate for your inverter so that Home Assistant is able to 'see' and manage your inverter. You will need at least 24 hours history in Home Assistant for Predbat to work correctly, the default is 7 days (but you configure this back to 1 day if you need to). Editing Configuration Files in Home Assistant The basic configuration for Predbat is stored in a configuration file called apps.yaml . A standard template apps.yaml file will be installed as part of the Predbat installation and you will need to edit and customise this configuration file for your own system setup. You will therefore need a method of editing configuration files within your Home Assistant environment. There are severals ways to achieve this in Home Assistant, but two of the simplest are to use either the File Editor or Studio Code Server add-on's. Whichever you use is a personal preference. File Editor is a bit simpler, Studio Code Server is more powerful but does require HACS (the Home Assistant Community Store) to be installed first. If you do not have one of these file editors already installed in Home Assistant: For Studio Code Server you will need to install HACS first if you don't currently have it installed Go to Settings / Add-ons / Add-on Store (bottom right) Scroll down the add-on store list, to find either 'File editor' or 'Studio Code Server' as appropriate, click on the add-on, click 'INSTALL' Once the editor has been installed, ensure that the 'Start on boot' option is turned on, and click 'START' to start the add-on Thereafter whenever you need to edit a configuration file in Home Assistant you can navigate to Settings / Add-on's / editor_you_chose_to_use / 'OPEN WEB UI'. You can also turn the 'Show in sidebar' option on to give a quicker way to directly access the editor. If you are using the File Editor to edit Predbat's configuration files, you will need to turn OFF the Enforce Basepath option in order to access files in different directories (i.e. within the appdaemon directory): From the File editor add-on page, click on the 'Configuration' tab to change this setting). It is set to 'On' by default: If you are using Studio Code Server it will default to showing just files and folders in the /config directory. To access the entire HA directory structure, click the three horizontal bars to the left of 'Explorer', File, Open Folder, type '/' (root) and click OK. Predbat add-on install Recommended The simplest way to install Predbat now is with the Predbat add-on. Go to settings, add-ons, select Add-on Store, three dots on the top right, Repositories, then add the following repo ' https://github.com/springfall2008/predbat_addon ' to the list and click close. Now refresh the list and find Predbat, click on it and click 'install'. Ensure 'start on boot' is enabled and click 'start'. NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. These are located under the Home Assistant directory /addon_configs/6adb4f0d_predbat which contains: predbat.log - Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below. You can use your file editor (i.e. 'File editor' or 'Studio Code Server' add-on) to open the directory /addon_configs/6adb4f0d_predbat and view these files. If you have used the Predbat add-on installation method you do not need to install HACS or AppDaemon so you can skip directly to Solcast install below. AppDaemon-Predbat combined install Another way to install Predbat now is with a combined AppDaemon/Predbat add-on. This is a fork of AppDaemon which automatically includes an install of Predbat. Installing the combined AppDaemon-predbat add-on is thus simpler for new users as they do not need to install HACS, AppDaemon and Predbat as three separate installation steps. If you are already running AppDaemon then the original installation method for Predbat still exists, is still supported, and is described below in Predbat Installation into AppDaemon . To install the combined AppDaemon-predbat add-on: Go to Settings / Add-ons / Add-on Store (bottom right), click the three dots in the top right, then Repositories and type https://github.com/springfall2008/appdaemon-predbat ', click ADD, then CLOSE. In order to refresh the list of available add-on's, navigate back through Settings / Add-ons / Add-on Store, scroll down and select 'AppDaemon with Predbat' Click INSTALL and wait for the add-on to be installed Once it has finished installing, ensure that the 'Start on boot' option is turned on, then click 'START' NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. These are located under the Home Assistant directory /addon_configs/46f69597_appdaemon-predbat which contains: predbat.log - Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below. You can use your file editor (i.e. 'File editor' or 'Studio Code Server' add-on) to open the directory /addon_configs/46f69597_appdaemon-predbat and view these files. If you have used the AppDaemon-predbat add-on installation method you do not need to install HACS or AppDaemon so you can skip directly to Solcast install below. Predbat installation into AppDaemon This is the \"classic\" way of installing Predbat, to firstly install HACS (the Home Assistant Community Store), then install the AppDaemon add-on, and finally install Predbat from HACS to run within AppDaemon. HACS install Predbat and AppDaemon are available through the Home Assistant Community Store (HACS). You can install Predbat manually (see below) but its usually easier to install it through HACS. Install HACS if you haven't already ( https://hacs.xyz/docs/setup/download ) Enable AppDaemon in HACS: https://hacs.xyz/docs/categories/appdaemon_apps/ AppDaemon install Predbat is written in Python and runs on a continual loop (default every 5 minutes) within the AppDaemon add-on to Home Assistant. The next task therefore is to install and configure AppDaemon. Install the AppDaemon add-on https://github.com/hassio-addons/addon-appdaemon Once AppDaemon has finished installing, ensure that the 'Start on boot' option is turned on, then click 'START' You will need to edit the appdaemon.yaml configuration file for AppDaemon and so will need to have either the File Editor or Studio Code Server add-on's installed first Find the appdaemon.yaml file in the directory /addon_configs/a0d7b954_appdaemon : Add to the appdaemon.yaml configuration file: A section app_dir which should refer to the directory /homeassistant/appdaemon/apps where Predbat will be installed Ensure that the time_zone is set correctly (e.g. Europe/London) Add thread_duration_warning_threshold: 120 in the appdaemon section It's recommended you also add a logs section and specify a new logfile location so that you can see the complete logs, I set mine to /homeassistant/appdaemon/appdaemon.log and increase the logfile maximum size and number of logfile generations to capture a few days worth of logs. Example AppDaemon config in appdaemon.yaml : appdaemon: latitude: 52.379189 longitude: 4.899431 elevation: 2 time_zone: Europe/London thread_duration_warning_threshold: 120 plugins: HASS: type: hass app_dir: /homeassistant/appdaemon/apps http: url: http://homeassistant.local:5050 admin: api: hadashboard: # write log records to a file, retaining 9 versions, rather than the standard appdaemon log logs: main_log: filename: /homeassistant/appdaemon/appdaemon.log log_generations: 9 log_size: 10000000 CAUTION: If you are upgrading AppDaemon from an older version to version 0.15.2 or above you need to follow these steps to ensure Predbat continues working. These are only required if you are upgrading AppDaemon from an old version, they're not required for new installations of AppDaemon: Make sure you have access to the HA filesystem, e.g. I use the Samba add-on and connect to the drives on my Mac, but you can use ssh also. Update AppDaemon to the latest version Go into the directory /addon_configs/a0d7b954_appdaemon and edit appdaemon.yaml . You need to add app_dir (see above) to point to the old location and update your logfile location (if you have set it). You should remove the line that points to secrets.yaml (most people don't use this file) or adjust it's path to the new location ( /homeassistant/secrets.yaml ) Move the entire 'apps' directory from /addon_configs/a0d7b954_appdaemon (new location) to /config/appdaemon (the old location) Restart AppDaemon Check it has started and confirm Predbat is running correctly again. Install Predbat through HACS If you install Predbat through HACS, once installed you will get automatic updates for each new release of Predbat! In HACS, click on Automation Click on the three dots in the top right corner, choose Custom Repositories Add https://github.com/springfall2008/batpred as a custom repository of Category 'AppDaemon' and click 'Add' Click Explore and download repositories (bottom right), type 'Predbat' in the search box, select the Predbat Repository, then click 'Download' to install the Predbat app. NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. As you are following the 'install Predbat through HACS' installation method these are located under the Home Assistant directory /config/appdaemon/ which contains: appdaemon.log - AppDaemon and Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/batpred/config/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below. Predbat manual install A manual install is suitable for those running Docker type systems where HACS does not function correctly and you had to manually install AppDaemon. Note: Not recommended if you are using HACS Copy the file apps/predbat/predbat.py to the /config/appdaemon/apps/ directory in Home Assistant (or wherever you set appdaemon app_dir to) Copy apps/predbat/apps.yaml to the /config/appdaemon/apps/ directory in Home Assistant (or wherever you set appdaemon app_dir to) Edit in Home Assistant the /config/appdaemon/apps/apps.yaml file to configure Predbat If you later install with HACS then you must move the apps.yaml into /config/appdaemon/apps/predbat/config Solcast Install Predbat needs a solar forecast in order to predict solar generation and battery charging. If you do have solar panels its recommended to use the Solcast integration to retrieve your forecast solar generation. If you don't have one already register for a hobbyist account on Solcast account and enter the details of your system. You can create 2 sites maximum under one account, if you have more aspects then its suggested you average the angle based on the number of panels e.g. 7/10 240 degrees + 3/10 120 degrees. Hybrid inverters only : If your hybrid inverter capacity is smaller than your array peak capacity, tell Solcast that your AC capacity is equal to your DC capacity (both equal to your array peak kW). Otherwise, Solcast will provide forecast data clipped at your inverter capacity. Let predbat handle any necessary clipping instead. When supplied with the unclipped Solcast forecast data, predbat can allow in its model for PV in excess of the inverter capacity going to battery charging (bypassing the hybrid inverter). You will need your API key for the next steps: Predbat direct method Predbat can talk to Solcast directly, first get your API key from the Solcast web site, then uncomment the solcast settings in apps.yaml and set the key correctly. Keep in mind hobbyist accounts only have 10 polls per day so the refresh period needs to be less than this. If you use the same Solcast account for other automations the total polls needs to be kept under the limit or you will experience failures: solcast_host: 'https://api.solcast.com.au/' solcast_api_key: 'xxxx' solcast_poll_hours: 8 Solcast Home Assistant integration method Predbat is configured in apps.yaml to automatically discover the Solcast forecast entities in Home Assistant. Install the Solcast integration ( https://github.com/BJReplay/ha-solcast-solar ), create a free Solcast account , configure details of your solar arrays, and request an API key that you enter into the Solcast integration in Home Assistant. If you don't have solar then use a file editor to comment out the following lines from the Solar forecast part of the apps.yaml configuration: pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4)) Note that Predbat does not update Solcast integration for you so you will need to create your own Home Assistant automation that updates the solar forecast a few times a day (e.g. dawn, dusk, and just before your nightly charge slot). Keep in mind hobbyist accounts only have 10 polls per day so the refresh period needs to be less than this. If you use the same Solcast account for other automations the total polls needs to be kept under the limit or you will experience failures. Example Solcast update automation script: alias: Solcast update description: \"Update Solcast solar forecast\" trigger: - platform: time at: \"06:00:00\" - platform: time at: \"12:00:00\" - platform: time at: \"18:00:00\" - platform: time at: \"23:00:00\" condition: [] action: - service: solcast_solar.update_forecasts data: {} mode: single Manually run the automation and then make sure the Solcast integration is working in Home Assistant by going to Developer Tools / States, filtering on 'solcast', and checking that you can see the half-hourly solar forecasts in the Solcast entities. Energy Rates Predbat needs to know what your electricity import and export rates are in order to optimise battery charging and discharging to minimise your expenditure. These rates are configured in Predbat's apps.yaml configuration file. Follow the instructions in the Energy Rates document. Note: that if you are using the Octopus integration the 'sensor.octopus_xxx' and 'event.octopus_xxx' entities must have a similar pattern of names for Predbat to work correctly - see the FAQ's if they are not. Configuring Predbat You will need to use a file editor (either the File editor or Studio Code Server add-on) to edit the apps.yaml file in Home Assistant to configure Predbat - see Configuring apps.yaml . When Predbat starts up initially it will perform a sanity check of the AppDaemon configuration itself and confirm the right files are present. You will see this check in the log, should it fail a warning will be issued and predbat.status will also reflect the warning. While the above warning might not prevent Predbat from starting up, you should fix the issue ASAP as it may cause future problems. Predbat Output and Configuration Controls As described above, the basic configuration of Predbat is held in the apps.yaml configuration file. When Predbat first runs it will create a number of output and configuration control entities in Home Assistant which are used to fine-tune how Predbat operates. The entities are all prefixed predbat and can be seen (and changed) from the Settings / Devices & Services / Entities list in Home Assistant. It is recommended that you create a dashboard page with all the required entities to control Predbat and another page to display Predbat's charging and discharging plan for your battery. The Output Data section describes these points in more detail. The Home Assistant entity predbat.status contains details of what status Predbat is currently in (e.g. Idle, Charging, Error). Detailed progress messages and error logging is written to the Predbat logfile which you can view within Home Assistant using a file editor. The Predbat Configuration Guide gives an overview of the main Predbat configuration items and detail of 'standard Predbat configuration' settings for different electricity tariff types - e.g. a cheap overnight rate, multiple import rates during the day, and variable tariffs such as Agile, etc. The detailed Predbat Customisation Guide details all the Predbat configuration items (switches, input numbers, etc) in Home Assistant, and what each of them does. Ready to light the touch-paper By now you should have successfully installed and configured Predbat in AppDaemon and the other components it is dependent upon (e.g. GivTCP, Solcast, Octopus Integration). You have checked the Predbat AppDaemon log file doesn't have any errors (there is a lot of output in the logfile, this is normal). You have configured predbat's control entities, created a couple of dashboard pages to control and monitor Predbat, and are ready to start Predbat running. In order to enable Predbat you must delete the 'template: True' line in apps.yaml once you are happy with your configuration. You may initially want to set select.predbat_mode to Monitor to see how Predbat operates, e.g. by studying the Predbat Plan . In Monitor mode Predbat will monitor (but not change) the current inverter settings and predict the battery SoC based on predicted Solar Generation and House Load. NB: In Monitor mode Predbat will NOT plan any battery charge or discharge activity of its own, it will report on the predicted battery charge level based on the current inverter charge & discharge settings, predicted house load and predicted solar generation. The recommended next step is to start Predbat planning your inverter charging and discharging activity but not (yet) make any changes to the inverter. This enables you to get a feel for the Predbat plan and customise Predbat's settings to meet your needs. Set select.predbat_mode to the correct mode of operation for your system - usually 'Control charge' or 'Control charge & discharge'. ALSO you should set switch.predbat_set_read_only to True to stop Predbat making any changes to your inverter. Once you are happy with the plan Predbat is producing, and are ready to let Predbat start controlling your inverter charging and discharging, set the switch switch.predbat_set_read_only to False and Predbat will start controlling your inverter. You can see the planned charging and discharging activity in the Predbat Plan . Updating Predbat Note that any future updates to Predbat will not overwrite the apps.yaml configuration file that you have tailored to your setup. If new Predbat releases introduce new features to apps.yaml you may therefore need to manually copy across the new apps.yaml settings from the Template apps.yaml . Update via Home Assistant Recommended Predbat can now be updated using the Home Assistant update feature. We a new release is available you should see it in settings: Click on the update and select install: HACS Update Not Recommended HACS checks for updates and new releases only once a day by default, you can however force it to check again, or download a specific version by using the 'Redownload' option from the top-right three dots menu for Predbat in the HACS Automation section. NOTE: If you update Predbat through HACS you may need to restart AppDaemon as it sometimes reads the config wrongly during the update. (If this happens you will get a template configuration error in the entity predbat.status ). Go to Settings, Add-ons, AppDaemon, and click 'Restart'. If you update Predbat via Home Assistant or via its build-in update then HACS will not know about this. Predbat built-in update Recommended for manual selection of versions or automatic updates Predbat can now update itself, just select the version of Predbat you want to install from the select.predbat_update drop down menu, the latest version will be at the top of the list. Predbat will update itself and automatically restart. Alternatively, if you turn on switch.predbat_auto_update , Predbat will automatically update itself as new releases are published on Github. If you have used the Combined AppDaemon and Predbat add-on installation method then once installed and configured you should update Predbat to the latest version by using the select.predbat_update selector or by enabling the switch.predbat_auto_update . Manual update of Predbat Expert only You can go to Github and download predbat.py from the releases tab and then manually copy this file over the existing version in /config/appdaemon/apps/batpred/ manually.","title":"Install details"},{"location":"install/#install","text":"These instructions will take you through the process of installing and configuring Predbat for first time use. It's recommended that you watch the Predbat Video Guides before you start. We have tried to make the documentation as comprehensive as possible but a level of familiarity with the basics of Home Assistant, Add-on's, Integrations, Entities, File Editing and YAML is assumed. There are plenty of \"Home Assistant basics\" tutorials on YouTube, but here are a few useful videos to introduce you to Home Assistant and displaying inverter data: What is Home Assistant from Smart Home Junkie YAML Basics from This Smart Home Installing GivTCP and Mosquitto Add-on's from Speak to the Geek Installing HACS from Speak to the Geek Setting up the Energy dashboard for GivEnergy inverters from Speak to the Geek Power Flow Card Plus from Speak to the Geek If you get stuck, please read the FAQ's and if necessary raise a Github ticket for support.","title":"Install"},{"location":"install/#inverter-control-integration-install","text":"You will need to install an integration to communicate with and control your inverter. The specific integration you need will depend on the brand of inverter you have: Brand Integration Github Link GivEnergy GivTCP https://github.com/britkat1980/giv_tcp GivEnergy GivEnergy Cloud https://github.com/springfall2008/ge_cloud GivEnergy EMS GivEnergy Cloud https://github.com/springfall2008/ge_cloud Solis SolaX ModBus https://github.com/wills106/homeassistant-solax-modbus Solax Gen4 Solax Modbus https://github.com/wills106/homeassistant-solax-modbus Sofar Sofar MQTT https://github.com/cmcgerty/Sofar2mqtt Huawei Huawei Modbus https://github.com/wlcrs/huawei_solar SolarEdge SolarEdge Modbus https://github.com/WillCodeForCats/solaredge-modbus-multi SunSynk SunSynk Modbus https://github.com/kellerza/sunsynk Predbat was originally written for GivEnergy inverters controlled by the GivTCP add-on but has been extended for other inverter types. Please see Other Inverters for details on the install details. Follow the installation and configuration instructions appropriate for your inverter so that Home Assistant is able to 'see' and manage your inverter. You will need at least 24 hours history in Home Assistant for Predbat to work correctly, the default is 7 days (but you configure this back to 1 day if you need to).","title":"Inverter Control Integration install"},{"location":"install/#editing-configuration-files-in-home-assistant","text":"The basic configuration for Predbat is stored in a configuration file called apps.yaml . A standard template apps.yaml file will be installed as part of the Predbat installation and you will need to edit and customise this configuration file for your own system setup. You will therefore need a method of editing configuration files within your Home Assistant environment. There are severals ways to achieve this in Home Assistant, but two of the simplest are to use either the File Editor or Studio Code Server add-on's. Whichever you use is a personal preference. File Editor is a bit simpler, Studio Code Server is more powerful but does require HACS (the Home Assistant Community Store) to be installed first. If you do not have one of these file editors already installed in Home Assistant: For Studio Code Server you will need to install HACS first if you don't currently have it installed Go to Settings / Add-ons / Add-on Store (bottom right) Scroll down the add-on store list, to find either 'File editor' or 'Studio Code Server' as appropriate, click on the add-on, click 'INSTALL' Once the editor has been installed, ensure that the 'Start on boot' option is turned on, and click 'START' to start the add-on Thereafter whenever you need to edit a configuration file in Home Assistant you can navigate to Settings / Add-on's / editor_you_chose_to_use / 'OPEN WEB UI'. You can also turn the 'Show in sidebar' option on to give a quicker way to directly access the editor. If you are using the File Editor to edit Predbat's configuration files, you will need to turn OFF the Enforce Basepath option in order to access files in different directories (i.e. within the appdaemon directory): From the File editor add-on page, click on the 'Configuration' tab to change this setting). It is set to 'On' by default: If you are using Studio Code Server it will default to showing just files and folders in the /config directory. To access the entire HA directory structure, click the three horizontal bars to the left of 'Explorer', File, Open Folder, type '/' (root) and click OK.","title":"Editing Configuration Files in Home Assistant"},{"location":"install/#predbat-add-on-install","text":"Recommended The simplest way to install Predbat now is with the Predbat add-on. Go to settings, add-ons, select Add-on Store, three dots on the top right, Repositories, then add the following repo ' https://github.com/springfall2008/predbat_addon ' to the list and click close. Now refresh the list and find Predbat, click on it and click 'install'. Ensure 'start on boot' is enabled and click 'start'. NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. These are located under the Home Assistant directory /addon_configs/6adb4f0d_predbat which contains: predbat.log - Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below. You can use your file editor (i.e. 'File editor' or 'Studio Code Server' add-on) to open the directory /addon_configs/6adb4f0d_predbat and view these files. If you have used the Predbat add-on installation method you do not need to install HACS or AppDaemon so you can skip directly to Solcast install below.","title":"Predbat add-on install"},{"location":"install/#appdaemon-predbat-combined-install","text":"Another way to install Predbat now is with a combined AppDaemon/Predbat add-on. This is a fork of AppDaemon which automatically includes an install of Predbat. Installing the combined AppDaemon-predbat add-on is thus simpler for new users as they do not need to install HACS, AppDaemon and Predbat as three separate installation steps. If you are already running AppDaemon then the original installation method for Predbat still exists, is still supported, and is described below in Predbat Installation into AppDaemon . To install the combined AppDaemon-predbat add-on: Go to Settings / Add-ons / Add-on Store (bottom right), click the three dots in the top right, then Repositories and type https://github.com/springfall2008/appdaemon-predbat ', click ADD, then CLOSE. In order to refresh the list of available add-on's, navigate back through Settings / Add-ons / Add-on Store, scroll down and select 'AppDaemon with Predbat' Click INSTALL and wait for the add-on to be installed Once it has finished installing, ensure that the 'Start on boot' option is turned on, then click 'START' NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. These are located under the Home Assistant directory /addon_configs/46f69597_appdaemon-predbat which contains: predbat.log - Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below. You can use your file editor (i.e. 'File editor' or 'Studio Code Server' add-on) to open the directory /addon_configs/46f69597_appdaemon-predbat and view these files. If you have used the AppDaemon-predbat add-on installation method you do not need to install HACS or AppDaemon so you can skip directly to Solcast install below.","title":"AppDaemon-Predbat combined install"},{"location":"install/#predbat-installation-into-appdaemon","text":"This is the \"classic\" way of installing Predbat, to firstly install HACS (the Home Assistant Community Store), then install the AppDaemon add-on, and finally install Predbat from HACS to run within AppDaemon.","title":"Predbat installation into AppDaemon"},{"location":"install/#hacs-install","text":"Predbat and AppDaemon are available through the Home Assistant Community Store (HACS). You can install Predbat manually (see below) but its usually easier to install it through HACS. Install HACS if you haven't already ( https://hacs.xyz/docs/setup/download ) Enable AppDaemon in HACS: https://hacs.xyz/docs/categories/appdaemon_apps/","title":"HACS install"},{"location":"install/#appdaemon-install","text":"Predbat is written in Python and runs on a continual loop (default every 5 minutes) within the AppDaemon add-on to Home Assistant. The next task therefore is to install and configure AppDaemon. Install the AppDaemon add-on https://github.com/hassio-addons/addon-appdaemon Once AppDaemon has finished installing, ensure that the 'Start on boot' option is turned on, then click 'START' You will need to edit the appdaemon.yaml configuration file for AppDaemon and so will need to have either the File Editor or Studio Code Server add-on's installed first Find the appdaemon.yaml file in the directory /addon_configs/a0d7b954_appdaemon : Add to the appdaemon.yaml configuration file: A section app_dir which should refer to the directory /homeassistant/appdaemon/apps where Predbat will be installed Ensure that the time_zone is set correctly (e.g. Europe/London) Add thread_duration_warning_threshold: 120 in the appdaemon section It's recommended you also add a logs section and specify a new logfile location so that you can see the complete logs, I set mine to /homeassistant/appdaemon/appdaemon.log and increase the logfile maximum size and number of logfile generations to capture a few days worth of logs. Example AppDaemon config in appdaemon.yaml : appdaemon: latitude: 52.379189 longitude: 4.899431 elevation: 2 time_zone: Europe/London thread_duration_warning_threshold: 120 plugins: HASS: type: hass app_dir: /homeassistant/appdaemon/apps http: url: http://homeassistant.local:5050 admin: api: hadashboard: # write log records to a file, retaining 9 versions, rather than the standard appdaemon log logs: main_log: filename: /homeassistant/appdaemon/appdaemon.log log_generations: 9 log_size: 10000000 CAUTION: If you are upgrading AppDaemon from an older version to version 0.15.2 or above you need to follow these steps to ensure Predbat continues working. These are only required if you are upgrading AppDaemon from an old version, they're not required for new installations of AppDaemon: Make sure you have access to the HA filesystem, e.g. I use the Samba add-on and connect to the drives on my Mac, but you can use ssh also. Update AppDaemon to the latest version Go into the directory /addon_configs/a0d7b954_appdaemon and edit appdaemon.yaml . You need to add app_dir (see above) to point to the old location and update your logfile location (if you have set it). You should remove the line that points to secrets.yaml (most people don't use this file) or adjust it's path to the new location ( /homeassistant/secrets.yaml ) Move the entire 'apps' directory from /addon_configs/a0d7b954_appdaemon (new location) to /config/appdaemon (the old location) Restart AppDaemon Check it has started and confirm Predbat is running correctly again.","title":"AppDaemon install"},{"location":"install/#install-predbat-through-hacs","text":"If you install Predbat through HACS, once installed you will get automatic updates for each new release of Predbat! In HACS, click on Automation Click on the three dots in the top right corner, choose Custom Repositories Add https://github.com/springfall2008/batpred as a custom repository of Category 'AppDaemon' and click 'Add' Click Explore and download repositories (bottom right), type 'Predbat' in the search box, select the Predbat Repository, then click 'Download' to install the Predbat app. NOTE: Throughout the rest of the Predbat documentation you will find reference to the Predbat configuration file apps.yaml and the Predbat logfile. As you are following the 'install Predbat through HACS' installation method these are located under the Home Assistant directory /config/appdaemon/ which contains: appdaemon.log - AppDaemon and Predbat's active logfile that reports detail of what Predbat is doing, and details of any errors apps/batpred/config/apps.yaml - Predbat's configuration file which will need to be customised to your system and requirements. This configuration process is described below.","title":"Install Predbat through HACS"},{"location":"install/#predbat-manual-install","text":"A manual install is suitable for those running Docker type systems where HACS does not function correctly and you had to manually install AppDaemon. Note: Not recommended if you are using HACS Copy the file apps/predbat/predbat.py to the /config/appdaemon/apps/ directory in Home Assistant (or wherever you set appdaemon app_dir to) Copy apps/predbat/apps.yaml to the /config/appdaemon/apps/ directory in Home Assistant (or wherever you set appdaemon app_dir to) Edit in Home Assistant the /config/appdaemon/apps/apps.yaml file to configure Predbat If you later install with HACS then you must move the apps.yaml into /config/appdaemon/apps/predbat/config","title":"Predbat manual install"},{"location":"install/#solcast-install","text":"Predbat needs a solar forecast in order to predict solar generation and battery charging. If you do have solar panels its recommended to use the Solcast integration to retrieve your forecast solar generation. If you don't have one already register for a hobbyist account on Solcast account and enter the details of your system. You can create 2 sites maximum under one account, if you have more aspects then its suggested you average the angle based on the number of panels e.g. 7/10 240 degrees + 3/10 120 degrees. Hybrid inverters only : If your hybrid inverter capacity is smaller than your array peak capacity, tell Solcast that your AC capacity is equal to your DC capacity (both equal to your array peak kW). Otherwise, Solcast will provide forecast data clipped at your inverter capacity. Let predbat handle any necessary clipping instead. When supplied with the unclipped Solcast forecast data, predbat can allow in its model for PV in excess of the inverter capacity going to battery charging (bypassing the hybrid inverter). You will need your API key for the next steps:","title":"Solcast Install"},{"location":"install/#predbat-direct-method","text":"Predbat can talk to Solcast directly, first get your API key from the Solcast web site, then uncomment the solcast settings in apps.yaml and set the key correctly. Keep in mind hobbyist accounts only have 10 polls per day so the refresh period needs to be less than this. If you use the same Solcast account for other automations the total polls needs to be kept under the limit or you will experience failures: solcast_host: 'https://api.solcast.com.au/' solcast_api_key: 'xxxx' solcast_poll_hours: 8","title":"Predbat direct method"},{"location":"install/#solcast-home-assistant-integration-method","text":"Predbat is configured in apps.yaml to automatically discover the Solcast forecast entities in Home Assistant. Install the Solcast integration ( https://github.com/BJReplay/ha-solcast-solar ), create a free Solcast account , configure details of your solar arrays, and request an API key that you enter into the Solcast integration in Home Assistant. If you don't have solar then use a file editor to comment out the following lines from the Solar forecast part of the apps.yaml configuration: pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4)) Note that Predbat does not update Solcast integration for you so you will need to create your own Home Assistant automation that updates the solar forecast a few times a day (e.g. dawn, dusk, and just before your nightly charge slot). Keep in mind hobbyist accounts only have 10 polls per day so the refresh period needs to be less than this. If you use the same Solcast account for other automations the total polls needs to be kept under the limit or you will experience failures. Example Solcast update automation script: alias: Solcast update description: \"Update Solcast solar forecast\" trigger: - platform: time at: \"06:00:00\" - platform: time at: \"12:00:00\" - platform: time at: \"18:00:00\" - platform: time at: \"23:00:00\" condition: [] action: - service: solcast_solar.update_forecasts data: {} mode: single Manually run the automation and then make sure the Solcast integration is working in Home Assistant by going to Developer Tools / States, filtering on 'solcast', and checking that you can see the half-hourly solar forecasts in the Solcast entities.","title":"Solcast Home Assistant integration method"},{"location":"install/#energy-rates","text":"Predbat needs to know what your electricity import and export rates are in order to optimise battery charging and discharging to minimise your expenditure. These rates are configured in Predbat's apps.yaml configuration file. Follow the instructions in the Energy Rates document. Note: that if you are using the Octopus integration the 'sensor.octopus_xxx' and 'event.octopus_xxx' entities must have a similar pattern of names for Predbat to work correctly - see the FAQ's if they are not.","title":"Energy Rates"},{"location":"install/#configuring-predbat","text":"You will need to use a file editor (either the File editor or Studio Code Server add-on) to edit the apps.yaml file in Home Assistant to configure Predbat - see Configuring apps.yaml . When Predbat starts up initially it will perform a sanity check of the AppDaemon configuration itself and confirm the right files are present. You will see this check in the log, should it fail a warning will be issued and predbat.status will also reflect the warning. While the above warning might not prevent Predbat from starting up, you should fix the issue ASAP as it may cause future problems.","title":"Configuring Predbat"},{"location":"install/#predbat-output-and-configuration-controls","text":"As described above, the basic configuration of Predbat is held in the apps.yaml configuration file. When Predbat first runs it will create a number of output and configuration control entities in Home Assistant which are used to fine-tune how Predbat operates. The entities are all prefixed predbat and can be seen (and changed) from the Settings / Devices & Services / Entities list in Home Assistant. It is recommended that you create a dashboard page with all the required entities to control Predbat and another page to display Predbat's charging and discharging plan for your battery. The Output Data section describes these points in more detail. The Home Assistant entity predbat.status contains details of what status Predbat is currently in (e.g. Idle, Charging, Error). Detailed progress messages and error logging is written to the Predbat logfile which you can view within Home Assistant using a file editor. The Predbat Configuration Guide gives an overview of the main Predbat configuration items and detail of 'standard Predbat configuration' settings for different electricity tariff types - e.g. a cheap overnight rate, multiple import rates during the day, and variable tariffs such as Agile, etc. The detailed Predbat Customisation Guide details all the Predbat configuration items (switches, input numbers, etc) in Home Assistant, and what each of them does.","title":"Predbat Output and Configuration Controls"},{"location":"install/#ready-to-light-the-touch-paper","text":"By now you should have successfully installed and configured Predbat in AppDaemon and the other components it is dependent upon (e.g. GivTCP, Solcast, Octopus Integration). You have checked the Predbat AppDaemon log file doesn't have any errors (there is a lot of output in the logfile, this is normal). You have configured predbat's control entities, created a couple of dashboard pages to control and monitor Predbat, and are ready to start Predbat running. In order to enable Predbat you must delete the 'template: True' line in apps.yaml once you are happy with your configuration. You may initially want to set select.predbat_mode to Monitor to see how Predbat operates, e.g. by studying the Predbat Plan . In Monitor mode Predbat will monitor (but not change) the current inverter settings and predict the battery SoC based on predicted Solar Generation and House Load. NB: In Monitor mode Predbat will NOT plan any battery charge or discharge activity of its own, it will report on the predicted battery charge level based on the current inverter charge & discharge settings, predicted house load and predicted solar generation. The recommended next step is to start Predbat planning your inverter charging and discharging activity but not (yet) make any changes to the inverter. This enables you to get a feel for the Predbat plan and customise Predbat's settings to meet your needs. Set select.predbat_mode to the correct mode of operation for your system - usually 'Control charge' or 'Control charge & discharge'. ALSO you should set switch.predbat_set_read_only to True to stop Predbat making any changes to your inverter. Once you are happy with the plan Predbat is producing, and are ready to let Predbat start controlling your inverter charging and discharging, set the switch switch.predbat_set_read_only to False and Predbat will start controlling your inverter. You can see the planned charging and discharging activity in the Predbat Plan .","title":"Ready to light the touch-paper"},{"location":"install/#updating-predbat","text":"Note that any future updates to Predbat will not overwrite the apps.yaml configuration file that you have tailored to your setup. If new Predbat releases introduce new features to apps.yaml you may therefore need to manually copy across the new apps.yaml settings from the Template apps.yaml .","title":"Updating Predbat"},{"location":"install/#update-via-home-assistant","text":"Recommended Predbat can now be updated using the Home Assistant update feature. We a new release is available you should see it in settings: Click on the update and select install:","title":"Update via Home Assistant"},{"location":"install/#hacs-update","text":"Not Recommended HACS checks for updates and new releases only once a day by default, you can however force it to check again, or download a specific version by using the 'Redownload' option from the top-right three dots menu for Predbat in the HACS Automation section. NOTE: If you update Predbat through HACS you may need to restart AppDaemon as it sometimes reads the config wrongly during the update. (If this happens you will get a template configuration error in the entity predbat.status ). Go to Settings, Add-ons, AppDaemon, and click 'Restart'. If you update Predbat via Home Assistant or via its build-in update then HACS will not know about this.","title":"HACS Update"},{"location":"install/#predbat-built-in-update","text":"Recommended for manual selection of versions or automatic updates Predbat can now update itself, just select the version of Predbat you want to install from the select.predbat_update drop down menu, the latest version will be at the top of the list. Predbat will update itself and automatically restart. Alternatively, if you turn on switch.predbat_auto_update , Predbat will automatically update itself as new releases are published on Github. If you have used the Combined AppDaemon and Predbat add-on installation method then once installed and configured you should update Predbat to the latest version by using the select.predbat_update selector or by enabling the switch.predbat_auto_update .","title":"Predbat built-in update"},{"location":"install/#manual-update-of-predbat","text":"Expert only You can go to Github and download predbat.py from the releases tab and then manually copy this file over the existing version in /config/appdaemon/apps/batpred/ manually.","title":"Manual update of Predbat"},{"location":"installation-summary/","text":"Installation summary Please see the sections below for how to achieve each step. This is just a checklist of things: Before you start, its recommended that you watch the step by step installation videos, see the video guides section for those and other videos Make sure the right inverter control module is installed and running - GivTCP or Solax install Install a file editor (either the File editor or Studio Code Server add-on) to enable you to edit configuration files if you haven't already - Editing configuration files Install Predbat, either: a) Install the Predbat add-on - Predbat add-on install b) Install the AppDaemon-Predbat combined add-on - AppDaemon-Predbat combined install c) Complete the separate installation steps: i) Install HACS if you haven't already - HACS install ii) Install AppDaemon if you haven't already - AppDaemon install iii) Install Predbat using HACS - Predbat install Install Solcast if you haven't already Solcast install . If using the Solcast integration then create an automation to update Solcast a times a day, and check that you see the Solcast data in Home Assistant Follow the Energy Rates instructions to tell Predbat what your import and export energy rates are. If you use Octopus Energy then this includes installing the Octopus Energy integration (if you haven't already) - Octopus Energy Edit Predbat's apps.yaml configuration file to to match your system - apps.yaml settings The apps.yaml file will be in either the directory /addon_configs/46f69597_appdaemon-predbat/apps or /config/appdaemon/apps/predbat/config/ depending on which Predbat install method you used. Inverter settings match the names in GivTCP - should be automatic (but if you have 2 names you will have to edit apps.yaml) You have set the right number of inverters ( num_inverters ) Adjust your inverter_limit and export_limit as required You have your energy rates set correctly either using Octopus Energy integration or entered manually That the Solcast plugin is matching the configuration correctly - should be automatic If you have a car charging sensor you might want to add that also to help make predictions more accurate Add the Predbat entities to your dashboard - Output data Follow the Configuration Guide to set 'standard' Predbat configuration settings depending on your import and export tariffs The detailed Customisation Guide lists all Predbat's controls and settings in Home Assistant that can be tuned for your system Set up the Predbat Plan card so you can check what Predbat is planning to do - Create the Predbat Plan card Set up the Apex Charts for other views on what Predbat is doing - Creating the charts Then check Predbat is working correctly: Look at the Predbat AppDaemon log file and make sure you have no errors or warnings that are unexpected Comment out or delete the template: True line in apps.yaml when you are ready to start Predbat The predbat.status in Home Assistant should be 'Idle' (if there are any errors then they are reported here too) Start with select.predbat_mode set to 'Monitor' but remember to change it later to enable Predbat to control your inverter Look at the FAQ for help Overview of the key configuration elements:","title":"Install summary"},{"location":"installation-summary/#installation-summary","text":"Please see the sections below for how to achieve each step. This is just a checklist of things: Before you start, its recommended that you watch the step by step installation videos, see the video guides section for those and other videos Make sure the right inverter control module is installed and running - GivTCP or Solax install Install a file editor (either the File editor or Studio Code Server add-on) to enable you to edit configuration files if you haven't already - Editing configuration files Install Predbat, either: a) Install the Predbat add-on - Predbat add-on install b) Install the AppDaemon-Predbat combined add-on - AppDaemon-Predbat combined install c) Complete the separate installation steps: i) Install HACS if you haven't already - HACS install ii) Install AppDaemon if you haven't already - AppDaemon install iii) Install Predbat using HACS - Predbat install Install Solcast if you haven't already Solcast install . If using the Solcast integration then create an automation to update Solcast a times a day, and check that you see the Solcast data in Home Assistant Follow the Energy Rates instructions to tell Predbat what your import and export energy rates are. If you use Octopus Energy then this includes installing the Octopus Energy integration (if you haven't already) - Octopus Energy Edit Predbat's apps.yaml configuration file to to match your system - apps.yaml settings The apps.yaml file will be in either the directory /addon_configs/46f69597_appdaemon-predbat/apps or /config/appdaemon/apps/predbat/config/ depending on which Predbat install method you used. Inverter settings match the names in GivTCP - should be automatic (but if you have 2 names you will have to edit apps.yaml) You have set the right number of inverters ( num_inverters ) Adjust your inverter_limit and export_limit as required You have your energy rates set correctly either using Octopus Energy integration or entered manually That the Solcast plugin is matching the configuration correctly - should be automatic If you have a car charging sensor you might want to add that also to help make predictions more accurate Add the Predbat entities to your dashboard - Output data Follow the Configuration Guide to set 'standard' Predbat configuration settings depending on your import and export tariffs The detailed Customisation Guide lists all Predbat's controls and settings in Home Assistant that can be tuned for your system Set up the Predbat Plan card so you can check what Predbat is planning to do - Create the Predbat Plan card Set up the Apex Charts for other views on what Predbat is doing - Creating the charts Then check Predbat is working correctly: Look at the Predbat AppDaemon log file and make sure you have no errors or warnings that are unexpected Comment out or delete the template: True line in apps.yaml when you are ready to start Predbat The predbat.status in Home Assistant should be 'Idle' (if there are any errors then they are reported here too) Start with select.predbat_mode set to 'Monitor' but remember to change it later to enable Predbat to control your inverter Look at the FAQ for help Overview of the key configuration elements:","title":"Installation summary"},{"location":"other-inverters/","text":"Other Inverters PredBat was originally written for GivEnergy inverters using the GivTCP integration but this is now being extended to other models: Name Integration Template GivEnergy with GivTCP GivTCP givenergy_givtcp.yaml Solis Hybrid inverters Solax Modbus integration ginlong_solis.yaml Solax Gen4 inverters Solax Modbus integration in Modbus Power Control Mode solax_sx4.yaml Sofar inverters Sofar MQTT integration sofar.yaml Huawei inverters Huawei Solar huawei.yaml SolarEdge inverters Solaredge Modbus Multi solaredge.yaml Givenergy with GE Cloud ge_cloud givenergy_cloud.yaml Givenergy with GE Cloud EMC ge_cloud givenergy_ems.yaml SunSynk Sunsynk sunsynk.yaml Note that support for all these inverters is in various stages of development. Please expect things to fail and report them as Issues on Github. Please also ensure you have set up enhanced logging in AppDaemon as described here. GivEnergy with GivTCP Please see the main installation instructions, you will need to install GivTCP first and then use the supplied template Solis Inverters To run PredBat with Solis hybrid inverters, follow the following steps: Install PredBat as per the Installation Summary Ensure that you have the Solax Modbus integration running. There are a number of entities which this integration disables by default that you will need to enable via the Home Assistant GUI: Name Description sensor.solisx_rtc Real Time Clock sensor.solisx_battery_power Battery Power Instead of apps.yaml use ginlong_solis.yaml from this Repo as your starting template. The majority of settings should be correct but please check. You will need to un-comment the template line to enable it. Save it to the config/appdaemon/apps/predbat/config folder. Set solax_modbus_new in apps.yaml to True if you have integration version 2024.03.2 or greater Ensure that the inverter is set Control Mode 35 - on the Solax integration this is Timed Charge/Discharge . If you want to use the Reserve functionality within PredBat you will need to select Backup/Reserve (code 51) instead but be aware that this is not fully tested. In due course these mode settings will be incorporated into the code. Solax Gen4 Inverters Use the template configuration from: solax.sx4.yaml Set solax_modbus_new in apps.yaml to True if you have integration version 2024.03.2 or greater Please see this ticket in Github for ongoing discussion: https://github.com/springfall2008/batpred/issues/259 Sofar Inverters For this integration the key elements are: Hardware - sofar2mqtt EPS board - Relatively easy to solder and flash, or can be bought pre-made. Software - Sofar MQTT integration - MQTT integration Home Assistant configuration - sofar_inverter.yaml package (in templates directory) with the MQTT sensors. This is the default with a couple of additional inputs to support battery capacity. This should be installed in Home Assistant. Predbat configuration - sofar.yaml template for Predbat (in templates directory). This file should be copied to apps.yaml Please note that the inverter needs to be put into \"Passive Mode\" for the sofar2mqtt to control the inverter. This integration has various limitations, it can charge and discharge the battery but does not have finer control over reserve and target SOC% Note: You will need to change the min reserve in Home Assistant to match your minimum battery level ( input_number.predbat_set_reserve_min ). Please see this ticket in Github for ongoing discussions: https://github.com/springfall2008/batpred/issues/395 Huawei Inverters Discussion ticket is here: https://github.com/springfall2008/batpred/issues/684 Please copy the template apps.yaml from https://github.com/springfall2008/batpred/blob/main/templates/huawei.yaml and modify for your system Ensure you set input_number.predbat_set_reserve_min to the minimum value for your system which maybe 12% SolarEdge Inverters Discussion ticket is here: https://github.com/springfall2008/batpred/issues/181 Please copy the template apps.yaml from https://github.com/springfall2008/batpred/blob/main/templates/solaredge.yaml and modify for your system Ensure that number.solaredge_i1_storage_command_timeout is set to reasonably high value e.g. 3600 seconds to avoid the commands issued being cancelled Power Control Options, as well as Enable Battery Control, must be enabled in the Solaredge Modbus Multi integration configuration, and switch.solaredge_i1_advanced_power_control must be on. For pv_today , pv_power and load_power sensors to work you need to create this as a template within your Home Assistant configuration.yml Please see: https://gist.github.com/Ashpork/f80fb0d3cb22356a12ed24734065061c . These sensors are not critical so you can just comment it out in apps.yaml if you can't get it to work template: - sensor: - name: \"Solar Panel Production W\" unique_id: solar_panel_production_w unit_of_measurement: \"W\" icon: mdi:solar-power state: > {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %} {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %} {% if (i1_dc_power + b1_dc_power <= 0) %} 0 {% else %} {{ (i1_dc_power + b1_dc_power) }} {% endif %} availability: > {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number }} - name: \"Solar House Consumption W\" unique_id: solar_house_consumption_w unit_of_measurement: \"W\" icon: mdi:home state: > {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %} {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %} {% if (i1_ac_power - m1_ac_power <= 0) %} 0 {% else %} {{ (i1_ac_power - m1_ac_power) }} {% endif %} availability: > {{ states('sensor.solaredge_i1_ac_power') | is_number and states('sensor.solaredge_m1_ac_power') | is_number }} sensor: - platform: integration source: sensor.solar_panel_production_w method: left unit_prefix: k name: solar_panel_production_kwh Givenergy with ge_cloud This is experimental system, please discuss on the ticket: https://github.com/springfall2008/batpred/issues/905 First set up ge_cloud integration using your API key https://github.com/springfall2008/ge_cloud Now copy the template givenergy_cloud.yaml from templates into your apps.yaml and edit Set geserial to your inverter serial Make sure discharge down to registers are set to 4% and slots 2, 3 and 4 for charge and discharge are disabled (if you have them) Givenergy with EMC First set up ge_cloud integration using your API key https://github.com/springfall2008/ge_cloud Now copy the template givenergy_emc.yaml from templates into your apps.yaml and edit Set geserial to your first inverter serial and geserial2 to the second (look in HA for entity names) Set geseriale to the EMS inverter serial number (look in HA for entity names) Turn off slots 2, 3 and 4 for charge, export and discharge as Predbat will only use 1 slot (set the start and end times to 00:00) Sunsynk This is experimental system, please discuss on the ticket: https://github.com/springfall2008/batpred/issues/1060 I want to add an unsupported inverter to Predbat First copy one of the template configurations that is close to your system and try to configure it to match the sensors you have Create a github ticket for support and add in what you know to the ticket Then find out how to control your inverter inside Home Assistant, ideally share any automation you have to control the inverter You can create a new inverter type in apps.yaml and change the options as to which controls it has The easy way to integrate is to use a HA service to start charges and discharges, edit the template below inverter_type: MINE inverter: name : \"My Shiny new Inverter\" has_rest_api: False has_mqtt_api: False has_service_api: True output_charge_control: \"power\" has_charge_enable_time: False has_discharge_enable_time: False has_target_soc: False has_reserve_soc: False charge_time_format: \"S\" charge_time_entity_is_option: False soc_units: \"%\" num_load_entities: 1 has_ge_inverter_mode\": False time_button_press: False clock_time_format: \"%Y-%m-%d %H:%M:%S\" write_and_poll_sleep: 2 has_time_window: False support_charge_freeze: False support_discharge_freeze\": False # Services to control charging/discharging charge_start_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Charge from Solar Power and Grid\" charge_stop_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Charge from Solar Power\" discharge_start_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Maximize Self Consumption\"","title":"Other Inverters"},{"location":"other-inverters/#other-inverters","text":"PredBat was originally written for GivEnergy inverters using the GivTCP integration but this is now being extended to other models: Name Integration Template GivEnergy with GivTCP GivTCP givenergy_givtcp.yaml Solis Hybrid inverters Solax Modbus integration ginlong_solis.yaml Solax Gen4 inverters Solax Modbus integration in Modbus Power Control Mode solax_sx4.yaml Sofar inverters Sofar MQTT integration sofar.yaml Huawei inverters Huawei Solar huawei.yaml SolarEdge inverters Solaredge Modbus Multi solaredge.yaml Givenergy with GE Cloud ge_cloud givenergy_cloud.yaml Givenergy with GE Cloud EMC ge_cloud givenergy_ems.yaml SunSynk Sunsynk sunsynk.yaml Note that support for all these inverters is in various stages of development. Please expect things to fail and report them as Issues on Github. Please also ensure you have set up enhanced logging in AppDaemon as described here.","title":"Other Inverters"},{"location":"other-inverters/#givenergy-with-givtcp","text":"Please see the main installation instructions, you will need to install GivTCP first and then use the supplied template","title":"GivEnergy with GivTCP"},{"location":"other-inverters/#solis-inverters","text":"To run PredBat with Solis hybrid inverters, follow the following steps: Install PredBat as per the Installation Summary Ensure that you have the Solax Modbus integration running. There are a number of entities which this integration disables by default that you will need to enable via the Home Assistant GUI: Name Description sensor.solisx_rtc Real Time Clock sensor.solisx_battery_power Battery Power Instead of apps.yaml use ginlong_solis.yaml from this Repo as your starting template. The majority of settings should be correct but please check. You will need to un-comment the template line to enable it. Save it to the config/appdaemon/apps/predbat/config folder. Set solax_modbus_new in apps.yaml to True if you have integration version 2024.03.2 or greater Ensure that the inverter is set Control Mode 35 - on the Solax integration this is Timed Charge/Discharge . If you want to use the Reserve functionality within PredBat you will need to select Backup/Reserve (code 51) instead but be aware that this is not fully tested. In due course these mode settings will be incorporated into the code.","title":"Solis Inverters"},{"location":"other-inverters/#solax-gen4-inverters","text":"Use the template configuration from: solax.sx4.yaml Set solax_modbus_new in apps.yaml to True if you have integration version 2024.03.2 or greater Please see this ticket in Github for ongoing discussion: https://github.com/springfall2008/batpred/issues/259","title":"Solax Gen4 Inverters"},{"location":"other-inverters/#sofar-inverters","text":"For this integration the key elements are: Hardware - sofar2mqtt EPS board - Relatively easy to solder and flash, or can be bought pre-made. Software - Sofar MQTT integration - MQTT integration Home Assistant configuration - sofar_inverter.yaml package (in templates directory) with the MQTT sensors. This is the default with a couple of additional inputs to support battery capacity. This should be installed in Home Assistant. Predbat configuration - sofar.yaml template for Predbat (in templates directory). This file should be copied to apps.yaml Please note that the inverter needs to be put into \"Passive Mode\" for the sofar2mqtt to control the inverter. This integration has various limitations, it can charge and discharge the battery but does not have finer control over reserve and target SOC% Note: You will need to change the min reserve in Home Assistant to match your minimum battery level ( input_number.predbat_set_reserve_min ). Please see this ticket in Github for ongoing discussions: https://github.com/springfall2008/batpred/issues/395","title":"Sofar Inverters"},{"location":"other-inverters/#huawei-inverters","text":"Discussion ticket is here: https://github.com/springfall2008/batpred/issues/684 Please copy the template apps.yaml from https://github.com/springfall2008/batpred/blob/main/templates/huawei.yaml and modify for your system Ensure you set input_number.predbat_set_reserve_min to the minimum value for your system which maybe 12%","title":"Huawei Inverters"},{"location":"other-inverters/#solaredge-inverters","text":"Discussion ticket is here: https://github.com/springfall2008/batpred/issues/181 Please copy the template apps.yaml from https://github.com/springfall2008/batpred/blob/main/templates/solaredge.yaml and modify for your system Ensure that number.solaredge_i1_storage_command_timeout is set to reasonably high value e.g. 3600 seconds to avoid the commands issued being cancelled Power Control Options, as well as Enable Battery Control, must be enabled in the Solaredge Modbus Multi integration configuration, and switch.solaredge_i1_advanced_power_control must be on. For pv_today , pv_power and load_power sensors to work you need to create this as a template within your Home Assistant configuration.yml Please see: https://gist.github.com/Ashpork/f80fb0d3cb22356a12ed24734065061c . These sensors are not critical so you can just comment it out in apps.yaml if you can't get it to work template: - sensor: - name: \"Solar Panel Production W\" unique_id: solar_panel_production_w unit_of_measurement: \"W\" icon: mdi:solar-power state: > {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %} {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %} {% if (i1_dc_power + b1_dc_power <= 0) %} 0 {% else %} {{ (i1_dc_power + b1_dc_power) }} {% endif %} availability: > {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number }} - name: \"Solar House Consumption W\" unique_id: solar_house_consumption_w unit_of_measurement: \"W\" icon: mdi:home state: > {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %} {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %} {% if (i1_ac_power - m1_ac_power <= 0) %} 0 {% else %} {{ (i1_ac_power - m1_ac_power) }} {% endif %} availability: > {{ states('sensor.solaredge_i1_ac_power') | is_number and states('sensor.solaredge_m1_ac_power') | is_number }} sensor: - platform: integration source: sensor.solar_panel_production_w method: left unit_prefix: k name: solar_panel_production_kwh","title":"SolarEdge Inverters"},{"location":"other-inverters/#givenergy-with-ge_cloud","text":"This is experimental system, please discuss on the ticket: https://github.com/springfall2008/batpred/issues/905 First set up ge_cloud integration using your API key https://github.com/springfall2008/ge_cloud Now copy the template givenergy_cloud.yaml from templates into your apps.yaml and edit Set geserial to your inverter serial Make sure discharge down to registers are set to 4% and slots 2, 3 and 4 for charge and discharge are disabled (if you have them)","title":"Givenergy with ge_cloud"},{"location":"other-inverters/#givenergy-with-emc","text":"First set up ge_cloud integration using your API key https://github.com/springfall2008/ge_cloud Now copy the template givenergy_emc.yaml from templates into your apps.yaml and edit Set geserial to your first inverter serial and geserial2 to the second (look in HA for entity names) Set geseriale to the EMS inverter serial number (look in HA for entity names) Turn off slots 2, 3 and 4 for charge, export and discharge as Predbat will only use 1 slot (set the start and end times to 00:00)","title":"Givenergy with EMC"},{"location":"other-inverters/#sunsynk","text":"This is experimental system, please discuss on the ticket: https://github.com/springfall2008/batpred/issues/1060","title":"Sunsynk"},{"location":"other-inverters/#i-want-to-add-an-unsupported-inverter-to-predbat","text":"First copy one of the template configurations that is close to your system and try to configure it to match the sensors you have Create a github ticket for support and add in what you know to the ticket Then find out how to control your inverter inside Home Assistant, ideally share any automation you have to control the inverter You can create a new inverter type in apps.yaml and change the options as to which controls it has The easy way to integrate is to use a HA service to start charges and discharges, edit the template below inverter_type: MINE inverter: name : \"My Shiny new Inverter\" has_rest_api: False has_mqtt_api: False has_service_api: True output_charge_control: \"power\" has_charge_enable_time: False has_discharge_enable_time: False has_target_soc: False has_reserve_soc: False charge_time_format: \"S\" charge_time_entity_is_option: False soc_units: \"%\" num_load_entities: 1 has_ge_inverter_mode\": False time_button_press: False clock_time_format: \"%Y-%m-%d %H:%M:%S\" write_and_poll_sleep: 2 has_time_window: False support_charge_freeze: False support_discharge_freeze\": False # Services to control charging/discharging charge_start_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Charge from Solar Power and Grid\" charge_stop_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Charge from Solar Power\" discharge_start_service: service: select.select_option entity_id: \"select.solaredge_i1_storage_command_mode\" option: \"Maximize Self Consumption\"","title":"I want to add an unsupported inverter to Predbat"},{"location":"output-data/","text":"Output data Displaying output data Each Predbat config item has an input_number or switch associated with it, you can find an auto-generated dashboard for your configuration in your AppDaemon configuration area under the filename predbat_dashboard.yaml . You will need to open that file in a Home Assistant file editor and copy the contents into a new dashboard page. You can also create a dashboard page using dynamic-entities-card.yaml for a dynamically created list of all Predbat entities which groups the entities by type and is collapsed by default to prevent screen clutter. Requires lovelace-collapsable-cards ( https://github.com/RossMcMillan92/lovelace-collapsable-cards ) and lovelace-auto-entities ( https://github.com/thomasloven/lovelace-auto-entities ) to be installed via HACS as well as the stock vertical stack card. Credit @DJBenson for the code. The Predbat Plan card is very useful for seeing the plan that Predbat has created - Create the Predbat Plan card . A set of Apex Charts can also be created to see graphically what Predbat plans to do - Creating the charts . Basic status switch.predbat_active - Automatically set by Predbat to On when Predbat is busy calculating or controlling your inverter, or Off when Predbat is waiting for the next time it needs to perform a plan calculation update. If you toggle this switch in Home Assistant it will force Predbat to perform an update now (useful for automations). predbat.status - Gives the current status & errors and logs any changes that Predbat makes to your inverter. The different Predbat status values and their meanings are detailed in what does predbat do . predbat.status additionally has the following attributes that are automatically populated: Last updated - date and time that Predbat last updated the plan Debug - A set of arrays containing Predbat's planned charging and discharging time windows and battery limits (in kWh) Version - version of Predbat that's running Error - binary value true or false depending upon whether Predbat is in an error status or nor Baseline data What your battery is expected to do with no changes made by Predbat: predbat.battery_hours_left - The number of hours left until your home battery is predicted to run out (stops at the maximum prediction time) predbat.charge_limit - The current charge limit used for the scenario in % predbat.charge_limit_kw - The current charge limit used for the scenario in kWh predbat.duration - The duration of the prediction maximum in hours predbat.load_energy - Predicted load energy in kWh predbat.pv_energy - Predicted PV energy in kWh predbat.export_energy - Predicted export energy in kWh predbat.import_energy - Predicted import energy in kWh predbat.import_energy_battery - Predicted import energy to charge your home battery in kWh predbat.import_energy_house - Predicted import energy not provided by your home battery (flat battery or above maximum discharge rate) predbat.soc_kw - Predicted state of charge (in kWh) at the end of the prediction, not very useful in itself, but holds all minute by minute prediction data (in attributes) which can be charted with Apex Charts (or similar) predbat.soc_min_kwh - The minimum battery level during the time period in kWh predbat.metric - Predicted cost metric for the next simulated period (in pence). Also contains data for charting cost in the entity attributes predbat.battery_power - Predicted battery power per minute, for charting predbat.battery_cycle - Predicted battery cycle in kWh (total kWh processed) predbat.pv_power - Predicted PV power per minute, for charting predbat.grid_power - Predicted Grid power per minute, for charting predbat.car_soc - Predicted car battery % input_number.predbat_iboost_today - Gives the amount of energy modelled that will be sent to the solar diverter today, increments during the day and is reset to zero at 11:30pm each night PV 10% baseline data The calculated baseline results under PV 10% scenario: predbat.soc_kw_base10 - As soc_kw but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.base10_pv_energy - Predicted PV 10% energy in kWh predbat.base10_metric - Predicted cost for PV 10% predbat.base10_export_energy- Predicted export energy for PV 10% predbat.base10_load_energy - Predicted load energy for PV 10% predbat.base10_import_energy- Predicted import energy for PV 10% Best Predbat outputs the following 'best' entities from the simulation based on the lowest cost consumption plan: predbat.best_battery_hours_left - Number of hours left under best plan predbat.best_export_energy - Predicted exports under best plan predbat_best_import_energy - Predicted imports under best plan predbat_best_load - Predicted best load energy predbat.best_pv_energy - Predicted Best PV energy in kWh predbat_best_import_energy_battery - Predicted imports to the battery under best SoC setting predbat_best_import_energy_house - Predicted imports to the house under best SoC setting predbat_soc_kw_best - Predicted best final state of charge (in kWh), holds minute by minute prediction data (in attributes) to be charted predbat.soc_kw_best_h1 - Single data point for the predicted state of charge in 1 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h8 - Single data point for the predicted state of charge in 8 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h12 - Single data point for the predicted state of charge in 12 hours time (useful for calibration charts, predicted vs actual) predbat_best_metric - The predicted cost if the proposed SoC % charge target is selected. Also contains data for charting cost in attributes. predbat.best_charge_limit - Predicted best battery charge limit in percent predbat.best_charge_limit_kw - Predicted best battery charge limit in kWh predbat.best_discharge_limit - Predicted best battery discharge limit in percent (will be 0% when discharging or 100% when not) predbat.best_discharge_limit_kw - Predicted best battery discharge limit in kWh predbat.battery_power_best - Predicted best battery power per minute, for charting predbat.battery_cycle_best - Predicted best battery cycle in kWh (total kWh processed) predbat.pv_power_best - Predicted best PV power per minute, for charting predbat.grid_power - Predicted best Grid power per minute, for charting predbat.car_soc_best - Predicted car battery % in best plan predbat.iboost_best - Gives the predicted energy going into the iBoost solar diverter Best PV 10% The calculated best results under the PV 10% scenario: predbat.soc_kw_best10 - As soc_kw_best but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.best10_pv_energy - Predicted best PV 10% energy in kWh predbat.best10_metric - Predicted best cost for PV 10% predbat.best10_export_energy- Predicted best export energy for PV 10% predbat.best10_load_energy - Predicted best load energy for PV 10% predbat.best10_import_energy- Predicted best import energy for PV 10% Battery status The following sensors are set based upon what Predbat is currently controlling the battery to do: binary_sensor.predbat_charging - Set to 'on' when Predbat is force charging the battery (from solar, or if that is insufficient, from grid import), or 'off' otherwise binary_sensor.predbat_discharging - Set to 'on' when Predbat is force discharging the battery for export income, 'off' otherwise. Useful for automations if for example you want to turn off car charging when the battery is being exported. Energy rate data Low import rate entities predbat.low_rate_cost - The lowest import rate cost in Pence predbat.low_rate_start - Start time of the next low import rate slot predbat.low_rate_end - End time of the next low import rate slot predbat.low_rate_cost_2, predbat.low_rate_start_2, predbat.low_rate_end_2 - The following low import rate slot binary_sensor.predbat_low_rate_slot - A sensor that is 'on' to indicate when there is a low energy rate slot active, 'off' otherwise. High export rate entities predbat.high_export_rate_cost - The highest export rate cost in Pence predbat.high_export_rate_start - Start time of the next high export rate slot predbat.high_export_rate_end - End time of the next high export rate slot predbat.high_export_rate_cost_2, predbat.high_export_rate_start_2, predbat.high_export_rate_end_2 - The following high export rate slot binary_sensor.predbat_high_export_rate_slot - A sensor that is 'on' to indicate when there is a high export rate slot active, 'off' otherwise. Other rate entities predbat.rates - The current energy rates in Pence (also can be charted) predbat.rates_export - The current energy export rates in Pence (also can be charted) predbat.cost_today - The total cost of energy so far today (since midnight) predbat.car_soc - The expected charge level of your car at the end of the simulation. Can also be charted. predbat.car_soc_best - The expected charge level of your car at the end of the simulation using the proposed SoC%/Window. Can also be charted. Car data binary_sensor.predbat_car_charging_slot - A binary sensor indicating when to charge your car (if car planning is enabled) - which can be used in an automation as described in Predbat led car charging predbat.car_charging_start - The time that car charging is planned to start at, in HH:MM:SS format. iBoost Solar Diverter data binary_sensor.predbat_iboost_active - A binary sensor indicating when there is excess solar and the solar diverter (e.g. iBoost, Eddi or just plain immersion heater) should be active, can be used for automations to trigger the immersion heater boost. Energy saving data predbat.cost_yesterday - A sensor that gives you your energy costs for yesterday (00:00-23:59 on the previous day). predbat.savings_yesterday_predbat - A sensor which tells you have much money Predbat saved you yesterday compared to not using Predbat and only charging at the lowest import rate in the 24 hour Period predbat.savings_total_predbat - A running total of the above predbat.savings_yesterday_pvbat - A sensor which tells you have much money you saved vs not having a PV and battery system at all (this includes in the Predbat savings). predbat.savings_total_pvbat - A running total of the above Solar forecast data sensor.predbat_pv_today - Tracks the PV forecast for today, attributes give the remaining amount today and the half hourly data. sensor.predbat_pv_tomorrow - Tracks the PV forecast for tomorrow, attributes give the remaining amount today and the half hourly data. Sample Predbat data out dashboard Predbat Logfile Predbat writes detailed logging, status and progress activity information to a logfile as it runs and so this file should be checked if predbat.status reports an error, or if you want to verify that Predbat is running OK. There is a lot of output in the logfile, this is normal! Depending upon whether you have used the combined AppDaemon/Predbat add-on installation method or the HACS, Appdaemon add-on then Predbat installation method , the logfile will be held in one of two directories in Home Assistant: /addon_configs/46f69597_appdaemon-predbat/predbat.log if you used the combined AppDaemon/Predbat add-on installation method or /homeassistant/appdaemon/appdaemon.log if you used the HACS, AppDaemon add-on then Predbat installation method You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to view Predbat's logfile - see editing configuration files within Home Assistant if you need to install an editor. Automated monitoring that Predbat and GivTCP are running OK With GivTCP and Predbat performing an important function, managing your battery charging and discharging to best reduce your electricity bills, you may find these automations useful to monitor that GivTCP and Predbat are running OK, and if not, to raise an alert on your mobile device. GivTCP activity monitor This automation will raise an alert if any of the following occur: The inverter goes offline for more than 15 minutes No last_updated_time received from the inverter for more than 15 minutes Inverter temperature less than 5 degrees for more than 15 minutes (should never happen) The battery goes offline to the inverter for more than 15 minutes GivTCP add-on is not running Mosquitto broker add-on is not running The script will need to be customised for your inverter id, battery id and mobile details, and can be extended for multiple inverters and batteries by duplicating the triggers and adding appropriate battery and inverter id's. alias: GivTCP activity monitor description: Alert when communications to GivTCP have ceased for 15 minutes trigger: - platform: state entity_id: sensor.givtcp_<inverter id>_last_updated_time to: \"null\" for: minutes: 15 variables: alert_text: No GivTCP update received from inverter <id> - platform: state entity_id: - sensor.givtcp_<inverter id>_status from: \"online\" for: minutes: 15 variables: alert_text: No GivTCP update received from inverter <id> - platform: numeric_state entity_id: - sensor.givtcp_<inverter id>_invertor_temperature for: minutes: 15 below: 5 variables: alert_text: No GivTCP update received from inverter <id> - platform: state entity_id: - sensor.givtcp_<battery id>_battery_cells to: \"unknown\" for: minutes: 15 variables: alert_text: Battery <battery_id> is offline to GivTCP - platform: state entity_id: - binary_sensor.givtcp_running to: \"off\" for: minutes: 15 variables: alert_text: GivTCP add-on is not running - platform: state entity_id: - binary_sensor.mosquitto_broker_running to: \"off\" for: minutes: 15 variables: alert_text: Mosquitto Broker add-on is not running - platform: state entity_id: - binary_sensor.appdaemon<-predbat>_broker_running to: \"off\" for: minutes: 15 variables: alert_text: AppDaemon<-predbat> add-on is not running action: - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: {{ alert_text }} for the past 15 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single The last three triggers (GivTCP, Mosquitto and AppDaemon running) trigger if any of these add-ons that Predbat is dependent upon are not running. You will need to enable a binary sensor for each add-on to be able to use these triggers in the automation: Navigate to Settings / Devices and Services / Devices and search for 'GivTCP' Click on the GivTCP add-on, and under 'Sensors', click 'XX entities not shown' Click the 'Running' sensor, then the cogwheel, and Enable the sensor Repeat these steps for the 'Mosquitto' add-on and either 'Appdaemon' or 'AppDaemon-predbat' depending on which AppDaemon install option you followed. As an extension to the above, instead of just alerting that GivTCP has a problem, the automation could also restart GivTCP add-on which usually cures most GivTCP connectivity issues. Restarting GivTCP does however lose the current GivTCP log in Home Assistant. To restart the GivTCP add-on, add the following at the end of the action section: - service: hassio.addon_restart data: addon: a6a2857d_givtcp Predbat error monitor This automation will raise an alert if Predbat's status turns to ERROR for more than 10 minutes. The script will need to be customised for your mobile details. alias: predbat error monitor description: Alert when Predbat has raised an exception trigger: - platform: state entity_id: - predbat.status to: \"ERROR: Exception raised\" for: minutes: 10 - platform: template value_template: \"{{ 'ERROR' in states('predbat.status') }}\" for: minutes: 10 - platform: state entity_id: - predbat.status attribute: error to: \"True\" for: minutes: 10 action: - service: notify.mobile_app_<your mobile device id> data: title: Predbat status issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: predbat status is {{ states('predbat.status') }}, error={{ state_attr('predbat.status', 'error') }} data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single An error alert looks like this:","title":"Output data"},{"location":"output-data/#output-data","text":"","title":"Output data"},{"location":"output-data/#displaying-output-data","text":"Each Predbat config item has an input_number or switch associated with it, you can find an auto-generated dashboard for your configuration in your AppDaemon configuration area under the filename predbat_dashboard.yaml . You will need to open that file in a Home Assistant file editor and copy the contents into a new dashboard page. You can also create a dashboard page using dynamic-entities-card.yaml for a dynamically created list of all Predbat entities which groups the entities by type and is collapsed by default to prevent screen clutter. Requires lovelace-collapsable-cards ( https://github.com/RossMcMillan92/lovelace-collapsable-cards ) and lovelace-auto-entities ( https://github.com/thomasloven/lovelace-auto-entities ) to be installed via HACS as well as the stock vertical stack card. Credit @DJBenson for the code. The Predbat Plan card is very useful for seeing the plan that Predbat has created - Create the Predbat Plan card . A set of Apex Charts can also be created to see graphically what Predbat plans to do - Creating the charts .","title":"Displaying output data"},{"location":"output-data/#basic-status","text":"switch.predbat_active - Automatically set by Predbat to On when Predbat is busy calculating or controlling your inverter, or Off when Predbat is waiting for the next time it needs to perform a plan calculation update. If you toggle this switch in Home Assistant it will force Predbat to perform an update now (useful for automations). predbat.status - Gives the current status & errors and logs any changes that Predbat makes to your inverter. The different Predbat status values and their meanings are detailed in what does predbat do . predbat.status additionally has the following attributes that are automatically populated: Last updated - date and time that Predbat last updated the plan Debug - A set of arrays containing Predbat's planned charging and discharging time windows and battery limits (in kWh) Version - version of Predbat that's running Error - binary value true or false depending upon whether Predbat is in an error status or nor","title":"Basic status"},{"location":"output-data/#baseline-data","text":"What your battery is expected to do with no changes made by Predbat: predbat.battery_hours_left - The number of hours left until your home battery is predicted to run out (stops at the maximum prediction time) predbat.charge_limit - The current charge limit used for the scenario in % predbat.charge_limit_kw - The current charge limit used for the scenario in kWh predbat.duration - The duration of the prediction maximum in hours predbat.load_energy - Predicted load energy in kWh predbat.pv_energy - Predicted PV energy in kWh predbat.export_energy - Predicted export energy in kWh predbat.import_energy - Predicted import energy in kWh predbat.import_energy_battery - Predicted import energy to charge your home battery in kWh predbat.import_energy_house - Predicted import energy not provided by your home battery (flat battery or above maximum discharge rate) predbat.soc_kw - Predicted state of charge (in kWh) at the end of the prediction, not very useful in itself, but holds all minute by minute prediction data (in attributes) which can be charted with Apex Charts (or similar) predbat.soc_min_kwh - The minimum battery level during the time period in kWh predbat.metric - Predicted cost metric for the next simulated period (in pence). Also contains data for charting cost in the entity attributes predbat.battery_power - Predicted battery power per minute, for charting predbat.battery_cycle - Predicted battery cycle in kWh (total kWh processed) predbat.pv_power - Predicted PV power per minute, for charting predbat.grid_power - Predicted Grid power per minute, for charting predbat.car_soc - Predicted car battery % input_number.predbat_iboost_today - Gives the amount of energy modelled that will be sent to the solar diverter today, increments during the day and is reset to zero at 11:30pm each night","title":"Baseline data"},{"location":"output-data/#pv-10-baseline-data","text":"The calculated baseline results under PV 10% scenario: predbat.soc_kw_base10 - As soc_kw but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.base10_pv_energy - Predicted PV 10% energy in kWh predbat.base10_metric - Predicted cost for PV 10% predbat.base10_export_energy- Predicted export energy for PV 10% predbat.base10_load_energy - Predicted load energy for PV 10% predbat.base10_import_energy- Predicted import energy for PV 10%","title":"PV 10% baseline data"},{"location":"output-data/#best","text":"Predbat outputs the following 'best' entities from the simulation based on the lowest cost consumption plan: predbat.best_battery_hours_left - Number of hours left under best plan predbat.best_export_energy - Predicted exports under best plan predbat_best_import_energy - Predicted imports under best plan predbat_best_load - Predicted best load energy predbat.best_pv_energy - Predicted Best PV energy in kWh predbat_best_import_energy_battery - Predicted imports to the battery under best SoC setting predbat_best_import_energy_house - Predicted imports to the house under best SoC setting predbat_soc_kw_best - Predicted best final state of charge (in kWh), holds minute by minute prediction data (in attributes) to be charted predbat.soc_kw_best_h1 - Single data point for the predicted state of charge in 1 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h8 - Single data point for the predicted state of charge in 8 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h12 - Single data point for the predicted state of charge in 12 hours time (useful for calibration charts, predicted vs actual) predbat_best_metric - The predicted cost if the proposed SoC % charge target is selected. Also contains data for charting cost in attributes. predbat.best_charge_limit - Predicted best battery charge limit in percent predbat.best_charge_limit_kw - Predicted best battery charge limit in kWh predbat.best_discharge_limit - Predicted best battery discharge limit in percent (will be 0% when discharging or 100% when not) predbat.best_discharge_limit_kw - Predicted best battery discharge limit in kWh predbat.battery_power_best - Predicted best battery power per minute, for charting predbat.battery_cycle_best - Predicted best battery cycle in kWh (total kWh processed) predbat.pv_power_best - Predicted best PV power per minute, for charting predbat.grid_power - Predicted best Grid power per minute, for charting predbat.car_soc_best - Predicted car battery % in best plan predbat.iboost_best - Gives the predicted energy going into the iBoost solar diverter","title":"Best"},{"location":"output-data/#best-pv-10","text":"The calculated best results under the PV 10% scenario: predbat.soc_kw_best10 - As soc_kw_best but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.best10_pv_energy - Predicted best PV 10% energy in kWh predbat.best10_metric - Predicted best cost for PV 10% predbat.best10_export_energy- Predicted best export energy for PV 10% predbat.best10_load_energy - Predicted best load energy for PV 10% predbat.best10_import_energy- Predicted best import energy for PV 10%","title":"Best PV 10%"},{"location":"output-data/#battery-status","text":"The following sensors are set based upon what Predbat is currently controlling the battery to do: binary_sensor.predbat_charging - Set to 'on' when Predbat is force charging the battery (from solar, or if that is insufficient, from grid import), or 'off' otherwise binary_sensor.predbat_discharging - Set to 'on' when Predbat is force discharging the battery for export income, 'off' otherwise. Useful for automations if for example you want to turn off car charging when the battery is being exported.","title":"Battery status"},{"location":"output-data/#energy-rate-data","text":"","title":"Energy rate data"},{"location":"output-data/#low-import-rate-entities","text":"predbat.low_rate_cost - The lowest import rate cost in Pence predbat.low_rate_start - Start time of the next low import rate slot predbat.low_rate_end - End time of the next low import rate slot predbat.low_rate_cost_2, predbat.low_rate_start_2, predbat.low_rate_end_2 - The following low import rate slot binary_sensor.predbat_low_rate_slot - A sensor that is 'on' to indicate when there is a low energy rate slot active, 'off' otherwise.","title":"Low import rate entities"},{"location":"output-data/#high-export-rate-entities","text":"predbat.high_export_rate_cost - The highest export rate cost in Pence predbat.high_export_rate_start - Start time of the next high export rate slot predbat.high_export_rate_end - End time of the next high export rate slot predbat.high_export_rate_cost_2, predbat.high_export_rate_start_2, predbat.high_export_rate_end_2 - The following high export rate slot binary_sensor.predbat_high_export_rate_slot - A sensor that is 'on' to indicate when there is a high export rate slot active, 'off' otherwise.","title":"High export rate entities"},{"location":"output-data/#other-rate-entities","text":"predbat.rates - The current energy rates in Pence (also can be charted) predbat.rates_export - The current energy export rates in Pence (also can be charted) predbat.cost_today - The total cost of energy so far today (since midnight) predbat.car_soc - The expected charge level of your car at the end of the simulation. Can also be charted. predbat.car_soc_best - The expected charge level of your car at the end of the simulation using the proposed SoC%/Window. Can also be charted.","title":"Other rate entities"},{"location":"output-data/#car-data","text":"binary_sensor.predbat_car_charging_slot - A binary sensor indicating when to charge your car (if car planning is enabled) - which can be used in an automation as described in Predbat led car charging predbat.car_charging_start - The time that car charging is planned to start at, in HH:MM:SS format.","title":"Car data"},{"location":"output-data/#iboost-solar-diverter-data","text":"binary_sensor.predbat_iboost_active - A binary sensor indicating when there is excess solar and the solar diverter (e.g. iBoost, Eddi or just plain immersion heater) should be active, can be used for automations to trigger the immersion heater boost.","title":"iBoost Solar Diverter data"},{"location":"output-data/#energy-saving-data","text":"predbat.cost_yesterday - A sensor that gives you your energy costs for yesterday (00:00-23:59 on the previous day). predbat.savings_yesterday_predbat - A sensor which tells you have much money Predbat saved you yesterday compared to not using Predbat and only charging at the lowest import rate in the 24 hour Period predbat.savings_total_predbat - A running total of the above predbat.savings_yesterday_pvbat - A sensor which tells you have much money you saved vs not having a PV and battery system at all (this includes in the Predbat savings). predbat.savings_total_pvbat - A running total of the above","title":"Energy saving data"},{"location":"output-data/#solar-forecast-data","text":"sensor.predbat_pv_today - Tracks the PV forecast for today, attributes give the remaining amount today and the half hourly data. sensor.predbat_pv_tomorrow - Tracks the PV forecast for tomorrow, attributes give the remaining amount today and the half hourly data.","title":"Solar forecast data"},{"location":"output-data/#sample-predbat-data-out-dashboard","text":"","title":"Sample Predbat data out dashboard"},{"location":"output-data/#predbat-logfile","text":"Predbat writes detailed logging, status and progress activity information to a logfile as it runs and so this file should be checked if predbat.status reports an error, or if you want to verify that Predbat is running OK. There is a lot of output in the logfile, this is normal! Depending upon whether you have used the combined AppDaemon/Predbat add-on installation method or the HACS, Appdaemon add-on then Predbat installation method , the logfile will be held in one of two directories in Home Assistant: /addon_configs/46f69597_appdaemon-predbat/predbat.log if you used the combined AppDaemon/Predbat add-on installation method or /homeassistant/appdaemon/appdaemon.log if you used the HACS, AppDaemon add-on then Predbat installation method You will need to use a file editor within Home Assistant (e.g. either the File editor or Studio Code Server add-on's) to view Predbat's logfile - see editing configuration files within Home Assistant if you need to install an editor.","title":"Predbat Logfile"},{"location":"output-data/#automated-monitoring-that-predbat-and-givtcp-are-running-ok","text":"With GivTCP and Predbat performing an important function, managing your battery charging and discharging to best reduce your electricity bills, you may find these automations useful to monitor that GivTCP and Predbat are running OK, and if not, to raise an alert on your mobile device.","title":"Automated monitoring that Predbat and GivTCP are running OK"},{"location":"output-data/#givtcp-activity-monitor","text":"This automation will raise an alert if any of the following occur: The inverter goes offline for more than 15 minutes No last_updated_time received from the inverter for more than 15 minutes Inverter temperature less than 5 degrees for more than 15 minutes (should never happen) The battery goes offline to the inverter for more than 15 minutes GivTCP add-on is not running Mosquitto broker add-on is not running The script will need to be customised for your inverter id, battery id and mobile details, and can be extended for multiple inverters and batteries by duplicating the triggers and adding appropriate battery and inverter id's. alias: GivTCP activity monitor description: Alert when communications to GivTCP have ceased for 15 minutes trigger: - platform: state entity_id: sensor.givtcp_<inverter id>_last_updated_time to: \"null\" for: minutes: 15 variables: alert_text: No GivTCP update received from inverter <id> - platform: state entity_id: - sensor.givtcp_<inverter id>_status from: \"online\" for: minutes: 15 variables: alert_text: No GivTCP update received from inverter <id> - platform: numeric_state entity_id: - sensor.givtcp_<inverter id>_invertor_temperature for: minutes: 15 below: 5 variables: alert_text: No GivTCP update received from inverter <id> - platform: state entity_id: - sensor.givtcp_<battery id>_battery_cells to: \"unknown\" for: minutes: 15 variables: alert_text: Battery <battery_id> is offline to GivTCP - platform: state entity_id: - binary_sensor.givtcp_running to: \"off\" for: minutes: 15 variables: alert_text: GivTCP add-on is not running - platform: state entity_id: - binary_sensor.mosquitto_broker_running to: \"off\" for: minutes: 15 variables: alert_text: Mosquitto Broker add-on is not running - platform: state entity_id: - binary_sensor.appdaemon<-predbat>_broker_running to: \"off\" for: minutes: 15 variables: alert_text: AppDaemon<-predbat> add-on is not running action: - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: {{ alert_text }} for the past 15 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single The last three triggers (GivTCP, Mosquitto and AppDaemon running) trigger if any of these add-ons that Predbat is dependent upon are not running. You will need to enable a binary sensor for each add-on to be able to use these triggers in the automation: Navigate to Settings / Devices and Services / Devices and search for 'GivTCP' Click on the GivTCP add-on, and under 'Sensors', click 'XX entities not shown' Click the 'Running' sensor, then the cogwheel, and Enable the sensor Repeat these steps for the 'Mosquitto' add-on and either 'Appdaemon' or 'AppDaemon-predbat' depending on which AppDaemon install option you followed. As an extension to the above, instead of just alerting that GivTCP has a problem, the automation could also restart GivTCP add-on which usually cures most GivTCP connectivity issues. Restarting GivTCP does however lose the current GivTCP log in Home Assistant. To restart the GivTCP add-on, add the following at the end of the action section: - service: hassio.addon_restart data: addon: a6a2857d_givtcp","title":"GivTCP activity monitor"},{"location":"output-data/#predbat-error-monitor","text":"This automation will raise an alert if Predbat's status turns to ERROR for more than 10 minutes. The script will need to be customised for your mobile details. alias: predbat error monitor description: Alert when Predbat has raised an exception trigger: - platform: state entity_id: - predbat.status to: \"ERROR: Exception raised\" for: minutes: 10 - platform: template value_template: \"{{ 'ERROR' in states('predbat.status') }}\" for: minutes: 10 - platform: state entity_id: - predbat.status attribute: error to: \"True\" for: minutes: 10 action: - service: notify.mobile_app_<your mobile device id> data: title: Predbat status issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: predbat status is {{ states('predbat.status') }}, error={{ state_attr('predbat.status', 'error') }} data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single An error alert looks like this:","title":"Predbat error monitor"},{"location":"predbat-plan-card/","text":"Predbat Plan card Predbat can create its own plan card which can be added to your Home Assistant dashboard. At a glance the Predbat plan shows you the plan going forward of home demand, EV charging, iBoost and for your battery, and any actions that Predbat plans to take. Displaying the Predbat plan Firstly install the HTML template card in HACS: In HACS, click on Frontend Click the blue Explore and download repositories button and type 'HTML' Click on 'HTML Jinja2 Template card', then click the blue 'Download', then 'Download' again to install it When prompted to 'reload your browser', click 'Reload' NB: Do not install the very similarly named 'Lovelace Html card', it won't work! You must install 'HTML Jinja2 Template card'. Next, on a Home Assistant dashboard, click the blue 'Add card', scroll down the list of cards to the bottom and click 'Manual', delete the template card configuration and copy/paste the following to display the Predbat plan: type: custom:html-template-card title: Predbat plan ignore_line_breaks: true content: | {{ state_attr('predbat.plan_html', 'html') }} You should see something like this: If you get an error 'Custom element doesn't exist: html-template-card' then you've not installed the Jinja2 template card correctly from HACS. Understanding the Predbat plan For every half hour period (slot) that Predbat has planned for (the forecast_hours setting in apps.yaml ), the Predbat plan shows: The import rate in pence for that slot The export rate in pence for that slot What 'status' predbat will be in (e.g. Charging, Discharging) Any limit applied (e.g. charging to 70%) Forecast Solar generation (from Solcast) Forecast house load (from your historical load data) Planned car charging (if car charging is configured in Predbat) Planned iBoost immersion heating (if iBoost is configured) What the battery SoC will be at the start of the 30 minute slot The forecast cost for the half hour slot A running total cost Forecast CO2 Carbon intensity and Carbon footprint emitted by the grid's electricity generation, and the direction of travel over the slot (if carbon forecasting is enabled) Rate symbols (import and export): ? \u2146 - Rate that has been modified based on input_number.predbat_metric_future_rate_offset_import or input_number.predbat_metric_future_rate_offset_export ? \u2696 - Rate that has been estimated using future rate estimation data (e.g. Nordpool) = - Rate that has been overridden by the users apps.yaml \u00b1 - Rate that has been adjusted with a rate offset in the users apps.yaml $ - Rate that has been adjusted for an Octopus Saving session ? - Rate that has not yet been defined and the previous days data was used instead Battery SoC symbols: \u2192 - Current SoC expected to remain level \u2198 - Current SoC expected to fall \u2197 - Current SoC expected to rise Cost symbols: \u2192 - Current cost expected to remain level \u2198 - Current cost expected to fall (due to export) \u2197 - Current cost expected to rise (due to import or standing charge) Explaining each column in the Predbat plan in more detail: Time - Predbat plans your home, solar and battery load in 30 minute slots, on the :00 and :30 minutes past each hour. The Predbat slots are therefore aligned to Octopus Agile slots or rate change times on any other tariff. Import - The import rate for that time slot in pence. The rate will be coloured Blue if the price is zero pence or negative, Green if the rate is less than the import rate threshold, Red if the rate is more than 1.5 times the import rate threshold, and Yellow if the rate is between 1 and 1.5 times the import rate threshold. See the Predbat customisation guide for explanation of the import rate threshold (and over-riding it), but in essence Predbat will consider blue and green-coloured slots as preferred candidates for importing, yellow and red (higher rates) will not. If battery charging is planned by Predbat for a particular slot, the import rate for that slot will be highlighted in bold text. Export - Similarly, the export rate for that time slot in pence. The rate will be coloured White if the price is less than the export rate threshold, Yellow if it is more than the export rate threshold, and pale Red if the rate is more than 1.5 times the export rate threshold. So in essence, Yellow and Red coloured export rates will be considered as priorities for exporting, White will not. If battery discharging is planned by Predbat for a particular slot, the export rate for that slot will be highlighted in bold text. State - Predbat's status controls whether the battery is charging, discharging to support house load (Eco mode), discharging and force exported, or being held at the current level. Alongside the state is an arrow which points upwards if the battery SoC is increasing (i.e. charging), to the right if the battery SoC is remaining constant, or downwards if the battery SoC is decreasing (i.e. discharging). If Predbat's plan has been over-ridden and the slot has been manually controlled to be a Charging slot, Discharging or Idle, then alongside the State and battery SoC arrow will be an upside down 'F' indicating it is a 'Forced' activity. The slot will be coloured Green for Charging, Yellow for Discharging, Silver Grey for Freeze Charging, Pale Blue for Hold Charging or White for Idle. NB: The Predbat plan is shown in 30 minute time slots but Predbat actually plans battery activity in 5 minute segments within the 30 minute slot. If the Home Assistant control switch.predbat_calculate_discharge_oncharge is set to True, then within a 30 minute slot (and depending on import and export rates) Predbat could potentially plan for there to be both charging and discharging activity - if Predbat plans this, state will show as both Charging and Discharging in the same slot. Limit % - Alongside any battery activity (charging, discharging, etc) there will be a SoC limit. This limit is what the SoC is planned to be at the end of the 30 minute time slot. e.g. 'Charge\u2197 70%' is charge to 70% SoC, and 'Discharge\u2198 4%' is discharge the battery to the 4% reserve level. PV kWh - The predicted solar forecast for the half hour slot, estimated from the Solcast Forecast . If the PV forecast is above 0.2kWh for the slot it will be coloured Melon Red with a little sun symbol, above 0.1kWh it will be Yellow with a sun symbol, otherwise it will be Silver Grey. Load kWh - The predicted house load for the half hour slot, estimated as a weighted average of the number of days_previous Historical data from your inverter or other house load sensor. If the load forecast is 0.5kWh or above for the slot it will be coloured Orangey-Red, from 0.25kWh to 0.5 it will be coloured Yellow, above 0 to 0.25 it will be Light Green, and if zero, it will be coloured White. Car kWh - The total predicted car charging for the half hour slot. This column will only be shown if num_cars in apps.yaml is 1 or more. If the car is planned to be charged in that slot then the kWh will be coloured Yellow, otherwise it will be White. iBoost kWh - The energy planned for solar diverter immersion heating such as iBoost or MyEnergi Eddi. This column will only be shown if switch.predbat_iboost_enable is set to True. If the solar diverter is planned to be on in that slot then the kWh will be coloured Yellow, otherwise it will be White. SoC % - The estimate of battery State of Charge percentage at the start of the time slot together with an arrow pointing up, to the right or downwards to indicate whether the battery SoC is increasing, remaining constant or decreasing during the time slot. The 'SoC %' can be read in conjunction with the 'Limit %'; the SoC column gives the estimated SoC at the beginning of the slot, the Limit column the estimated SoC at the end of the slot. If the SoC is 50% or greater it will be coloured Green, 20% or greater, Yellow, and if less than 20%, Orangey-Red. Cost - The estimated cost in pence for the time slot together with an arrow indicating whether the total cost today is increasing, staying flat or decreasing. If the cost for the slot is 10p or more it will be coloured Orangey-Red, \u00bdp or more it will be coloured Yellow, -\u00bdp or less it will be coloured Green, otherwise it will be coloured White. Total - The total cumulative cost so far for 'today' at the start of the slot, including the standing charge. At midnight tonight this cumulative cost will be reset to the daily standing charge (or zero if metric_standing_charge wasn't set in apps.yaml ). Due to the way Predbat works, total cost is always reported (in Predbat output entities, this HTML plan, in the Apex charts , etc) as starting from midnight today and adding on from there. Looking at the sample Predbat plan above as an example, the plan starts at 10:00 with total cost today already being \u00a33.13. The house load is then fully met through the day and evening by the battery (with some PV top-up charging) so total cost remains constant at \u00a33.13. In the 22:30 and 23:00 slots there is a little grid import, and then at 23:30 there's grid import and the battery starts to be charged. As you can see the Total continues to increase in the plan past midnight with each Total being the Total from the preceding slot plus the Cost estimate from the preceding slot - reminder that Total gives the running total at the start of the slot. Total cost is always coloured White. CO2 (g/kWh) - The estimated CO2 Carbon intensity emitted by the grid when generating electricity at the start of the 30 minute slot. This column will only be shown if switch.predbat_carbon_enable is set to True. The CO2 value will be coloured according to how high the carbon footprint intensity is: greater or equal to 450g/kWh it will be deep red; greater or equal to 290, dark red; then golden orange from 200 upwards; yellow from 120; green from 40 and light green if less than 40. CO2 (kg) - The estimated CO2 Carbon footprint that the grid will emit generating electricity at the start of the slot and the direction of travel over the slot. This column will only be shown if switch.predbat_carbon_enable is set to True. The carbon amount in kg will be coloured according to the direction of travel over the slot; if the carbon value is rising by 10kg or more it will be orange with an upwards arrow; if falling by 10kg or more it will green with a downwards arrow, and in the middle, white with a horizontal arrow. Debug mode for Predbat Plan If Predbat expert mode is turned on then a number of additional controls and switches are made available in Home Assistant. If switch.predbat_plan_debug is then turned on then the Predbat plan shows additional 'debugging' information for the import rate, export rate, load and PV columns. The Predbat plan will now look like this with plan_debug turned on: Import and Export rate will now show the actual rate (according to how you have setup the energy rates ) and also in brackets the effective import or export rate. The effective rate takes into account battery and inverter energy losses for charging and discharging and converting from DC to AC and vice-versa. Note that the Cost and Total columns are always based upon the actual Import and Export rate. Using the above debug plan as an example: At 22:30 the battery is being charged. The actual import rate is 14.07p, but after conversion losses to store the grid AC into the DC battery, the energy being put into the battery has effectively cost 14.81p - for every 1kWh of AC grid import you don't get 1kWh of DC stored in the battery, so 1kWh of battery charge has effectively cost slightly more than the import rate. At 00:30 the battery is being force discharged and excess energy (above the estimated house load of 0.47kWh) will be exported. The actual export rate is 18.22p, but after losses converting the stored DC battery charge into AC to supply the home and export it, the energy being exported has effectively only earned 17.31p - it will take slightly more than 1kWh of stored DC battery charge to get 1kWh of AC to use or export so each discharged and exported kWh actually earns slightly less. Putting these together, at 00:00, the effective import rate (after losses) is 13.93p, the effective export rate is 17.31p, so even though battery and inverter conversion losses have been incurred, there is still a 3.38p profit per kWh and Predbat plans to charge and then discharge the battery in the same slot to generate that profit. With debug mode turned on, the Load column shows the predicted load in kWh for the half hour slot and in brackets the modelled load variance value using the load variance model . The PV column in debug mode changes shows the predicted PV generation in kWh for the half hour slot and the Solcast 10% forecast in brackets. Note that Predbat's forecasted PV generation already contains a input_number.predbat_pv_metric10_weight weighted value of the Solcast 10% forecast . Note that the values in brackets in the load and PV columns are each only shown if they are non-zero. The debug mode on the Predbat plan can be quite useful to understand from the import and export rates after conversion losses , why Predbat plans to charge or discharge the battery. There's a further explanation of the Predbat forecast and plan in the FAQ's. Customising and Reformatting the Predbat Plan An additional independent front-end Home Assistant component the 'Predbat Table Card' is available on HACS that gives a number of additional customisation and configuration options to tailor how the Predbat plan looks: Change the sequence of columns and which columns are shown in the plan Restyle the columns, or retain the Predbat original colour scheme Apply custom light/dark themes See the Predbat Table Card repository for more details.","title":"Predbat Plan card"},{"location":"predbat-plan-card/#predbat-plan-card","text":"Predbat can create its own plan card which can be added to your Home Assistant dashboard. At a glance the Predbat plan shows you the plan going forward of home demand, EV charging, iBoost and for your battery, and any actions that Predbat plans to take.","title":"Predbat Plan card"},{"location":"predbat-plan-card/#displaying-the-predbat-plan","text":"Firstly install the HTML template card in HACS: In HACS, click on Frontend Click the blue Explore and download repositories button and type 'HTML' Click on 'HTML Jinja2 Template card', then click the blue 'Download', then 'Download' again to install it When prompted to 'reload your browser', click 'Reload' NB: Do not install the very similarly named 'Lovelace Html card', it won't work! You must install 'HTML Jinja2 Template card'. Next, on a Home Assistant dashboard, click the blue 'Add card', scroll down the list of cards to the bottom and click 'Manual', delete the template card configuration and copy/paste the following to display the Predbat plan: type: custom:html-template-card title: Predbat plan ignore_line_breaks: true content: | {{ state_attr('predbat.plan_html', 'html') }} You should see something like this: If you get an error 'Custom element doesn't exist: html-template-card' then you've not installed the Jinja2 template card correctly from HACS.","title":"Displaying the Predbat plan"},{"location":"predbat-plan-card/#understanding-the-predbat-plan","text":"For every half hour period (slot) that Predbat has planned for (the forecast_hours setting in apps.yaml ), the Predbat plan shows: The import rate in pence for that slot The export rate in pence for that slot What 'status' predbat will be in (e.g. Charging, Discharging) Any limit applied (e.g. charging to 70%) Forecast Solar generation (from Solcast) Forecast house load (from your historical load data) Planned car charging (if car charging is configured in Predbat) Planned iBoost immersion heating (if iBoost is configured) What the battery SoC will be at the start of the 30 minute slot The forecast cost for the half hour slot A running total cost Forecast CO2 Carbon intensity and Carbon footprint emitted by the grid's electricity generation, and the direction of travel over the slot (if carbon forecasting is enabled) Rate symbols (import and export): ? \u2146 - Rate that has been modified based on input_number.predbat_metric_future_rate_offset_import or input_number.predbat_metric_future_rate_offset_export ? \u2696 - Rate that has been estimated using future rate estimation data (e.g. Nordpool) = - Rate that has been overridden by the users apps.yaml \u00b1 - Rate that has been adjusted with a rate offset in the users apps.yaml $ - Rate that has been adjusted for an Octopus Saving session ? - Rate that has not yet been defined and the previous days data was used instead Battery SoC symbols: \u2192 - Current SoC expected to remain level \u2198 - Current SoC expected to fall \u2197 - Current SoC expected to rise Cost symbols: \u2192 - Current cost expected to remain level \u2198 - Current cost expected to fall (due to export) \u2197 - Current cost expected to rise (due to import or standing charge) Explaining each column in the Predbat plan in more detail: Time - Predbat plans your home, solar and battery load in 30 minute slots, on the :00 and :30 minutes past each hour. The Predbat slots are therefore aligned to Octopus Agile slots or rate change times on any other tariff. Import - The import rate for that time slot in pence. The rate will be coloured Blue if the price is zero pence or negative, Green if the rate is less than the import rate threshold, Red if the rate is more than 1.5 times the import rate threshold, and Yellow if the rate is between 1 and 1.5 times the import rate threshold. See the Predbat customisation guide for explanation of the import rate threshold (and over-riding it), but in essence Predbat will consider blue and green-coloured slots as preferred candidates for importing, yellow and red (higher rates) will not. If battery charging is planned by Predbat for a particular slot, the import rate for that slot will be highlighted in bold text. Export - Similarly, the export rate for that time slot in pence. The rate will be coloured White if the price is less than the export rate threshold, Yellow if it is more than the export rate threshold, and pale Red if the rate is more than 1.5 times the export rate threshold. So in essence, Yellow and Red coloured export rates will be considered as priorities for exporting, White will not. If battery discharging is planned by Predbat for a particular slot, the export rate for that slot will be highlighted in bold text. State - Predbat's status controls whether the battery is charging, discharging to support house load (Eco mode), discharging and force exported, or being held at the current level. Alongside the state is an arrow which points upwards if the battery SoC is increasing (i.e. charging), to the right if the battery SoC is remaining constant, or downwards if the battery SoC is decreasing (i.e. discharging). If Predbat's plan has been over-ridden and the slot has been manually controlled to be a Charging slot, Discharging or Idle, then alongside the State and battery SoC arrow will be an upside down 'F' indicating it is a 'Forced' activity. The slot will be coloured Green for Charging, Yellow for Discharging, Silver Grey for Freeze Charging, Pale Blue for Hold Charging or White for Idle. NB: The Predbat plan is shown in 30 minute time slots but Predbat actually plans battery activity in 5 minute segments within the 30 minute slot. If the Home Assistant control switch.predbat_calculate_discharge_oncharge is set to True, then within a 30 minute slot (and depending on import and export rates) Predbat could potentially plan for there to be both charging and discharging activity - if Predbat plans this, state will show as both Charging and Discharging in the same slot. Limit % - Alongside any battery activity (charging, discharging, etc) there will be a SoC limit. This limit is what the SoC is planned to be at the end of the 30 minute time slot. e.g. 'Charge\u2197 70%' is charge to 70% SoC, and 'Discharge\u2198 4%' is discharge the battery to the 4% reserve level. PV kWh - The predicted solar forecast for the half hour slot, estimated from the Solcast Forecast . If the PV forecast is above 0.2kWh for the slot it will be coloured Melon Red with a little sun symbol, above 0.1kWh it will be Yellow with a sun symbol, otherwise it will be Silver Grey. Load kWh - The predicted house load for the half hour slot, estimated as a weighted average of the number of days_previous Historical data from your inverter or other house load sensor. If the load forecast is 0.5kWh or above for the slot it will be coloured Orangey-Red, from 0.25kWh to 0.5 it will be coloured Yellow, above 0 to 0.25 it will be Light Green, and if zero, it will be coloured White. Car kWh - The total predicted car charging for the half hour slot. This column will only be shown if num_cars in apps.yaml is 1 or more. If the car is planned to be charged in that slot then the kWh will be coloured Yellow, otherwise it will be White. iBoost kWh - The energy planned for solar diverter immersion heating such as iBoost or MyEnergi Eddi. This column will only be shown if switch.predbat_iboost_enable is set to True. If the solar diverter is planned to be on in that slot then the kWh will be coloured Yellow, otherwise it will be White. SoC % - The estimate of battery State of Charge percentage at the start of the time slot together with an arrow pointing up, to the right or downwards to indicate whether the battery SoC is increasing, remaining constant or decreasing during the time slot. The 'SoC %' can be read in conjunction with the 'Limit %'; the SoC column gives the estimated SoC at the beginning of the slot, the Limit column the estimated SoC at the end of the slot. If the SoC is 50% or greater it will be coloured Green, 20% or greater, Yellow, and if less than 20%, Orangey-Red. Cost - The estimated cost in pence for the time slot together with an arrow indicating whether the total cost today is increasing, staying flat or decreasing. If the cost for the slot is 10p or more it will be coloured Orangey-Red, \u00bdp or more it will be coloured Yellow, -\u00bdp or less it will be coloured Green, otherwise it will be coloured White. Total - The total cumulative cost so far for 'today' at the start of the slot, including the standing charge. At midnight tonight this cumulative cost will be reset to the daily standing charge (or zero if metric_standing_charge wasn't set in apps.yaml ). Due to the way Predbat works, total cost is always reported (in Predbat output entities, this HTML plan, in the Apex charts , etc) as starting from midnight today and adding on from there. Looking at the sample Predbat plan above as an example, the plan starts at 10:00 with total cost today already being \u00a33.13. The house load is then fully met through the day and evening by the battery (with some PV top-up charging) so total cost remains constant at \u00a33.13. In the 22:30 and 23:00 slots there is a little grid import, and then at 23:30 there's grid import and the battery starts to be charged. As you can see the Total continues to increase in the plan past midnight with each Total being the Total from the preceding slot plus the Cost estimate from the preceding slot - reminder that Total gives the running total at the start of the slot. Total cost is always coloured White. CO2 (g/kWh) - The estimated CO2 Carbon intensity emitted by the grid when generating electricity at the start of the 30 minute slot. This column will only be shown if switch.predbat_carbon_enable is set to True. The CO2 value will be coloured according to how high the carbon footprint intensity is: greater or equal to 450g/kWh it will be deep red; greater or equal to 290, dark red; then golden orange from 200 upwards; yellow from 120; green from 40 and light green if less than 40. CO2 (kg) - The estimated CO2 Carbon footprint that the grid will emit generating electricity at the start of the slot and the direction of travel over the slot. This column will only be shown if switch.predbat_carbon_enable is set to True. The carbon amount in kg will be coloured according to the direction of travel over the slot; if the carbon value is rising by 10kg or more it will be orange with an upwards arrow; if falling by 10kg or more it will green with a downwards arrow, and in the middle, white with a horizontal arrow.","title":"Understanding the Predbat plan"},{"location":"predbat-plan-card/#debug-mode-for-predbat-plan","text":"If Predbat expert mode is turned on then a number of additional controls and switches are made available in Home Assistant. If switch.predbat_plan_debug is then turned on then the Predbat plan shows additional 'debugging' information for the import rate, export rate, load and PV columns. The Predbat plan will now look like this with plan_debug turned on: Import and Export rate will now show the actual rate (according to how you have setup the energy rates ) and also in brackets the effective import or export rate. The effective rate takes into account battery and inverter energy losses for charging and discharging and converting from DC to AC and vice-versa. Note that the Cost and Total columns are always based upon the actual Import and Export rate. Using the above debug plan as an example: At 22:30 the battery is being charged. The actual import rate is 14.07p, but after conversion losses to store the grid AC into the DC battery, the energy being put into the battery has effectively cost 14.81p - for every 1kWh of AC grid import you don't get 1kWh of DC stored in the battery, so 1kWh of battery charge has effectively cost slightly more than the import rate. At 00:30 the battery is being force discharged and excess energy (above the estimated house load of 0.47kWh) will be exported. The actual export rate is 18.22p, but after losses converting the stored DC battery charge into AC to supply the home and export it, the energy being exported has effectively only earned 17.31p - it will take slightly more than 1kWh of stored DC battery charge to get 1kWh of AC to use or export so each discharged and exported kWh actually earns slightly less. Putting these together, at 00:00, the effective import rate (after losses) is 13.93p, the effective export rate is 17.31p, so even though battery and inverter conversion losses have been incurred, there is still a 3.38p profit per kWh and Predbat plans to charge and then discharge the battery in the same slot to generate that profit. With debug mode turned on, the Load column shows the predicted load in kWh for the half hour slot and in brackets the modelled load variance value using the load variance model . The PV column in debug mode changes shows the predicted PV generation in kWh for the half hour slot and the Solcast 10% forecast in brackets. Note that Predbat's forecasted PV generation already contains a input_number.predbat_pv_metric10_weight weighted value of the Solcast 10% forecast . Note that the values in brackets in the load and PV columns are each only shown if they are non-zero. The debug mode on the Predbat plan can be quite useful to understand from the import and export rates after conversion losses , why Predbat plans to charge or discharge the battery. There's a further explanation of the Predbat forecast and plan in the FAQ's.","title":"Debug mode for Predbat Plan"},{"location":"predbat-plan-card/#customising-and-reformatting-the-predbat-plan","text":"An additional independent front-end Home Assistant component the 'Predbat Table Card' is available on HACS that gives a number of additional customisation and configuration options to tailor how the Predbat plan looks: Change the sequence of columns and which columns are shown in the plan Restyle the columns, or retain the Predbat original colour scheme Apply custom light/dark themes See the Predbat Table Card repository for more details.","title":"Customising and Reformatting the Predbat Plan"},{"location":"todo-list/","text":"To-do list See Github issues","title":"To-do list"},{"location":"todo-list/#to-do-list","text":"See Github issues","title":"To-do list"},{"location":"video-guides/","text":"Video Guides All the video guides are now available on my YouTube channel: Springfall2008 Basic installation Playlist of Predbat installation videos Setting Up HomeAssistant Basics, File Editor, SSH, HACS, Octopus, eWelink Installing MQTT and GivTCP on Home Assistant Predbat installation - Predbat, Solcast, Dashboard, Charts and Plans - Add On Method Configuration of apps.yaml Configuration of Predbat inside Home Assistant Understanding historical data Understanding the charts How to understand Predbat plans AppDaemon log files Documentation overview Other configuration videos Playlist of other Predbat configuration videos Multiple cars How to Tune your system for better performance Issues with Solcast free accounts and Home Assistant How to Install Predbat with the new Add On Features Playlist of Predbat feature videos Intelligent Octopus car charging Saving sessions and power ups How to update Predbat Predbat mode and read-only mode Creating a dashboard Saving and restoring settings Manual plan override Charging curve and low power charging Controlling my car based on Predbat Slot Manual plan overrides for force charge/discharge/idle GivTCP auto restart feature GivEnergy Inverter Pause, Manual Freeze Charge/Discharge Optimising for Carbon Footprint Calculating your cost savings Energy Tariffs Playlist of Tariff configuration videos Intelligent Octopus import + Agile export Intelligent Octopus import + Fixed export Octopus Agile import + Agile export Octopus Flux","title":"Video Guides"},{"location":"video-guides/#video-guides","text":"All the video guides are now available on my YouTube channel: Springfall2008","title":"Video Guides"},{"location":"video-guides/#basic-installation","text":"Playlist of Predbat installation videos Setting Up HomeAssistant Basics, File Editor, SSH, HACS, Octopus, eWelink Installing MQTT and GivTCP on Home Assistant Predbat installation - Predbat, Solcast, Dashboard, Charts and Plans - Add On Method Configuration of apps.yaml Configuration of Predbat inside Home Assistant Understanding historical data Understanding the charts How to understand Predbat plans AppDaemon log files Documentation overview","title":"Basic installation"},{"location":"video-guides/#other-configuration-videos","text":"Playlist of other Predbat configuration videos Multiple cars How to Tune your system for better performance Issues with Solcast free accounts and Home Assistant How to Install Predbat with the new Add On","title":"Other configuration videos"},{"location":"video-guides/#features","text":"Playlist of Predbat feature videos Intelligent Octopus car charging Saving sessions and power ups How to update Predbat Predbat mode and read-only mode Creating a dashboard Saving and restoring settings Manual plan override Charging curve and low power charging Controlling my car based on Predbat Slot Manual plan overrides for force charge/discharge/idle GivTCP auto restart feature GivEnergy Inverter Pause, Manual Freeze Charge/Discharge Optimising for Carbon Footprint Calculating your cost savings","title":"Features"},{"location":"video-guides/#energy-tariffs","text":"Playlist of Tariff configuration videos Intelligent Octopus import + Agile export Intelligent Octopus import + Fixed export Octopus Agile import + Agile export Octopus Flux","title":"Energy Tariffs"},{"location":"what-does-predbat-do/","text":"What does Predbat do? Predbat is a home battery automation program. It automatically runs every 5 minutes and will update its prediction for the home battery levels for the next period, up to a maximum of 48 hours ahead. Predbat will automatically decide when to charge and discharge your battery to achieve the best (lowest) cost spend within the parameters you have set. It uses the solar production forecast from Solcast combined with your historical energy usage to make this prediction. The output is a prediction of the battery levels, charging slots, discharging slots, costs and import and export amounts. Costs are based on energy pricing data, either manually configured (e.g. 7p from 11pm-4pm and 35p otherwise) or by using the Octopus Energy integration Both import and export rates are supported. Intelligent Octopus is also supported and takes into account allocated charging slots. The solar forecast used is the central scenario from Solcast (50%) with a configurable weighting towards the more pessimistic (10%) scenario. The charging and discharging controls are automatically programmed into the inverter. Automatic planning of export slots is also supported, when enabled Predbat can start a forced discharge of the battery if the export rates are high and you have spare capacity. Historical load data is used to predict your consumption, optionally car charging load can be filtered out of this data. Predbat can be configured to manage the charging of your EV or use of a Solar Diverter and take into account of these loads on the house during these periods. Multiple inverter support is included but depends on all inverters running in lockstep. Terminology Basic terminology SoC - State of Charge - the % or kWh level of charge of your battery Target SoC - The target level that the battery is being charged to, e.g. we target 100% SoC means the battery is being charged to full Load - The energy your home is using to power your equipment e.g. oven, lights or electric car charging Grid - Your electric supply outside the house Import - Electricity drawn from the grid to be used in the home or to charge the battery Export - Electricity from your home from the battery or solar which is sent to the grid. PV - Solar power that is generated in your home Inverter - The box that converts DC energy from solar or from your battery into AC power for your home and the grid. The inverter also converts AC power from the grid into DC to charge a battery. Hybrid inverter - An inverter that can charge a battery from solar directly using DC power as well as charging it from AC power from the grid. AC Coupled - A battery that comes with it's own inverter and is always charged or discharged with AC (using an internal inverter) Slot - A period of time where Predbat performs an action e.g. charging. In Predbat everything is a multiple of 5 minutes. Charge slots are always in multiples of 30 minutes and align to a 30-minute boundary to match the way energy rates are allocated. Discharge slots can be any multiple of 5 minutes and always finish on a 30-minute boundary. Predbat modes When you first install Predbat it will be in 'Monitor' mode. You can configure Predbat's mode of operation using the drop down menu in select.predbat_mode . You will find a full description of Predbat Modes in the Customisation Guide. Once you are ready for Predbat to take control move this setting to one of the active control modes. Predbat status The current Predbat status is reported in the Home Assistant entity predbat.status : Idle - This is the default, the load will be covered by solar and/or battery. Excess solar will charge the battery or be exported if the battery is full. This is described as 'Eco' Mode for GivEnergy inverters but other inverters use different terminology. Charging - The battery charges from the grid and the grid also covers any load. Solar power will also be used to charge the battery. Freeze charging - The battery is charging but the current battery level (SoC) is is frozen (held). Think of it as a charge to the current battery level. The grid or solar covers any house load. If there is a shortfall of Solar power to meet house load, the excess house load is met from grid import, but if there is excess Solar power above house load, the excess solar will be used to charge the battery, Hold charging - A type of charge where the target SoC % is the same as the current SoC %, effectively the same as a charge freeze (but without being explicitly selected). No Charge - A charge where the target SoC % is lower than the current battery SoC level so there will be no charging unless the usage is unexpectedly high. Discharging - The battery is being force-discharged. The house load will be covered by the battery and any excess is exported to the grid. Any solar generated will be exported. Freeze discharging - The battery is in Discharge mode, the same as Idle (Eco) mode, but with charging disabled. The battery or solar covers the house load. As charging is disabled, if there is excess solar generated, the current SoC level will be held and the excess solar will be exported. If there is a shortfall of solar power to meet house load, the battery will discharge. Calibration - The inverter is calibrating the batteries. On GivEnergy systems the battery state of charge (SoC) level has to be calibrated by performing a full battery discharge then a full charge so that the voltage levels associated with empty and full SoC can be determined. Predbat will pause executing the plan until the calibration automatically finishes - see Calibration FAQ . Error - There is a configuration error or other problem, you should check the Predbat AppDaemon log file for more details.","title":"What does Predbat do?"},{"location":"what-does-predbat-do/#what-does-predbat-do","text":"Predbat is a home battery automation program. It automatically runs every 5 minutes and will update its prediction for the home battery levels for the next period, up to a maximum of 48 hours ahead. Predbat will automatically decide when to charge and discharge your battery to achieve the best (lowest) cost spend within the parameters you have set. It uses the solar production forecast from Solcast combined with your historical energy usage to make this prediction. The output is a prediction of the battery levels, charging slots, discharging slots, costs and import and export amounts. Costs are based on energy pricing data, either manually configured (e.g. 7p from 11pm-4pm and 35p otherwise) or by using the Octopus Energy integration Both import and export rates are supported. Intelligent Octopus is also supported and takes into account allocated charging slots. The solar forecast used is the central scenario from Solcast (50%) with a configurable weighting towards the more pessimistic (10%) scenario. The charging and discharging controls are automatically programmed into the inverter. Automatic planning of export slots is also supported, when enabled Predbat can start a forced discharge of the battery if the export rates are high and you have spare capacity. Historical load data is used to predict your consumption, optionally car charging load can be filtered out of this data. Predbat can be configured to manage the charging of your EV or use of a Solar Diverter and take into account of these loads on the house during these periods. Multiple inverter support is included but depends on all inverters running in lockstep.","title":"What does Predbat do?"},{"location":"what-does-predbat-do/#terminology","text":"","title":"Terminology"},{"location":"what-does-predbat-do/#basic-terminology","text":"SoC - State of Charge - the % or kWh level of charge of your battery Target SoC - The target level that the battery is being charged to, e.g. we target 100% SoC means the battery is being charged to full Load - The energy your home is using to power your equipment e.g. oven, lights or electric car charging Grid - Your electric supply outside the house Import - Electricity drawn from the grid to be used in the home or to charge the battery Export - Electricity from your home from the battery or solar which is sent to the grid. PV - Solar power that is generated in your home Inverter - The box that converts DC energy from solar or from your battery into AC power for your home and the grid. The inverter also converts AC power from the grid into DC to charge a battery. Hybrid inverter - An inverter that can charge a battery from solar directly using DC power as well as charging it from AC power from the grid. AC Coupled - A battery that comes with it's own inverter and is always charged or discharged with AC (using an internal inverter) Slot - A period of time where Predbat performs an action e.g. charging. In Predbat everything is a multiple of 5 minutes. Charge slots are always in multiples of 30 minutes and align to a 30-minute boundary to match the way energy rates are allocated. Discharge slots can be any multiple of 5 minutes and always finish on a 30-minute boundary.","title":"Basic terminology"},{"location":"what-does-predbat-do/#predbat-modes","text":"When you first install Predbat it will be in 'Monitor' mode. You can configure Predbat's mode of operation using the drop down menu in select.predbat_mode . You will find a full description of Predbat Modes in the Customisation Guide. Once you are ready for Predbat to take control move this setting to one of the active control modes.","title":"Predbat modes"},{"location":"what-does-predbat-do/#predbat-status","text":"The current Predbat status is reported in the Home Assistant entity predbat.status : Idle - This is the default, the load will be covered by solar and/or battery. Excess solar will charge the battery or be exported if the battery is full. This is described as 'Eco' Mode for GivEnergy inverters but other inverters use different terminology. Charging - The battery charges from the grid and the grid also covers any load. Solar power will also be used to charge the battery. Freeze charging - The battery is charging but the current battery level (SoC) is is frozen (held). Think of it as a charge to the current battery level. The grid or solar covers any house load. If there is a shortfall of Solar power to meet house load, the excess house load is met from grid import, but if there is excess Solar power above house load, the excess solar will be used to charge the battery, Hold charging - A type of charge where the target SoC % is the same as the current SoC %, effectively the same as a charge freeze (but without being explicitly selected). No Charge - A charge where the target SoC % is lower than the current battery SoC level so there will be no charging unless the usage is unexpectedly high. Discharging - The battery is being force-discharged. The house load will be covered by the battery and any excess is exported to the grid. Any solar generated will be exported. Freeze discharging - The battery is in Discharge mode, the same as Idle (Eco) mode, but with charging disabled. The battery or solar covers the house load. As charging is disabled, if there is excess solar generated, the current SoC level will be held and the excess solar will be exported. If there is a shortfall of solar power to meet house load, the battery will discharge. Calibration - The inverter is calibrating the batteries. On GivEnergy systems the battery state of charge (SoC) level has to be calibrated by performing a full battery discharge then a full charge so that the voltage levels associated with empty and full SoC can be determined. Predbat will pause executing the plan until the calibration automatically finishes - see Calibration FAQ . Error - There is a configuration error or other problem, you should check the Predbat AppDaemon log file for more details.","title":"Predbat status"}]}